Index: inceptor/6.2/app.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/app.yaml	(date 1571285745000)
+++ inceptor/6.2/app.yaml	(date 1571296635000)
@@ -84,6 +84,14 @@
   name: dbaservice
   requires:
     DBA_SERVICE_CONFIG: $(DBA_SERVICE_CONFIG)
+- applicationSelector:
+    transwarp.app: stellardb
+  dependencyOptional: true
+  maxVersion: 6.2
+  minVersion: 6.2
+  name: stellardb
+  requires:
+    STELLARDB_CLIENT_CONFIG: $(STELLARDB_CLIENT_CONFIG)
 userInputParams:
   commonConfig:
     roles:
Index: inceptor/6.2/template-json/files/entrypoint.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/files/entrypoint.sh	(date 1571285745000)
+++ inceptor/6.2/template-json/files/entrypoint.sh	(date 1571745813000)
@@ -4,6 +4,7 @@
 export TRANSWARP_DIR=/var/transwarp
 export HADOOP_CONF_DIR=/etc/hadoop/conf
 export HBASE_CONF_DIR=/etc/hyperbase/conf
+export STELLARDB_CONF_DIR=/etc/stellardb/conf
 export YARN_CONF_DIR=$HADOOP_CONF_DIR
 export INCEPTOR_CONF_DIR=/etc/inceptor/conf
 export HIVE_HOME=/usr/lib/hive
@@ -11,6 +12,8 @@
 export HADOOP_HEAPSIZE=4096

 mkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR} ${LOGDIR}/hive
+mkdir -p ${STELLARDB_CONF_DIR}
+
 /bin/cp /etc/confd/templates/hive-log4j.properties.raw ${INCEPTOR_CONF_DIR}/hive-log4j.properties
 /bin/rm -rf ${INCEPTOR_CONF_DIR}/hive-log4j.properties.server ${INCEPTOR_CONF_DIR}/log4j.properties
 /bin/cp /etc/confd/templates/log4j.properties.raw ${INCEPTOR_CONF_DIR}/log4j.properties
@@ -53,7 +56,7 @@
     CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*
   fi

-  CLASSPATH="$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR"
+  CLASSPATH="$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR:$STELLARDB_CONF_DIR"
   set +x
   for jar in `find /usr/lib/{inceptor,hadoop,hadoop-hdfs,hadoop-mapreduce,hadoop-yarn} -name "*.jar"`
   do
@@ -66,12 +69,14 @@
     JAVA_OPTS="$JAVA_OPTS -Djava.security.auth.login.config=$INCEPTOR_CONF_DIR/kafka_client_jaas.conf"
   fi

+  INCEPTOR_JAVA_OPTS="$INCEPTOR_JAVA_OPTS -Dtranswarp.query.cypher.enabled=true"
+
   wait_metastore
   sudo -u hive java $AGENT $INCEPTOR_JAVA_OPTS $JAVA_OPTS $DBA_SERVICE_OPTS -cp $CLASSPATH io.transwarp.inceptor.InceptorServer2
 }

 start_executor() {
-  CLASSPATH="/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf"
+  CLASSPATH="/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf:$STELLARDB_CONF_DIR"
   set +x
   for jar in `find /usr/lib/inceptor -name "*.jar"`; do
     CLASSPATH=$CLASSPATH:$jar
Index: inceptor/6.2/template-json/inceptor-main.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/inceptor-main.jsonnet	(date 1571285745000)
+++ inceptor/6.2/template-json/inceptor-main.jsonnet	(date 1571384522000)
@@ -20,6 +20,8 @@
   'ladder-site.properties.tmpl': importstr '../../../transwarp-commonlib/6.2/files/ladder-site.properties.tmpl',
   'hbase.toml': importstr '../../../transwarp-commonlib/6.2/files/hbase.toml',
   'hbase-site.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/hbase-site.xml.tmpl',
+  'graphconf.xml.toml': importstr '../../../transwarp-commonlib/6.2/files/graphconf.xml.toml',
+  'graphconf.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/graphconf.xml.tmpl',
   'yarn-site.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/yarn-site.xml.tmpl',
   'guardian-site.toml': importstr '../../../transwarp-commonlib/6.2/files/guardian-site.toml',
   'guardian-site.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/guardian-site.xml.tmpl',
Index: inceptor/6.2/template-json/inceptor.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/inceptor.jsonnet	(date 1571285745000)
+++ inceptor/6.2/template-json/inceptor.jsonnet	(date 1571727620000)
@@ -16,6 +16,7 @@
         shiva_client_config: config.SHIVA_CLIENT_CONFIG,
         yarn_client_config: config.YARN_CLIENT_CONFIG,
         dba_service_config: config.DBA_SERVICE_CONFIG,
+        stellardb_client_config: config.STELLARDB_CLIENT_CONFIG,
         argodb: {
           use_ladder: std.toString(config.Advance_Config.argodb.use_ladder),
         },
@@ -113,6 +114,8 @@
                      { key: 'msl-site.xml.tmpl', path: 'templates/msl-site.xml.tmpl' },
                      { key: 'hbase.toml', path: 'conf.d/hbase.toml' },
                      { key: 'hbase-site.xml.tmpl', path: 'templates/hbase-site.xml.tmpl' },
+                     { key: 'graphconf.xml.toml', path: 'conf.d/graphconf.xml.toml' },
+                     { key: 'graphconf.xml.tmpl', path: 'templates/graphconf.xml.tmpl' },
                      { key: 'dataSource.properties.tmpl', path: 'templates/dataSource.properties.tmpl' },
                      { key: 'hive-log4j.properties.raw', path: 'templates/hive-log4j.properties.raw' },
                      { key: 'log4j.properties.raw', path: 'templates/log4j.properties.raw' },
@@ -500,6 +503,8 @@
             { key: 'msl-site.xml.tmpl', path: 'templates/msl-site.xml.tmpl' },
             { key: 'hbase.toml', path: 'conf.d/hbase.toml' },
             { key: 'hbase-site.xml.tmpl', path: 'templates/hbase-site.xml.tmpl' },
+            { key: 'graphconf.xml.toml', path: 'conf.d/graphconf.xml.toml' },
+            { key: 'graphconf.xml.tmpl', path: 'templates/graphconf.xml.tmpl' },
             { key: 'ca-application.properties.toml', path: 'conf.d/application.properties.toml' },
             { key: 'ca-application.properties.tmpl', path: 'templates/application.properties.tmpl' },
           ],
Index: inceptor/6.2/template-json/test-files/config0.jsonnet.golden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571285745000)
+++ inceptor/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571745813000)
@@ -60,7 +60,7 @@
                   "cni.networks": "overlay",
                   "tos.network.staticIP": "true",
                   "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "18b1bac1d12a02b67337ac2cce1467e3fc7c9e3cfd61ea304aa85561f716bc61"
+                  "transwarp/configmap.md5": "ada2a20e2f15aff193b88c0a3a9cfb3897e9afcd07532a0c1edbbde147ccb45a"
                },
                "labels": {
                   "transwarp.alias": "inceptor_ews1100",
@@ -291,6 +291,14 @@
                               "path": "templates/hbase-site.xml.tmpl"
                            },
                            {
+                              "key": "graphconf.xml.toml",
+                              "path": "conf.d/graphconf.xml.toml"
+                           },
+                           {
+                              "key": "graphconf.xml.tmpl",
+                              "path": "templates/graphconf.xml.tmpl"
+                           },
+                           {
                               "key": "dataSource.properties.tmpl",
                               "path": "templates/dataSource.properties.tmpl"
                            },
@@ -324,6 +332,8 @@
          "ca.toml": "[[template]]\nsrc = \"atlas-application.properties.tmpl\"\ndest = \"/etc/inceptor/conf/atlas-application.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"kafka_client_jaas.conf.tmpl\"\ndest = \"/etc/inceptor/conf/kafka_client_jaas.conf\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "core-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n\n    {{- range gets \"/ladder_client_config/ladder_confd_config/core_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n{{- else -}}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"kerberos\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>true</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.filter.initializers</name>\n    <value>org.apache.hadoop.security.AuthenticationFilterInitializer</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.authentication.simple.anonymous.allowed</name>\n    <value>true</value>\n  </property>\n{{- else if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"none\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>simple</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hadoop.security.group.mapping</name>\n    <value>org.apache.hadoop.security.LdapGroupsMapping</value>\n  </property>\n\n{{- $LDAP_SLAVES := split (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_slave_addresses\" \"\") \";\" }}\n{{- if exists \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}\n  <property>\n    <name>hadoop.security.group.mapping.ldap.url</name>\n    <value>ldap://{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}:{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_port\" }}{{- if ne (len $LDAP_SLAVES) 0}} ldap://{{ join $LDAP_SLAVES \" ldap://\" }}{{- end}}</value>\n  </property>\n{{- end }}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/hdfs/guardian_plugin/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n  <property>\n    <name>ha.zookeeper.quorum</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n\n  {{- end }}\n\n</configuration>\n",
          "dataSource.properties.tmpl": "driver=com.mysql.jdbc.Driver\n{{- $MYSQL_SERVERS := split (getv \"/metastore_client_config/mysql_client_config/mysqladdresses\") \",\" }}\nurl=jdbc:mysql://{{ join $MYSQL_SERVERS (printf \":%s,\" (getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\")) }}:{{getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\"}}/{{getv \"/rubik/db_name\" \"rubik_rubik1\" }}?autoReconnect=true&failOverReadOnly=false&createDatabaseIfNotExist=false&characterEncoding=UTF-8\nusername={{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_username\" \"rubikuser\" }}\npassword={{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_password\" \"password\" }}\npoolPingQuery = select 1\npoolPingEnabled = true\npoolPingConnectionsNotUsedFor = 3600000",
+         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  {{- range gets \"/stellardb_client_config/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n  <property>\n    <name>graph.zk.quorum</name>\n    <value>{{ getv \"/stellardb_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
+         "graphconf.xml.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.toml": "[[template]]\nsrc = \"guardian-site.xml.tmpl\"\ndest = \"/etc/guardian-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.xml.tmpl": "{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n{{- range gets \"/security/guardian_client_config/guardian_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n    <property>\n        <name>guardian.server.cas.authentication.enabled</name>\n        <value>true</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.url.prefix</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.login.url</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}/login</value>\n    </property>\n{{- end }}\n\n</configuration>\n{{- end -}}\n",
          "hbase-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- range gets \"/hyperbase_client_config/hbase_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.clientPort</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_port\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.peerport</name>\n    <value>2888</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.leaderport</name>\n    <value>3888</value>\n  </property>\n\n{{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n  <property>\n    <name>hbase.rpc.engine</name>\n    <value>org.apache.hadoop.hbase.ipc.SecureRpcEngine</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" \"\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n  <property>\n      <name>hbase.rootdir</name>\n      <value>hdfs://{{ getv \"/hdfs_client_config/hdfs_confd_config/hdfs_site/dfs.nameservices\" \"\" }}{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
@@ -333,7 +343,7 @@
          "hive-env.sh.tmpl": "#!/bin/bash\n\nexport INCEPTOR_EXECUTORID_ZKSERVER=\"{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}\"\nexport ZOOKEEPER_SERVER_PRINCIPAL=\"{{ getv \"/zookeeper_client_config/zookeeper_principal\" \"\" }}\"\nexport MASTER_URI=\"akka.tcp://sparkDriver@{{ getv \"/inceptor/spark_driver_address\" \"\" }}:{{ getv \"/inceptor/spark_driver_port\" \"51888\" }}/user/CoarseGrainedScheduler\"\nexport SPARK_CORES=\"{{getv \"/java_opts/cores_opts/executor_cores\"}}\"\nexport GUARDIAN_PLUGIN_ENABLE={{ getv \"/security/guardian_plugin_enable\" \"false\" }}\nexport CATALOG_PLUGIN_ENABLE={{ getv \"/catalog_agent/enable\" \"false\" }}\nexport KRB_ENABLE={{- if eq (getv \"/security/auth_type\") \"kerberos\" -}}true{{- else -}}false{{- end }}\n\nexport JAVA_OPTS=\"\n  -Dsun.net.inetaddr.ttl=60 \\\n  -Dsun.net.inetaddr.negative.ttl=60 \\\n  -Djava.net.preferIPv4Stack=true \\\n  $JAVA_OPTS\n\"\nexport INCEPTOR_JAVA_OPTS=\"{{ getv \"/java_opts/opts/inceptor_java_opts\" }} \\\n{{- range gets \"/java_opts/*\" }}\n  -D{{base .Key}}={{.Value}} \\\n{{- end }}\n  -Dspark.driver.portfixed \\\n  -Dspark.cleaner.ttl.BROADCAST_FAST=1800 \\\n  -Dspark.fastdisk.dir=/data/fastdisks \\\n  -Dspark.local.dir=/data/slowdisks \\\n  -Dinceptor.executorID.zkServer=${INCEPTOR_EXECUTORID_ZKSERVER} \\\n  -Dzookeeper.server.principal=${ZOOKEEPER_SERVER_PRINCIPAL} \\\n  -Dspark.ui.port={{ getv \"/inceptor/spark_ui_port\" \"4040\" }} \\\n  -Dspark.driver.port={{ getv \"/inceptor/spark_driver_port\" \"51888\" }} \\\n  -Dspark.driver.host={{ getv \"/inceptor/spark_driver_address\" \"\" }} \\\n  -XX:ParallelGCThreads={{getv \"/java_opts/cores_opts/inceptor_cores\"}} \\\n  -Xms{{getv \"/java_opts/memory_opts/inceptor_memory\"}}m \\\n  -Xmx{{getv \"/java_opts/memory_opts/inceptor_memory\"}}m\n\"\n\nexport EXECUTOR_JAVA_OPTS=\"{{ getv \"/java_opts/opts/executor_java_opts\" }} \\\n{{- range gets \"/java_opts/*\" }}\n  -D{{base .Key}}={{.Value}} \\\n{{- end }}\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  -Dinceptor.authentication={{getv \"/security/auth_type\" \"kerberos\"}} \\\n  -Dspark.kerberos.keytabs=/etc/keytabs/keytab \\\n  -Dspark.kerberos.principal={{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }} \\\n{{- end }}\n  -Dspark.cleaner.ttl.BROADCAST_FAST=1800 \\\n  -Dspark.fastdisk.dir=/data/fastdisks \\\n  -Dspark.local.dir=/data/slowdisks \\\n  -Dinceptor.executorID.zkServer=${INCEPTOR_EXECUTORID_ZKSERVER} \\\n  -Dzookeeper.server.principal=${ZOOKEEPER_SERVER_PRINCIPAL} \\\n  -Xloggc:${LOGDIR}/hive/executor.gc.log \\\n  -XX:MaxDirectMemorySize={{getv \"/java_opts/memory_opts/executor_direct_memory\"}}m \\\n  -XX:ParallelGCThreads={{getv \"/java_opts/cores_opts/executor_cores\"}} \\\n  -Xms{{getv \"/java_opts/memory_opts/executor_memory\"}}m \\\n  -Xmx{{getv \"/java_opts/memory_opts/executor_memory\" }}m \\\n  -Dinceptor.log.dir=${LOGDIR}/hive   \\\n  -Dinceptor.log.file=inceptor-executor.log \\\n\"\n\nwait_metastore() {\n  dockerize -wait tcp://{{ getv \"/metastore_client_config/metastore/metastore_addresses\" \"\" }}:9083 -wait-retry-interval 5s -timeout 120s\n  if [ $? -ne 0 ]; then\n    echo \"wait inceptor timeout, Exit\"\n    exit 1\n  fi\n}\n\nwait_inceptor() {\n  dockerize -wait tcp://{{ getv \"/inceptor/spark_driver_address\" }}:{{ getv \"/inceptor/spark_ui_port\" \"4040\" }} -wait-retry-interval 5s -timeout 120s\n  if [ $? -ne 0 ]; then\n    echo \"wait inceptor timeout, Exit\"\n    exit 1\n  fi\n}\n",
          "hive-log4j.properties.raw": "hive.root.logger=INFO,DRFA,console\nhive.log.dir=/var/transwarp/logs/${user.name}\nhive.log.file=hive.log\n\nlog4j.rootLogger=${hive.root.logger}, EventCounter\n\nlog4j.threshhold=INFO\n\nlog4j.logger.org.apache.hadoop.hbase.client=INFO\nlog4j.logger.org.apache.hadoop.hive.ql.pl.blk=ERROR\n\n\nlog4j.appender.DRFA=org.apache.log4j.RollingFileAppender\n\nlog4j.appender.DRFA.File=${hive.log.dir}/${hive.log.file}\n\n#log4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFA.MaxFileSize=64MB\nlog4j.appender.DRFA.MaxBackupIndex=320\n\n# Pattern format: Date LogLevel LoggerName LogMessage\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2}: (%F:%M(%L)) [%t(%x)] - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p %c{2}: (%F:%M(%L)) [%t(%x)] - %m%n\nlog4j.appender.console.encoding=UTF-8\n\nhive.server2.audit.logger=INFO,RFAAUDIT\nlog4j.logger.org.apache.hive.service.cli.thrift.ThriftCLIService.audit=${hive.server2.audit.logger}\nlog4j.additivity.org.apache.hive.service.cli.thrift.ThriftCLIService.audit=false\nlog4j.appender.RFAAUDIT=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAAUDIT.File=${hive.log.dir}/hive-server2.audit\nlog4j.appender.RFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.RFAAUDIT.MaxFileSize=64MB\nlog4j.appender.RFAAUDIT.MaxBackupIndex=16\n\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n\nlog4j.category.DataNucleus=ERROR,DRFA\nlog4j.category.Datastore=ERROR,DRFA\nlog4j.category.Datastore.Schema=ERROR,DRFA\nlog4j.category.JPOX.Datastore=ERROR,DRFA\nlog4j.category.JPOX.Plugin=ERROR,DRFA\nlog4j.category.JPOX.MetaData=ERROR,DRFA\nlog4j.category.JPOX.Query=ERROR,DRFA\nlog4j.category.JPOX.General=ERROR,DRFA\nlog4j.category.JPOX.Enhancer=ERROR,DRFA",
          "hive-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>transwarp.docker.inceptor</name>\n    <value>{{ getv \"/inceptor/spark_driver_address\" \"\" }}:10000</value>\n  </property>\n\n  <property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>{{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_username\" }}</value>\n  </property>\n\n  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>{{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_password\" }}</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://{{ getv \"/metastore_client_config/metastore/metastore_addresses\" \"\" }}:9083</value>\n  </property>\n\n  <property>\n    <name>holodesk.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hive.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>zookeeper.znode.parent</name>\n    <value>{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n{{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n{{- end }}\n\n{{- $MYSQL_SERVERS := split (getv \"/metastore_client_config/mysql_client_config/mysqladdresses\") \",\" }}\n  <property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://{{ join $MYSQL_SERVERS (printf \":%s,\" (getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\")) }}:{{getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\"}}/{{getv \"/metastore_client_config/metastore/database\"}}?autoReconnect=true&amp;failOverReadOnly=false&amp;createDatabaseIfNotExist=false&amp;characterEncoding=UTF-8</value>\n  </property>\n\n{{- range gets \"/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n{{- range gets \"/hive_site/guardian_plugin/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n{{- if eq (getv \"/catalog_agent/enable\" \"false\") \"true\" -}}\n{{- range gets \"/hive_site/catalog_plugin/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication</name>\n    <value>{{getv \"/hive_site/hive.server2.authentication\" \"KERBEROS\"}}</value>\n  </property>\n\n  <property>\n    <name>hive.security.authenticator.manager</name>\n    <value>org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.service.id</name>\n    <value>{{ getv \"/metastore_client_config/guardian_client_config/guardian_site/guardian.permission.component\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hive.server2.authentication.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.kerberos.keytab</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hive.metastore.kerberos.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n  <property>\n    <name>yarn.resourcemanager.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n{{- else -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication</name>\n    <value>{{getv \"/hive_site/hive.server2.authentication\" \"NONE\"}}</value>\n  </property>\n\n{{- end }}\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n  <property>\n    <name>spark.ui.guardian.enabled</name>\n    <value>true</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hive_site/inceptor.scheduler.enabled\" \"false\") \"true\" -}}\n  <property>\n    <name>spark.guardian.enabled</name>\n    <value>true</value>\n  </property>\n{{- end }}\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n{{- $LDAP_SLAVES := split (getv \"/security/guardian_client_config/ldap_slave_addresses\" \"\") \";\" }}\n{{- if exists \"/security/guardian_client_config/ldap_master\" }}\n  <property>\n    <name>hive.server2.authentication.ldap.url</name>\n    <value>ldap://{{ getv \"/security/guardian_client_config/ldap_master\" }}:{{ getv \"/security/guardian_client_config/ldap_port\" }}{{- if ne (len $LDAP_SLAVES) 0}} ldap://{{ join $LDAP_SLAVES \" ldap://\" }}{{- end}}</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.ldap.baseDN</name>\n    <value>ou=people,dc=tdh</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hive.server2.authentication.cas.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.cas.prefix</name>\n    <value>{{ getv \"/security/cas_client_config/cas/cas_server_external_address\" \"\" }}{{ getv \"/security/cas_client_config/cas/cas_server_context_path\" \"\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hive.server2.authentication.guardian.token.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.guardian.url</name>\n    <value>https://{{ getv \"/security/guardian_client_config/guardian_site/guardian.server.address\" \"\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/shiva_client_config/master_group\" \"\")) 0 -}}\n  <property>\n    <name>ngmr.holodesk.shiva.mastergroup</name>\n    <value>{{ getv \"/shiva_client_config/master_group\" }}</value>\n  </property>\n  <property>\n        <name>holodesk.shiva.meta</name>\n        <value>true</value>\n  </property>\n\n{{- else }}\n\n  <property>\n    <name>holodesk.shiva.meta</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n  <property>\n    <name>ladder.user.short.circuit.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n     <name>ladder.master.rpc.server.addresslist</name>\n     <value>{{ getv \"/ladder_client_config/ladder_master_address\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if and (eq (getv \"/argodb/use_ladder\" \"false\") \"true\") (gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0) -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>ladder://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>ladder://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>ladder://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- else -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>hdfs://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>hdfs://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>hdfs://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- end }}\n\n</configuration>\n",
-         "inceptor-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"catalog_agent\": {\n    \"enable\": false,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/inceptor/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.id\": \"inceptor-1100-u5003\",\n        \"catalog.agent.service.tenant\": \"u5003\",\n        \"catalog.agent.service.version\": \"transwarp-6.0\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"server.address\": \"inceptorcagent-hl-1100.u5003.svc\",\n        \"server.port\": 25000,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 1,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 2,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"dba_service_config\": {\n\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"catalog_plugin\": {\n      \"hive_site\": {\n        \"hive.exec.failure.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveFailureHook\",\n        \"hive.exec.post.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveHook\"\n      }\n    },\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.exec.scratchdir\": \"hdfs://service/user/hive/inceptor/tmp/hive\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.client.socket.timeout\": 600,\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.metastore.warehouse.dir\": \"hdfs://service/user/hive/inceptor/user/hive/warehouse\",\n    \"hive.server2.authentication.ldap.extra.baseDNs\": \"ou=System,ou=People,dc=tdh\",\n    \"hive.server2.idle.operation.timeout\": 36000000,\n    \"hive.server2.idle.session.timeout\": 36000000,\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.server2.session.check.interval\": 60000,\n    \"hive.server2.thrift.port\": 10000,\n    \"hive.service.id\": \"inceptor-1100-u5003\",\n    \"hive.service.type\": \"INCEPTOR\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\",\n    \"orc.compact.service.provider\": \"metastore\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"inceptor\": {\n    \"inceptor_np_address\": \"inceptor-1100.u5003.svc:10000\",\n    \"spark_driver_address\": \"inceptor-hl-1100.u5003.svc\",\n    \"spark_driver_port\": 51888,\n    \"spark_ui_port\": 4040\n  },\n  \"java_opts\": {\n    \"class.default.serializer\": \"\",\n    \"cores_opts\": {\n      \"executor_cores\": \"8\",\n      \"inceptor_cores\": \"4\"\n    },\n    \"inceptor.executorID.zkPath\": \"/inceptor-cluster2/executorID\",\n    \"inceptor.executorID.zkPort\": 2181,\n    \"inceptor.executorID.zkTimeout\": 10000,\n    \"java.library.path\": \"/usr/lib/hadoop/lib/native\",\n    \"memory_opts\": {\n      \"executor_direct_memory\": \"9816\",\n      \"executor_memory\": \"9816\",\n      \"inceptor_memory\": \"13104\"\n    },\n    \"ngmr.task.pipeline\": \"false\",\n    \"ngmr.task.pipeline.start.fraction\": 0.5,\n    \"ngmr.task.pipeline.task.timeout.ms\": -1,\n    \"opts\": {\n      \"executor_java_opts\": \"-XX:PermSize=256m -XX:MaxPermSize=2g -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=55 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -verbose:gc \",\n      \"inceptor_java_opts\": \"-XX:PermSize=128m -XX:MaxPermSize=2g -server -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \"\n    },\n    \"shark.checkpoint.dir\": \"\",\n    \"spark.akka.threads\": 8,\n    \"spark.cleaner.ttl\": 14400,\n    \"spark.kryoserializer.buffer.mb\": 4,\n    \"spark.rdd.compress\": \"false\",\n    \"spark.storage.fastdiskFraction\": 0.29999999999999999,\n    \"spark.storage.memoryFraction\": 0.5\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"rubik\": {\n    \"db_name\": \"rubik_rubik1\"\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
+         "inceptor-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"catalog_agent\": {\n    \"enable\": false,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/inceptor/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.id\": \"inceptor-1100-u5003\",\n        \"catalog.agent.service.tenant\": \"u5003\",\n        \"catalog.agent.service.version\": \"transwarp-6.0\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"server.address\": \"inceptorcagent-hl-1100.u5003.svc\",\n        \"server.port\": 25000,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 1,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 2,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"dba_service_config\": {\n\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"catalog_plugin\": {\n      \"hive_site\": {\n        \"hive.exec.failure.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveFailureHook\",\n        \"hive.exec.post.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveHook\"\n      }\n    },\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.exec.scratchdir\": \"hdfs://service/user/hive/inceptor/tmp/hive\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.client.socket.timeout\": 600,\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.metastore.warehouse.dir\": \"hdfs://service/user/hive/inceptor/user/hive/warehouse\",\n    \"hive.server2.authentication.ldap.extra.baseDNs\": \"ou=System,ou=People,dc=tdh\",\n    \"hive.server2.idle.operation.timeout\": 36000000,\n    \"hive.server2.idle.session.timeout\": 36000000,\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.server2.session.check.interval\": 60000,\n    \"hive.server2.thrift.port\": 10000,\n    \"hive.service.id\": \"inceptor-1100-u5003\",\n    \"hive.service.type\": \"INCEPTOR\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\",\n    \"orc.compact.service.provider\": \"metastore\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"inceptor\": {\n    \"inceptor_np_address\": \"inceptor-1100.u5003.svc:10000\",\n    \"spark_driver_address\": \"inceptor-hl-1100.u5003.svc\",\n    \"spark_driver_port\": 51888,\n    \"spark_ui_port\": 4040\n  },\n  \"java_opts\": {\n    \"class.default.serializer\": \"\",\n    \"cores_opts\": {\n      \"executor_cores\": \"8\",\n      \"inceptor_cores\": \"4\"\n    },\n    \"inceptor.executorID.zkPath\": \"/inceptor-cluster2/executorID\",\n    \"inceptor.executorID.zkPort\": 2181,\n    \"inceptor.executorID.zkTimeout\": 10000,\n    \"java.library.path\": \"/usr/lib/hadoop/lib/native\",\n    \"memory_opts\": {\n      \"executor_direct_memory\": \"9816\",\n      \"executor_memory\": \"9816\",\n      \"inceptor_memory\": \"13104\"\n    },\n    \"ngmr.task.pipeline\": \"false\",\n    \"ngmr.task.pipeline.start.fraction\": 0.5,\n    \"ngmr.task.pipeline.task.timeout.ms\": -1,\n    \"opts\": {\n      \"executor_java_opts\": \"-XX:PermSize=256m -XX:MaxPermSize=2g -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=55 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -verbose:gc \",\n      \"inceptor_java_opts\": \"-XX:PermSize=128m -XX:MaxPermSize=2g -server -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \"\n    },\n    \"shark.checkpoint.dir\": \"\",\n    \"spark.akka.threads\": 8,\n    \"spark.cleaner.ttl\": 14400,\n    \"spark.kryoserializer.buffer.mb\": 4,\n    \"spark.rdd.compress\": \"false\",\n    \"spark.storage.fastdiskFraction\": 0.29999999999999999,\n    \"spark.storage.memoryFraction\": 0.5\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"rubik\": {\n    \"db_name\": \"rubik_rubik1\"\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"stellardb_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
          "inceptor.toml": "[[template]]\nsrc = \"hive-site.xml.tmpl\"\ndest = \"/etc/inceptor/conf/hive-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hive-env.sh.tmpl\"\ndest = \"/etc/inceptor/conf/hive-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"dataSource.properties.tmpl\"\ndest = \"/etc/inceptor/conf/dataSource.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "jaas.conf.tmpl": "KafkaClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  storeKey=true\n  keyTab=\"/etc/keytabs/keytab\"\n  principal=\"kafka/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}\";\n};\n\n// ZooKeeper client authentication\nClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  storeKey=true\n  keyTab=\"/etc/keytabs/keytab\"\n  principal=\"kafka/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}\";\n};",
          "ladder-site.properties.tmpl": "#\n# The Ladder Open Foundation licenses this work under the Apache License, version 2.0\n# (the \"License\"). You may not use this work except in compliance with the License, which is\n# available at www.apache.org/licenses/LICENSE-2.0\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n# either express or implied, as more fully set forth in the License.\n#\n# See the NOTICE file distributed with this work for information regarding copyright ownership.\n#\n\n# Site specific configuration properties for Ladder\n# Details about all configuration properties http://www.ladder.org/documentation/en/Configuration-Settings.html\n\n# Common properties\nladder.master.hostname={{getv \"/ladder_client_config/ladder_confd_config/ladder/ladder_master_hostname_service\" \"localhost\"}}\nladder.underfs.address=/vdir/tmp/ladder/localfs\nladder.master.journal.folder=/var/data/ladder/journal\nladder.master.web.port=19999\n#ladder.security.authentication.type=NOSASL\n#ladder.master.journal.type=NOOP\n#ladder.user.file.copyfromlocal.write.location.policy.class=io.transwarp.ladder.client.file.policy.LocalFirstPolicy\n\n# Security properties\n# ladder.security.authorization.permission.enabled=true\n# ladder.security.authentication.type=SIMPLE\n\n# Worker properties\nladder.worker.memory.size=4GB\nladder.worker.tieredstore.levels=2\nladder.worker.tieredstore.level0.alias=MEM\nladder.worker.tieredstore.level0.dirs.path=/var/data/ladder/laddermemdisk\nladder.worker.tieredstore.level0.watermark.high.ratio=0.9\nladder.worker.tieredstore.level0.watermark.low.ratio=0.7\nladder.worker.tieredstore.level1.alias=HDD\nladder.worker.tieredstore.level1.dirs.path=/var/data/ladder/data\nladder.worker.tieredstore.level1.dirs.quota=100GB\nladder.worker.tieredstore.level1.watermark.high.ratio=0.9\nladder.worker.tieredstore.level1.watermark.low.ratio=0.7\n#ladder.worker.allocator.class=alluxio.worker.block.allocator.MaxFreeAllocator\n#ladder.worker.evictor.class=alluxio.worker.block.evictor.LRUEvictor\nladder.worker.tieredstore.reserver.enabled=true\nladder.worker.web.port=30000\n\n\n# User properties\n# ladder.user.file.readtype.default=CACHE_PROMOTE\n# ladder.user.file.writetype.default=MUST_CACHE\n",
@@ -384,7 +394,7 @@
                "annotations": {
                   "cni.networks": "overlay",
                   "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "18b1bac1d12a02b67337ac2cce1467e3fc7c9e3cfd61ea304aa85561f716bc61"
+                  "transwarp/configmap.md5": "ada2a20e2f15aff193b88c0a3a9cfb3897e9afcd07532a0c1edbbde147ccb45a"
                },
                "labels": {
                   "transwarp.alias": "inceptor_ews1100",
@@ -579,6 +589,14 @@
                               "path": "templates/hbase-site.xml.tmpl"
                            },
                            {
+                              "key": "graphconf.xml.toml",
+                              "path": "conf.d/graphconf.xml.toml"
+                           },
+                           {
+                              "key": "graphconf.xml.tmpl",
+                              "path": "templates/graphconf.xml.tmpl"
+                           },
+                           {
                               "key": "dataSource.properties.tmpl",
                               "path": "templates/dataSource.properties.tmpl"
                            },
@@ -604,7 +622,7 @@
       "apiVersion": "v1",
       "data": {
          "entrypoint-cahook.sh": "#!/bin/bash\nset -x\n\nexport PLUGIN_HOME=/usr/lib/catalog-agent/plugins\n\ntar -xf $PLUGIN_HOME/catalog-inceptor-0.12.0+6.0.0.100.tar.gz -C $PLUGIN_HOME\nmkdir /var/catalog-plugin/hook\nmkdir /var/catalog-plugin/import\ncp $PLUGIN_HOME/catalog/inceptor/lib/* /var/catalog-plugin/hook/\ncp $PLUGIN_HOME/catalog/inceptor/import/* /var/catalog-plugin/import/",
-         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\nexport HADOOP_HEAPSIZE=4096\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR} ${LOGDIR}/hive\n/bin/cp /etc/confd/templates/hive-log4j.properties.raw ${INCEPTOR_CONF_DIR}/hive-log4j.properties\n/bin/rm -rf ${INCEPTOR_CONF_DIR}/hive-log4j.properties.server ${INCEPTOR_CONF_DIR}/log4j.properties\n/bin/cp /etc/confd/templates/log4j.properties.raw ${INCEPTOR_CONF_DIR}/log4j.properties\n\nconfd -onetime -backend file -prefix / -file /etc/confd/inceptor-confd.conf\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nmkdir -p /data/slowdisks /data/fastdisks\nchown hive:hive /data/slowdisks /data/fastdisks ${LOGDIR}/hive\nchmod 777 -R /root\nif [ -f $INCEPTOR_CONF_DIR/hive-env.sh ]; then\n   source $INCEPTOR_CONF_DIR/hive-env.sh\nfi\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -s /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n[ -s /etc/msl-site.xml ] && {\n  cp /etc/msl-site.xml $INCEPTOR_CONF_DIR\n  mkdir -p /etc/transwarp/conf/ && rm -f /etc/transwarp/conf/msl-site.xml\n  cp /etc/msl-site.xml /etc/transwarp/conf/\n}\n\nexport AGENT=\"-agentpath:/usr/lib/inceptor/bin/libagent.so\"\n\nstart_inceptor() {\n  export MASTER=\"docker\"\n  export SPARK_LIBRARY_PATH=/usr/lib/hadoop/lib/native\n  export SPARK_YARN_APP_JAR=/usr/lib/inceptor/inceptor_2.10-1.1.0-transwarp.jar\n  export SPARK_JAR=/usr/lib/inceptor/lib/spark-core_2.10-1.1.0-transwarp.jar\n  export INCEPTOR_LICENSE_ZOOKEEPER_QUORUM=172.16.1.41:2181\n  export SCALA_HOME=/usr/lib/inceptor/lib\n  export JAVA=java\n\n  if [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\n  fi\n\n  CLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/{inceptor,hadoop,hadoop-hdfs,hadoop-mapreduce,hadoop-yarn} -name \"*.jar\"`\n  do\n     CLASSPATH=\"$CLASSPATH:$jar\"\n  done\n  set -x\n\n  if [ x\"$CATALOG_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/catalog-plugin/hook/*\n    JAVA_OPTS=\"$JAVA_OPTS -Djava.security.auth.login.config=$INCEPTOR_CONF_DIR/kafka_client_jaas.conf\"\n  fi\n\n  wait_metastore\n  sudo -u hive java $AGENT $INCEPTOR_JAVA_OPTS $JAVA_OPTS $DBA_SERVICE_OPTS -cp $CLASSPATH io.transwarp.inceptor.InceptorServer2\n}\n\nstart_executor() {\n  CLASSPATH=\"/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf\"\n  set +x\n  for jar in `find /usr/lib/inceptor -name \"*.jar\"`; do\n    CLASSPATH=$CLASSPATH:$jar\n  done\n  set -x\n\n  wait_inceptor\n  sudo -u hive java $AGENT $EXECUTOR_JAVA_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n    org.apache.spark.executor.CoarseGrainedExecutorBackend \\\n    $MASTER_URI \\\n    0 \\\n    $HOSTNAME \\\n    ${SPARK_CORES}\n}\n\nstart_histroy_server() {\n  echo \"ToDo...\"\n}\n\nstart_catalog_agent() {\n  set -ex\n  echo \"options use-vc\" >>/etc/resolv.conf\n\n  export CATALOG_AGENT_CONF_DIR=/etc/catalog-agent/conf\n  export CATALOG_AGENT_HOME=/usr/lib/catalog-agent\n  export CATALOG_AGENT_COMPONENT=hive\n  export CATALOG_AGENT_VERSION=inceptor-0.12.0\n  export LOG_DIR=${LOG_DIR:-/var/log/catalog-agent}\n  \n  CATALOG_AGENT_MEM=${CATALOG_AGENT_MEM%.*}\n  if [[ \"${CATALOG_AGENT_MEM}\" == \"\" ]]; then\n    echo \"CATALOG_WEB_MEM is not configured, use default configure\"\n  elif (( \"$CATALOG_AGENT_MEM\" < \"1024\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  elif  (( \"$CATALOG_AGENT_MEM\" > \"2048\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms2048m -Xmx2048m -Xmn1024m -server -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  else\n    HEAP_MEM=`expr ${CATALOG_AGENT_MEM} - 64 - 256`\n    CATALOG_AGENT_HEAP=\"-Xms${HEAP_MEM}m -Xmx${HEAP_MEM}m -XX:PermSize=64m -XX:MaxPermSize=256m -Xmn512m -server -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  fi\n  \n  export CATALOG_AGENT_HEAP\n  export IPV4=\"-Djava.net.preferIPv4Stack=true\"\n  \n  CLASSPATH=${CATALOG_AGENT_CONF_DIR}\n  JAR=${CATALOG_AGENT_HOME}/${CATALOG_AGENT_COMPONENT}/${CATALOG_AGENT_VERSION}/${CATALOG_AGENT_VERSION}-${CATALOG_VERSION}.jar\n  \n  export CATALOG_AGENT_HEAP=${CATALOG_AGENT_HEAP:-\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"}\n  \n  if [[ \"${KRB_ENABLE}\" == \"true\" ]]; then\n      SECURITY=\"-Djava.security.krb5.conf=/etc/krb5.conf\"\n  fi\n  \n  if [[ \"${DEBUG_ENABLE}\" == \"true\" ]]; then\n    export DEBUG=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$CATALOG_AGENT_DEBUG_PORT\"\n  fi\n\n  JAVA_OPTS=\"$CATALOG_AGENT_HEAP $SECURITY $IPV4 -Dloader.path=$CATALOG_AGENT_CONF_DIR -Dsun.net.inetaddr.ttl=30 $DEBUG\"\n  \n  ${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${CLASSPATH} -jar ${JAR}\n}\n\ncase $1 in\n   inceptor )\n     start_inceptor\n   ;;\n   executor )\n     start_executor\n   ;;\n   history-server )\n     start_histroy_server\n   ;;\n   catalog-agent )\n     start_catalog_agent\n   ;;\n   * )\n     echo \"ROLE: inceptor | executor | history-server, Wrong args. exit\"\n     exit 1\n   ;;\nesac\n"
+         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport STELLARDB_CONF_DIR=/etc/stellardb/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\nexport HADOOP_HEAPSIZE=4096\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR} ${LOGDIR}/hive\nmkdir -p ${STELLARDB_CONF_DIR}\n\n/bin/cp /etc/confd/templates/hive-log4j.properties.raw ${INCEPTOR_CONF_DIR}/hive-log4j.properties\n/bin/rm -rf ${INCEPTOR_CONF_DIR}/hive-log4j.properties.server ${INCEPTOR_CONF_DIR}/log4j.properties\n/bin/cp /etc/confd/templates/log4j.properties.raw ${INCEPTOR_CONF_DIR}/log4j.properties\n\nconfd -onetime -backend file -prefix / -file /etc/confd/inceptor-confd.conf\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nmkdir -p /data/slowdisks /data/fastdisks\nchown hive:hive /data/slowdisks /data/fastdisks ${LOGDIR}/hive\nchmod 777 -R /root\nif [ -f $INCEPTOR_CONF_DIR/hive-env.sh ]; then\n   source $INCEPTOR_CONF_DIR/hive-env.sh\nfi\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -s /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n[ -s /etc/msl-site.xml ] && {\n  cp /etc/msl-site.xml $INCEPTOR_CONF_DIR\n  mkdir -p /etc/transwarp/conf/ && rm -f /etc/transwarp/conf/msl-site.xml\n  cp /etc/msl-site.xml /etc/transwarp/conf/\n}\n\nexport AGENT=\"-agentpath:/usr/lib/inceptor/bin/libagent.so\"\n\nstart_inceptor() {\n  export MASTER=\"docker\"\n  export SPARK_LIBRARY_PATH=/usr/lib/hadoop/lib/native\n  export SPARK_YARN_APP_JAR=/usr/lib/inceptor/inceptor_2.10-1.1.0-transwarp.jar\n  export SPARK_JAR=/usr/lib/inceptor/lib/spark-core_2.10-1.1.0-transwarp.jar\n  export INCEPTOR_LICENSE_ZOOKEEPER_QUORUM=172.16.1.41:2181\n  export SCALA_HOME=/usr/lib/inceptor/lib\n  export JAVA=java\n\n  if [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\n  fi\n\n  CLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR:$STELLARDB_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/{inceptor,hadoop,hadoop-hdfs,hadoop-mapreduce,hadoop-yarn} -name \"*.jar\"`\n  do\n     CLASSPATH=\"$CLASSPATH:$jar\"\n  done\n  set -x\n\n  if [ x\"$CATALOG_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/catalog-plugin/hook/*\n    JAVA_OPTS=\"$JAVA_OPTS -Djava.security.auth.login.config=$INCEPTOR_CONF_DIR/kafka_client_jaas.conf\"\n  fi\n\n  INCEPTOR_JAVA_OPTS=\"$INCEPTOR_JAVA_OPTS -Dtranswarp.query.cypher.enabled=true\"\n\n  wait_metastore\n  sudo -u hive java $AGENT $INCEPTOR_JAVA_OPTS $JAVA_OPTS $DBA_SERVICE_OPTS -cp $CLASSPATH io.transwarp.inceptor.InceptorServer2\n}\n\nstart_executor() {\n  CLASSPATH=\"/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf:$STELLARDB_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/inceptor -name \"*.jar\"`; do\n    CLASSPATH=$CLASSPATH:$jar\n  done\n  set -x\n\n  wait_inceptor\n  sudo -u hive java $AGENT $EXECUTOR_JAVA_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n    org.apache.spark.executor.CoarseGrainedExecutorBackend \\\n    $MASTER_URI \\\n    0 \\\n    $HOSTNAME \\\n    ${SPARK_CORES}\n}\n\nstart_histroy_server() {\n  echo \"ToDo...\"\n}\n\nstart_catalog_agent() {\n  set -ex\n  echo \"options use-vc\" >>/etc/resolv.conf\n\n  export CATALOG_AGENT_CONF_DIR=/etc/catalog-agent/conf\n  export CATALOG_AGENT_HOME=/usr/lib/catalog-agent\n  export CATALOG_AGENT_COMPONENT=hive\n  export CATALOG_AGENT_VERSION=inceptor-0.12.0\n  export LOG_DIR=${LOG_DIR:-/var/log/catalog-agent}\n  \n  CATALOG_AGENT_MEM=${CATALOG_AGENT_MEM%.*}\n  if [[ \"${CATALOG_AGENT_MEM}\" == \"\" ]]; then\n    echo \"CATALOG_WEB_MEM is not configured, use default configure\"\n  elif (( \"$CATALOG_AGENT_MEM\" < \"1024\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  elif  (( \"$CATALOG_AGENT_MEM\" > \"2048\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms2048m -Xmx2048m -Xmn1024m -server -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  else\n    HEAP_MEM=`expr ${CATALOG_AGENT_MEM} - 64 - 256`\n    CATALOG_AGENT_HEAP=\"-Xms${HEAP_MEM}m -Xmx${HEAP_MEM}m -XX:PermSize=64m -XX:MaxPermSize=256m -Xmn512m -server -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  fi\n  \n  export CATALOG_AGENT_HEAP\n  export IPV4=\"-Djava.net.preferIPv4Stack=true\"\n  \n  CLASSPATH=${CATALOG_AGENT_CONF_DIR}\n  JAR=${CATALOG_AGENT_HOME}/${CATALOG_AGENT_COMPONENT}/${CATALOG_AGENT_VERSION}/${CATALOG_AGENT_VERSION}-${CATALOG_VERSION}.jar\n  \n  export CATALOG_AGENT_HEAP=${CATALOG_AGENT_HEAP:-\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"}\n  \n  if [[ \"${KRB_ENABLE}\" == \"true\" ]]; then\n      SECURITY=\"-Djava.security.krb5.conf=/etc/krb5.conf\"\n  fi\n  \n  if [[ \"${DEBUG_ENABLE}\" == \"true\" ]]; then\n    export DEBUG=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$CATALOG_AGENT_DEBUG_PORT\"\n  fi\n\n  JAVA_OPTS=\"$CATALOG_AGENT_HEAP $SECURITY $IPV4 -Dloader.path=$CATALOG_AGENT_CONF_DIR -Dsun.net.inetaddr.ttl=30 $DEBUG\"\n  \n  ${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${CLASSPATH} -jar ${JAR}\n}\n\ncase $1 in\n   inceptor )\n     start_inceptor\n   ;;\n   executor )\n     start_executor\n   ;;\n   history-server )\n     start_histroy_server\n   ;;\n   catalog-agent )\n     start_catalog_agent\n   ;;\n   * )\n     echo \"ROLE: inceptor | executor | history-server, Wrong args. exit\"\n     exit 1\n   ;;\nesac\n"
       },
       "kind": "ConfigMap",
       "metadata": {
Index: inceptor/6.2/template-json/test-files/config1.jsonnet.golden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/test-files/config1.jsonnet.golden	(date 1571285745000)
+++ inceptor/6.2/template-json/test-files/config1.jsonnet.golden	(date 1571745813000)
@@ -61,7 +61,7 @@
                   "cni.networks": "overlay",
                   "tos.network.staticIP": "true",
                   "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "18b1bac1d12a02b67337ac2cce1467e3e89c3a75e98da842a55ca4cf94fa607a"
+                  "transwarp/configmap.md5": "ada2a20e2f15aff193b88c0a3a9cfb384b35236c8c2e209e81bec9d9653cb6b2"
                },
                "labels": {
                   "transwarp.alias": "inceptor_ews1100",
@@ -292,6 +292,14 @@
                               "path": "templates/hbase-site.xml.tmpl"
                            },
                            {
+                              "key": "graphconf.xml.toml",
+                              "path": "conf.d/graphconf.xml.toml"
+                           },
+                           {
+                              "key": "graphconf.xml.tmpl",
+                              "path": "templates/graphconf.xml.tmpl"
+                           },
+                           {
                               "key": "dataSource.properties.tmpl",
                               "path": "templates/dataSource.properties.tmpl"
                            },
@@ -353,7 +361,7 @@
                "annotations": {
                   "cni.networks": "overlay",
                   "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "18b1bac1d12a02b67337ac2cce1467e3e89c3a75e98da842a55ca4cf94fa607a"
+                  "transwarp/configmap.md5": "ada2a20e2f15aff193b88c0a3a9cfb384b35236c8c2e209e81bec9d9653cb6b2"
                },
                "labels": {
                   "transwarp.alias": "inceptor_ews1100",
@@ -525,6 +533,14 @@
                               "path": "templates/hbase-site.xml.tmpl"
                            },
                            {
+                              "key": "graphconf.xml.toml",
+                              "path": "conf.d/graphconf.xml.toml"
+                           },
+                           {
+                              "key": "graphconf.xml.tmpl",
+                              "path": "templates/graphconf.xml.tmpl"
+                           },
+                           {
                               "key": "ca-application.properties.toml",
                               "path": "conf.d/application.properties.toml"
                            },
@@ -583,6 +599,8 @@
          "ca.toml": "[[template]]\nsrc = \"atlas-application.properties.tmpl\"\ndest = \"/etc/inceptor/conf/atlas-application.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"kafka_client_jaas.conf.tmpl\"\ndest = \"/etc/inceptor/conf/kafka_client_jaas.conf\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "core-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n\n    {{- range gets \"/ladder_client_config/ladder_confd_config/core_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n{{- else -}}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"kerberos\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>true</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.filter.initializers</name>\n    <value>org.apache.hadoop.security.AuthenticationFilterInitializer</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.authentication.simple.anonymous.allowed</name>\n    <value>true</value>\n  </property>\n{{- else if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"none\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>simple</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hadoop.security.group.mapping</name>\n    <value>org.apache.hadoop.security.LdapGroupsMapping</value>\n  </property>\n\n{{- $LDAP_SLAVES := split (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_slave_addresses\" \"\") \";\" }}\n{{- if exists \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}\n  <property>\n    <name>hadoop.security.group.mapping.ldap.url</name>\n    <value>ldap://{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}:{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_port\" }}{{- if ne (len $LDAP_SLAVES) 0}} ldap://{{ join $LDAP_SLAVES \" ldap://\" }}{{- end}}</value>\n  </property>\n{{- end }}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/hdfs/guardian_plugin/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n  <property>\n    <name>ha.zookeeper.quorum</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n\n  {{- end }}\n\n</configuration>\n",
          "dataSource.properties.tmpl": "driver=com.mysql.jdbc.Driver\n{{- $MYSQL_SERVERS := split (getv \"/metastore_client_config/mysql_client_config/mysqladdresses\") \",\" }}\nurl=jdbc:mysql://{{ join $MYSQL_SERVERS (printf \":%s,\" (getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\")) }}:{{getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\"}}/{{getv \"/rubik/db_name\" \"rubik_rubik1\" }}?autoReconnect=true&failOverReadOnly=false&createDatabaseIfNotExist=false&characterEncoding=UTF-8\nusername={{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_username\" \"rubikuser\" }}\npassword={{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_password\" \"password\" }}\npoolPingQuery = select 1\npoolPingEnabled = true\npoolPingConnectionsNotUsedFor = 3600000",
+         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  {{- range gets \"/stellardb_client_config/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n  <property>\n    <name>graph.zk.quorum</name>\n    <value>{{ getv \"/stellardb_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
+         "graphconf.xml.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.toml": "[[template]]\nsrc = \"guardian-site.xml.tmpl\"\ndest = \"/etc/guardian-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.xml.tmpl": "{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n{{- range gets \"/security/guardian_client_config/guardian_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n    <property>\n        <name>guardian.server.cas.authentication.enabled</name>\n        <value>true</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.url.prefix</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.login.url</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}/login</value>\n    </property>\n{{- end }}\n\n</configuration>\n{{- end -}}\n",
          "hbase-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- range gets \"/hyperbase_client_config/hbase_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.clientPort</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_port\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.peerport</name>\n    <value>2888</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.leaderport</name>\n    <value>3888</value>\n  </property>\n\n{{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n  <property>\n    <name>hbase.rpc.engine</name>\n    <value>org.apache.hadoop.hbase.ipc.SecureRpcEngine</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" \"\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n  <property>\n      <name>hbase.rootdir</name>\n      <value>hdfs://{{ getv \"/hdfs_client_config/hdfs_confd_config/hdfs_site/dfs.nameservices\" \"\" }}{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
@@ -592,7 +610,7 @@
          "hive-env.sh.tmpl": "#!/bin/bash\n\nexport INCEPTOR_EXECUTORID_ZKSERVER=\"{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}\"\nexport ZOOKEEPER_SERVER_PRINCIPAL=\"{{ getv \"/zookeeper_client_config/zookeeper_principal\" \"\" }}\"\nexport MASTER_URI=\"akka.tcp://sparkDriver@{{ getv \"/inceptor/spark_driver_address\" \"\" }}:{{ getv \"/inceptor/spark_driver_port\" \"51888\" }}/user/CoarseGrainedScheduler\"\nexport SPARK_CORES=\"{{getv \"/java_opts/cores_opts/executor_cores\"}}\"\nexport GUARDIAN_PLUGIN_ENABLE={{ getv \"/security/guardian_plugin_enable\" \"false\" }}\nexport CATALOG_PLUGIN_ENABLE={{ getv \"/catalog_agent/enable\" \"false\" }}\nexport KRB_ENABLE={{- if eq (getv \"/security/auth_type\") \"kerberos\" -}}true{{- else -}}false{{- end }}\n\nexport JAVA_OPTS=\"\n  -Dsun.net.inetaddr.ttl=60 \\\n  -Dsun.net.inetaddr.negative.ttl=60 \\\n  -Djava.net.preferIPv4Stack=true \\\n  $JAVA_OPTS\n\"\nexport INCEPTOR_JAVA_OPTS=\"{{ getv \"/java_opts/opts/inceptor_java_opts\" }} \\\n{{- range gets \"/java_opts/*\" }}\n  -D{{base .Key}}={{.Value}} \\\n{{- end }}\n  -Dspark.driver.portfixed \\\n  -Dspark.cleaner.ttl.BROADCAST_FAST=1800 \\\n  -Dspark.fastdisk.dir=/data/fastdisks \\\n  -Dspark.local.dir=/data/slowdisks \\\n  -Dinceptor.executorID.zkServer=${INCEPTOR_EXECUTORID_ZKSERVER} \\\n  -Dzookeeper.server.principal=${ZOOKEEPER_SERVER_PRINCIPAL} \\\n  -Dspark.ui.port={{ getv \"/inceptor/spark_ui_port\" \"4040\" }} \\\n  -Dspark.driver.port={{ getv \"/inceptor/spark_driver_port\" \"51888\" }} \\\n  -Dspark.driver.host={{ getv \"/inceptor/spark_driver_address\" \"\" }} \\\n  -XX:ParallelGCThreads={{getv \"/java_opts/cores_opts/inceptor_cores\"}} \\\n  -Xms{{getv \"/java_opts/memory_opts/inceptor_memory\"}}m \\\n  -Xmx{{getv \"/java_opts/memory_opts/inceptor_memory\"}}m\n\"\n\nexport EXECUTOR_JAVA_OPTS=\"{{ getv \"/java_opts/opts/executor_java_opts\" }} \\\n{{- range gets \"/java_opts/*\" }}\n  -D{{base .Key}}={{.Value}} \\\n{{- end }}\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  -Dinceptor.authentication={{getv \"/security/auth_type\" \"kerberos\"}} \\\n  -Dspark.kerberos.keytabs=/etc/keytabs/keytab \\\n  -Dspark.kerberos.principal={{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }} \\\n{{- end }}\n  -Dspark.cleaner.ttl.BROADCAST_FAST=1800 \\\n  -Dspark.fastdisk.dir=/data/fastdisks \\\n  -Dspark.local.dir=/data/slowdisks \\\n  -Dinceptor.executorID.zkServer=${INCEPTOR_EXECUTORID_ZKSERVER} \\\n  -Dzookeeper.server.principal=${ZOOKEEPER_SERVER_PRINCIPAL} \\\n  -Xloggc:${LOGDIR}/hive/executor.gc.log \\\n  -XX:MaxDirectMemorySize={{getv \"/java_opts/memory_opts/executor_direct_memory\"}}m \\\n  -XX:ParallelGCThreads={{getv \"/java_opts/cores_opts/executor_cores\"}} \\\n  -Xms{{getv \"/java_opts/memory_opts/executor_memory\"}}m \\\n  -Xmx{{getv \"/java_opts/memory_opts/executor_memory\" }}m \\\n  -Dinceptor.log.dir=${LOGDIR}/hive   \\\n  -Dinceptor.log.file=inceptor-executor.log \\\n\"\n\nwait_metastore() {\n  dockerize -wait tcp://{{ getv \"/metastore_client_config/metastore/metastore_addresses\" \"\" }}:9083 -wait-retry-interval 5s -timeout 120s\n  if [ $? -ne 0 ]; then\n    echo \"wait inceptor timeout, Exit\"\n    exit 1\n  fi\n}\n\nwait_inceptor() {\n  dockerize -wait tcp://{{ getv \"/inceptor/spark_driver_address\" }}:{{ getv \"/inceptor/spark_ui_port\" \"4040\" }} -wait-retry-interval 5s -timeout 120s\n  if [ $? -ne 0 ]; then\n    echo \"wait inceptor timeout, Exit\"\n    exit 1\n  fi\n}\n",
          "hive-log4j.properties.raw": "hive.root.logger=INFO,DRFA,console\nhive.log.dir=/var/transwarp/logs/${user.name}\nhive.log.file=hive.log\n\nlog4j.rootLogger=${hive.root.logger}, EventCounter\n\nlog4j.threshhold=INFO\n\nlog4j.logger.org.apache.hadoop.hbase.client=INFO\nlog4j.logger.org.apache.hadoop.hive.ql.pl.blk=ERROR\n\n\nlog4j.appender.DRFA=org.apache.log4j.RollingFileAppender\n\nlog4j.appender.DRFA.File=${hive.log.dir}/${hive.log.file}\n\n#log4j.appender.DRFA.DatePattern=.yyyy-MM-dd\n\n# 30-day backup\n#log4j.appender.DRFA.MaxBackupIndex=30\nlog4j.appender.DRFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.DRFA.MaxFileSize=64MB\nlog4j.appender.DRFA.MaxBackupIndex=320\n\n# Pattern format: Date LogLevel LoggerName LogMessage\n#log4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %p %c: %m%n\n# Debugging Pattern format\nlog4j.appender.DRFA.layout.ConversionPattern=%d{ISO8601} %-5p %c{2}: (%F:%M(%L)) [%t(%x)] - %m%n\n\n\n#\n# console\n# Add \"console\" to rootlogger above if you want to use this\n#\n\nlog4j.appender.console=org.apache.log4j.ConsoleAppender\nlog4j.appender.console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.console.layout.ConversionPattern=%d{ISO8601} %-5p %c{2}: (%F:%M(%L)) [%t(%x)] - %m%n\nlog4j.appender.console.encoding=UTF-8\n\nhive.server2.audit.logger=INFO,RFAAUDIT\nlog4j.logger.org.apache.hive.service.cli.thrift.ThriftCLIService.audit=${hive.server2.audit.logger}\nlog4j.additivity.org.apache.hive.service.cli.thrift.ThriftCLIService.audit=false\nlog4j.appender.RFAAUDIT=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFAAUDIT.File=${hive.log.dir}/hive-server2.audit\nlog4j.appender.RFAAUDIT.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFAAUDIT.layout.ConversionPattern=%d{ISO8601} %p %c{2}: %m%n\nlog4j.appender.RFAAUDIT.MaxFileSize=64MB\nlog4j.appender.RFAAUDIT.MaxBackupIndex=16\n\nlog4j.appender.EventCounter=org.apache.hadoop.log.metrics.EventCounter\n\n\nlog4j.category.DataNucleus=ERROR,DRFA\nlog4j.category.Datastore=ERROR,DRFA\nlog4j.category.Datastore.Schema=ERROR,DRFA\nlog4j.category.JPOX.Datastore=ERROR,DRFA\nlog4j.category.JPOX.Plugin=ERROR,DRFA\nlog4j.category.JPOX.MetaData=ERROR,DRFA\nlog4j.category.JPOX.Query=ERROR,DRFA\nlog4j.category.JPOX.General=ERROR,DRFA\nlog4j.category.JPOX.Enhancer=ERROR,DRFA",
          "hive-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>transwarp.docker.inceptor</name>\n    <value>{{ getv \"/inceptor/spark_driver_address\" \"\" }}:10000</value>\n  </property>\n\n  <property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>{{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_username\" }}</value>\n  </property>\n\n  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>{{ getv \"/metastore_client_config/metastore/javax_jdo_option_connection_password\" }}</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.uris</name>\n    <value>thrift://{{ getv \"/metastore_client_config/metastore/metastore_addresses\" \"\" }}:9083</value>\n  </property>\n\n  <property>\n    <name>holodesk.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hive.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>zookeeper.znode.parent</name>\n    <value>{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n{{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n{{- end }}\n\n{{- $MYSQL_SERVERS := split (getv \"/metastore_client_config/mysql_client_config/mysqladdresses\") \",\" }}\n  <property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://{{ join $MYSQL_SERVERS (printf \":%s,\" (getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\")) }}:{{getv \"/metastore_client_config/mysql_client_config/mysqlport\" \"3306\"}}/{{getv \"/metastore_client_config/metastore/database\"}}?autoReconnect=true&amp;failOverReadOnly=false&amp;createDatabaseIfNotExist=false&amp;characterEncoding=UTF-8</value>\n  </property>\n\n{{- range gets \"/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n{{- range gets \"/hive_site/guardian_plugin/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n{{- if eq (getv \"/catalog_agent/enable\" \"false\") \"true\" -}}\n{{- range gets \"/hive_site/catalog_plugin/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication</name>\n    <value>{{getv \"/hive_site/hive.server2.authentication\" \"KERBEROS\"}}</value>\n  </property>\n\n  <property>\n    <name>hive.security.authenticator.manager</name>\n    <value>org.apache.hadoop.hive.ql.security.SessionStateUserAuthenticator</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.service.id</name>\n    <value>{{ getv \"/metastore_client_config/guardian_client_config/guardian_site/guardian.permission.component\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hive.server2.authentication.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.kerberos.keytab</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n  <property>\n    <name>hive.metastore.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hive.metastore.kerberos.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n  <property>\n    <name>yarn.resourcemanager.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n{{- else -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication</name>\n    <value>{{getv \"/hive_site/hive.server2.authentication\" \"NONE\"}}</value>\n  </property>\n\n{{- end }}\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n  <property>\n    <name>spark.ui.guardian.enabled</name>\n    <value>true</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hive_site/inceptor.scheduler.enabled\" \"false\") \"true\" -}}\n  <property>\n    <name>spark.guardian.enabled</name>\n    <value>true</value>\n  </property>\n{{- end }}\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n{{- $LDAP_SLAVES := split (getv \"/security/guardian_client_config/ldap_slave_addresses\" \"\") \";\" }}\n{{- if exists \"/security/guardian_client_config/ldap_master\" }}\n  <property>\n    <name>hive.server2.authentication.ldap.url</name>\n    <value>ldap://{{ getv \"/security/guardian_client_config/ldap_master\" }}:{{ getv \"/security/guardian_client_config/ldap_port\" }}{{- if ne (len $LDAP_SLAVES) 0}} ldap://{{ join $LDAP_SLAVES \" ldap://\" }}{{- end}}</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.ldap.baseDN</name>\n    <value>ou=people,dc=tdh</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hive.server2.authentication.cas.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.cas.prefix</name>\n    <value>{{ getv \"/security/cas_client_config/cas/cas_server_external_address\" \"\" }}{{ getv \"/security/cas_client_config/cas/cas_server_context_path\" \"\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hive.server2.authentication.guardian.token.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.server2.authentication.guardian.url</name>\n    <value>https://{{ getv \"/security/guardian_client_config/guardian_site/guardian.server.address\" \"\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/shiva_client_config/master_group\" \"\")) 0 -}}\n  <property>\n    <name>ngmr.holodesk.shiva.mastergroup</name>\n    <value>{{ getv \"/shiva_client_config/master_group\" }}</value>\n  </property>\n  <property>\n        <name>holodesk.shiva.meta</name>\n        <value>true</value>\n  </property>\n\n{{- else }}\n\n  <property>\n    <name>holodesk.shiva.meta</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n  <property>\n    <name>ladder.user.short.circuit.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n     <name>ladder.master.rpc.server.addresslist</name>\n     <value>{{ getv \"/ladder_client_config/ladder_master_address\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if and (eq (getv \"/argodb/use_ladder\" \"false\") \"true\") (gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0) -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>ladder://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>ladder://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>ladder://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- else -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>hdfs://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>hdfs://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>hdfs://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- end }}\n\n</configuration>\n",
-         "inceptor-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"catalog_agent\": {\n    \"enable\": true,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/inceptor/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.id\": \"inceptor-1100-u5003\",\n        \"catalog.agent.service.tenant\": \"u5003\",\n        \"catalog.agent.service.version\": \"transwarp-6.0\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"server.address\": \"inceptorcagent-hl-1100.u5003.svc\",\n        \"server.port\": 25000,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 1,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 2,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"dba_service_config\": {\n\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"catalog_plugin\": {\n      \"hive_site\": {\n        \"hive.exec.failure.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveFailureHook\",\n        \"hive.exec.post.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveHook\"\n      }\n    },\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.exec.scratchdir\": \"hdfs://service/user/hive/inceptor/tmp/hive\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.client.socket.timeout\": 600,\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.metastore.warehouse.dir\": \"hdfs://service/user/hive/inceptor/user/hive/warehouse\",\n    \"hive.server2.authentication.ldap.extra.baseDNs\": \"ou=System,ou=People,dc=tdh\",\n    \"hive.server2.idle.operation.timeout\": 36000000,\n    \"hive.server2.idle.session.timeout\": 36000000,\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.server2.session.check.interval\": 60000,\n    \"hive.server2.thrift.port\": 10000,\n    \"hive.service.id\": \"inceptor-1100-u5003\",\n    \"hive.service.type\": \"INCEPTOR\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\",\n    \"orc.compact.service.provider\": \"metastore\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"inceptor\": {\n    \"inceptor_np_address\": \"inceptor-1100.u5003.svc:10000\",\n    \"spark_driver_address\": \"inceptor-hl-1100.u5003.svc\",\n    \"spark_driver_port\": 51888,\n    \"spark_ui_port\": 4040\n  },\n  \"java_opts\": {\n    \"class.default.serializer\": \"\",\n    \"cores_opts\": {\n      \"executor_cores\": \"8\",\n      \"inceptor_cores\": \"4\"\n    },\n    \"inceptor.executorID.zkPath\": \"/inceptor-cluster2/executorID\",\n    \"inceptor.executorID.zkPort\": 2181,\n    \"inceptor.executorID.zkTimeout\": 10000,\n    \"java.library.path\": \"/usr/lib/hadoop/lib/native\",\n    \"memory_opts\": {\n      \"executor_direct_memory\": \"9816\",\n      \"executor_memory\": \"9816\",\n      \"inceptor_memory\": \"13104\"\n    },\n    \"ngmr.task.pipeline\": \"false\",\n    \"ngmr.task.pipeline.start.fraction\": 0.5,\n    \"ngmr.task.pipeline.task.timeout.ms\": -1,\n    \"opts\": {\n      \"executor_java_opts\": \"-XX:PermSize=256m -XX:MaxPermSize=2g -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=55 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -verbose:gc \",\n      \"inceptor_java_opts\": \"-XX:PermSize=128m -XX:MaxPermSize=2g -server -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \"\n    },\n    \"shark.checkpoint.dir\": \"\",\n    \"spark.akka.threads\": 8,\n    \"spark.cleaner.ttl\": 14400,\n    \"spark.kryoserializer.buffer.mb\": 4,\n    \"spark.rdd.compress\": \"false\",\n    \"spark.storage.fastdiskFraction\": 0.29999999999999999,\n    \"spark.storage.memoryFraction\": 0.5\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"rubik\": {\n    \"db_name\": \"rubik_rubik1\"\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
+         "inceptor-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"catalog_agent\": {\n    \"enable\": true,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/inceptor/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.id\": \"inceptor-1100-u5003\",\n        \"catalog.agent.service.tenant\": \"u5003\",\n        \"catalog.agent.service.version\": \"transwarp-6.0\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"server.address\": \"inceptorcagent-hl-1100.u5003.svc\",\n        \"server.port\": 25000,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 1,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 2,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"dba_service_config\": {\n\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"catalog_plugin\": {\n      \"hive_site\": {\n        \"hive.exec.failure.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveFailureHook\",\n        \"hive.exec.post.hooks\": \"io.transwarp.catalog.hook.inceptor._6_0_0.HiveHook\"\n      }\n    },\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.exec.scratchdir\": \"hdfs://service/user/hive/inceptor/tmp/hive\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.client.socket.timeout\": 600,\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.metastore.warehouse.dir\": \"hdfs://service/user/hive/inceptor/user/hive/warehouse\",\n    \"hive.server2.authentication.ldap.extra.baseDNs\": \"ou=System,ou=People,dc=tdh\",\n    \"hive.server2.idle.operation.timeout\": 36000000,\n    \"hive.server2.idle.session.timeout\": 36000000,\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.server2.session.check.interval\": 60000,\n    \"hive.server2.thrift.port\": 10000,\n    \"hive.service.id\": \"inceptor-1100-u5003\",\n    \"hive.service.type\": \"INCEPTOR\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\",\n    \"orc.compact.service.provider\": \"metastore\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"inceptor\": {\n    \"inceptor_np_address\": \"inceptor-1100.u5003.svc:10000\",\n    \"spark_driver_address\": \"inceptor-hl-1100.u5003.svc\",\n    \"spark_driver_port\": 51888,\n    \"spark_ui_port\": 4040\n  },\n  \"java_opts\": {\n    \"class.default.serializer\": \"\",\n    \"cores_opts\": {\n      \"executor_cores\": \"8\",\n      \"inceptor_cores\": \"4\"\n    },\n    \"inceptor.executorID.zkPath\": \"/inceptor-cluster2/executorID\",\n    \"inceptor.executorID.zkPort\": 2181,\n    \"inceptor.executorID.zkTimeout\": 10000,\n    \"java.library.path\": \"/usr/lib/hadoop/lib/native\",\n    \"memory_opts\": {\n      \"executor_direct_memory\": \"9816\",\n      \"executor_memory\": \"9816\",\n      \"inceptor_memory\": \"13104\"\n    },\n    \"ngmr.task.pipeline\": \"false\",\n    \"ngmr.task.pipeline.start.fraction\": 0.5,\n    \"ngmr.task.pipeline.task.timeout.ms\": -1,\n    \"opts\": {\n      \"executor_java_opts\": \"-XX:PermSize=256m -XX:MaxPermSize=2g -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=55 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -verbose:gc \",\n      \"inceptor_java_opts\": \"-XX:PermSize=128m -XX:MaxPermSize=2g -server -XX:+UseParNewGC -XX:NewRatio=4 -XX:+CMSClassUnloadingEnabled -XX:MinHeapFreeRatio=100 -XX:MaxHeapFreeRatio=100 -XX:CMSMaxAbortablePrecleanTime=1000 -XX:+ExplicitGCInvokesConcurrent -XX:MaxTenuringThreshold=4 -XX:TargetSurvivorRatio=8 -XX:+HeapDumpOnOutOfMemoryError -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70 -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps \"\n    },\n    \"shark.checkpoint.dir\": \"\",\n    \"spark.akka.threads\": 8,\n    \"spark.cleaner.ttl\": 14400,\n    \"spark.kryoserializer.buffer.mb\": 4,\n    \"spark.rdd.compress\": \"false\",\n    \"spark.storage.fastdiskFraction\": 0.29999999999999999,\n    \"spark.storage.memoryFraction\": 0.5\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"rubik\": {\n    \"db_name\": \"rubik_rubik1\"\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"stellardb_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
          "inceptor.toml": "[[template]]\nsrc = \"hive-site.xml.tmpl\"\ndest = \"/etc/inceptor/conf/hive-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hive-env.sh.tmpl\"\ndest = \"/etc/inceptor/conf/hive-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"dataSource.properties.tmpl\"\ndest = \"/etc/inceptor/conf/dataSource.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "jaas.conf.tmpl": "KafkaClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  storeKey=true\n  keyTab=\"/etc/keytabs/keytab\"\n  principal=\"kafka/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}\";\n};\n\n// ZooKeeper client authentication\nClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  storeKey=true\n  keyTab=\"/etc/keytabs/keytab\"\n  principal=\"kafka/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}\";\n};",
          "ladder-site.properties.tmpl": "#\n# The Ladder Open Foundation licenses this work under the Apache License, version 2.0\n# (the \"License\"). You may not use this work except in compliance with the License, which is\n# available at www.apache.org/licenses/LICENSE-2.0\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n# either express or implied, as more fully set forth in the License.\n#\n# See the NOTICE file distributed with this work for information regarding copyright ownership.\n#\n\n# Site specific configuration properties for Ladder\n# Details about all configuration properties http://www.ladder.org/documentation/en/Configuration-Settings.html\n\n# Common properties\nladder.master.hostname={{getv \"/ladder_client_config/ladder_confd_config/ladder/ladder_master_hostname_service\" \"localhost\"}}\nladder.underfs.address=/vdir/tmp/ladder/localfs\nladder.master.journal.folder=/var/data/ladder/journal\nladder.master.web.port=19999\n#ladder.security.authentication.type=NOSASL\n#ladder.master.journal.type=NOOP\n#ladder.user.file.copyfromlocal.write.location.policy.class=io.transwarp.ladder.client.file.policy.LocalFirstPolicy\n\n# Security properties\n# ladder.security.authorization.permission.enabled=true\n# ladder.security.authentication.type=SIMPLE\n\n# Worker properties\nladder.worker.memory.size=4GB\nladder.worker.tieredstore.levels=2\nladder.worker.tieredstore.level0.alias=MEM\nladder.worker.tieredstore.level0.dirs.path=/var/data/ladder/laddermemdisk\nladder.worker.tieredstore.level0.watermark.high.ratio=0.9\nladder.worker.tieredstore.level0.watermark.low.ratio=0.7\nladder.worker.tieredstore.level1.alias=HDD\nladder.worker.tieredstore.level1.dirs.path=/var/data/ladder/data\nladder.worker.tieredstore.level1.dirs.quota=100GB\nladder.worker.tieredstore.level1.watermark.high.ratio=0.9\nladder.worker.tieredstore.level1.watermark.low.ratio=0.7\n#ladder.worker.allocator.class=alluxio.worker.block.allocator.MaxFreeAllocator\n#ladder.worker.evictor.class=alluxio.worker.block.evictor.LRUEvictor\nladder.worker.tieredstore.reserver.enabled=true\nladder.worker.web.port=30000\n\n\n# User properties\n# ladder.user.file.readtype.default=CACHE_PROMOTE\n# ladder.user.file.writetype.default=MUST_CACHE\n",
@@ -643,7 +661,7 @@
                "annotations": {
                   "cni.networks": "overlay",
                   "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "18b1bac1d12a02b67337ac2cce1467e3e89c3a75e98da842a55ca4cf94fa607a"
+                  "transwarp/configmap.md5": "ada2a20e2f15aff193b88c0a3a9cfb384b35236c8c2e209e81bec9d9653cb6b2"
                },
                "labels": {
                   "transwarp.alias": "inceptor_ews1100",
@@ -898,6 +916,14 @@
                               "path": "templates/hbase-site.xml.tmpl"
                            },
                            {
+                              "key": "graphconf.xml.toml",
+                              "path": "conf.d/graphconf.xml.toml"
+                           },
+                           {
+                              "key": "graphconf.xml.tmpl",
+                              "path": "templates/graphconf.xml.tmpl"
+                           },
+                           {
                               "key": "dataSource.properties.tmpl",
                               "path": "templates/dataSource.properties.tmpl"
                            },
@@ -939,7 +965,7 @@
       "apiVersion": "v1",
       "data": {
          "entrypoint-cahook.sh": "#!/bin/bash\nset -x\n\nexport PLUGIN_HOME=/usr/lib/catalog-agent/plugins\n\ntar -xf $PLUGIN_HOME/catalog-inceptor-0.12.0+6.0.0.100.tar.gz -C $PLUGIN_HOME\nmkdir /var/catalog-plugin/hook\nmkdir /var/catalog-plugin/import\ncp $PLUGIN_HOME/catalog/inceptor/lib/* /var/catalog-plugin/hook/\ncp $PLUGIN_HOME/catalog/inceptor/import/* /var/catalog-plugin/import/",
-         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\nexport HADOOP_HEAPSIZE=4096\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR} ${LOGDIR}/hive\n/bin/cp /etc/confd/templates/hive-log4j.properties.raw ${INCEPTOR_CONF_DIR}/hive-log4j.properties\n/bin/rm -rf ${INCEPTOR_CONF_DIR}/hive-log4j.properties.server ${INCEPTOR_CONF_DIR}/log4j.properties\n/bin/cp /etc/confd/templates/log4j.properties.raw ${INCEPTOR_CONF_DIR}/log4j.properties\n\nconfd -onetime -backend file -prefix / -file /etc/confd/inceptor-confd.conf\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nmkdir -p /data/slowdisks /data/fastdisks\nchown hive:hive /data/slowdisks /data/fastdisks ${LOGDIR}/hive\nchmod 777 -R /root\nif [ -f $INCEPTOR_CONF_DIR/hive-env.sh ]; then\n   source $INCEPTOR_CONF_DIR/hive-env.sh\nfi\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -s /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n[ -s /etc/msl-site.xml ] && {\n  cp /etc/msl-site.xml $INCEPTOR_CONF_DIR\n  mkdir -p /etc/transwarp/conf/ && rm -f /etc/transwarp/conf/msl-site.xml\n  cp /etc/msl-site.xml /etc/transwarp/conf/\n}\n\nexport AGENT=\"-agentpath:/usr/lib/inceptor/bin/libagent.so\"\n\nstart_inceptor() {\n  export MASTER=\"docker\"\n  export SPARK_LIBRARY_PATH=/usr/lib/hadoop/lib/native\n  export SPARK_YARN_APP_JAR=/usr/lib/inceptor/inceptor_2.10-1.1.0-transwarp.jar\n  export SPARK_JAR=/usr/lib/inceptor/lib/spark-core_2.10-1.1.0-transwarp.jar\n  export INCEPTOR_LICENSE_ZOOKEEPER_QUORUM=172.16.1.41:2181\n  export SCALA_HOME=/usr/lib/inceptor/lib\n  export JAVA=java\n\n  if [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\n  fi\n\n  CLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/{inceptor,hadoop,hadoop-hdfs,hadoop-mapreduce,hadoop-yarn} -name \"*.jar\"`\n  do\n     CLASSPATH=\"$CLASSPATH:$jar\"\n  done\n  set -x\n\n  if [ x\"$CATALOG_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/catalog-plugin/hook/*\n    JAVA_OPTS=\"$JAVA_OPTS -Djava.security.auth.login.config=$INCEPTOR_CONF_DIR/kafka_client_jaas.conf\"\n  fi\n\n  wait_metastore\n  sudo -u hive java $AGENT $INCEPTOR_JAVA_OPTS $JAVA_OPTS $DBA_SERVICE_OPTS -cp $CLASSPATH io.transwarp.inceptor.InceptorServer2\n}\n\nstart_executor() {\n  CLASSPATH=\"/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf\"\n  set +x\n  for jar in `find /usr/lib/inceptor -name \"*.jar\"`; do\n    CLASSPATH=$CLASSPATH:$jar\n  done\n  set -x\n\n  wait_inceptor\n  sudo -u hive java $AGENT $EXECUTOR_JAVA_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n    org.apache.spark.executor.CoarseGrainedExecutorBackend \\\n    $MASTER_URI \\\n    0 \\\n    $HOSTNAME \\\n    ${SPARK_CORES}\n}\n\nstart_histroy_server() {\n  echo \"ToDo...\"\n}\n\nstart_catalog_agent() {\n  set -ex\n  echo \"options use-vc\" >>/etc/resolv.conf\n\n  export CATALOG_AGENT_CONF_DIR=/etc/catalog-agent/conf\n  export CATALOG_AGENT_HOME=/usr/lib/catalog-agent\n  export CATALOG_AGENT_COMPONENT=hive\n  export CATALOG_AGENT_VERSION=inceptor-0.12.0\n  export LOG_DIR=${LOG_DIR:-/var/log/catalog-agent}\n  \n  CATALOG_AGENT_MEM=${CATALOG_AGENT_MEM%.*}\n  if [[ \"${CATALOG_AGENT_MEM}\" == \"\" ]]; then\n    echo \"CATALOG_WEB_MEM is not configured, use default configure\"\n  elif (( \"$CATALOG_AGENT_MEM\" < \"1024\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  elif  (( \"$CATALOG_AGENT_MEM\" > \"2048\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms2048m -Xmx2048m -Xmn1024m -server -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  else\n    HEAP_MEM=`expr ${CATALOG_AGENT_MEM} - 64 - 256`\n    CATALOG_AGENT_HEAP=\"-Xms${HEAP_MEM}m -Xmx${HEAP_MEM}m -XX:PermSize=64m -XX:MaxPermSize=256m -Xmn512m -server -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  fi\n  \n  export CATALOG_AGENT_HEAP\n  export IPV4=\"-Djava.net.preferIPv4Stack=true\"\n  \n  CLASSPATH=${CATALOG_AGENT_CONF_DIR}\n  JAR=${CATALOG_AGENT_HOME}/${CATALOG_AGENT_COMPONENT}/${CATALOG_AGENT_VERSION}/${CATALOG_AGENT_VERSION}-${CATALOG_VERSION}.jar\n  \n  export CATALOG_AGENT_HEAP=${CATALOG_AGENT_HEAP:-\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"}\n  \n  if [[ \"${KRB_ENABLE}\" == \"true\" ]]; then\n      SECURITY=\"-Djava.security.krb5.conf=/etc/krb5.conf\"\n  fi\n  \n  if [[ \"${DEBUG_ENABLE}\" == \"true\" ]]; then\n    export DEBUG=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$CATALOG_AGENT_DEBUG_PORT\"\n  fi\n\n  JAVA_OPTS=\"$CATALOG_AGENT_HEAP $SECURITY $IPV4 -Dloader.path=$CATALOG_AGENT_CONF_DIR -Dsun.net.inetaddr.ttl=30 $DEBUG\"\n  \n  ${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${CLASSPATH} -jar ${JAR}\n}\n\ncase $1 in\n   inceptor )\n     start_inceptor\n   ;;\n   executor )\n     start_executor\n   ;;\n   history-server )\n     start_histroy_server\n   ;;\n   catalog-agent )\n     start_catalog_agent\n   ;;\n   * )\n     echo \"ROLE: inceptor | executor | history-server, Wrong args. exit\"\n     exit 1\n   ;;\nesac\n"
+         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport STELLARDB_CONF_DIR=/etc/stellardb/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\nexport HADOOP_HEAPSIZE=4096\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR} ${LOGDIR}/hive\nmkdir -p ${STELLARDB_CONF_DIR}\n\n/bin/cp /etc/confd/templates/hive-log4j.properties.raw ${INCEPTOR_CONF_DIR}/hive-log4j.properties\n/bin/rm -rf ${INCEPTOR_CONF_DIR}/hive-log4j.properties.server ${INCEPTOR_CONF_DIR}/log4j.properties\n/bin/cp /etc/confd/templates/log4j.properties.raw ${INCEPTOR_CONF_DIR}/log4j.properties\n\nconfd -onetime -backend file -prefix / -file /etc/confd/inceptor-confd.conf\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nmkdir -p /data/slowdisks /data/fastdisks\nchown hive:hive /data/slowdisks /data/fastdisks ${LOGDIR}/hive\nchmod 777 -R /root\nif [ -f $INCEPTOR_CONF_DIR/hive-env.sh ]; then\n   source $INCEPTOR_CONF_DIR/hive-env.sh\nfi\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -s /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n[ -s /etc/msl-site.xml ] && {\n  cp /etc/msl-site.xml $INCEPTOR_CONF_DIR\n  mkdir -p /etc/transwarp/conf/ && rm -f /etc/transwarp/conf/msl-site.xml\n  cp /etc/msl-site.xml /etc/transwarp/conf/\n}\n\nexport AGENT=\"-agentpath:/usr/lib/inceptor/bin/libagent.so\"\n\nstart_inceptor() {\n  export MASTER=\"docker\"\n  export SPARK_LIBRARY_PATH=/usr/lib/hadoop/lib/native\n  export SPARK_YARN_APP_JAR=/usr/lib/inceptor/inceptor_2.10-1.1.0-transwarp.jar\n  export SPARK_JAR=/usr/lib/inceptor/lib/spark-core_2.10-1.1.0-transwarp.jar\n  export INCEPTOR_LICENSE_ZOOKEEPER_QUORUM=172.16.1.41:2181\n  export SCALA_HOME=/usr/lib/inceptor/lib\n  export JAVA=java\n\n  if [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\n  fi\n\n  CLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR:$STELLARDB_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/{inceptor,hadoop,hadoop-hdfs,hadoop-mapreduce,hadoop-yarn} -name \"*.jar\"`\n  do\n     CLASSPATH=\"$CLASSPATH:$jar\"\n  done\n  set -x\n\n  if [ x\"$CATALOG_PLUGIN_ENABLE\" = x\"true\" ]; then\n    CLASSPATH=$CLASSPATH:/usr/lib/catalog-plugin/hook/*\n    JAVA_OPTS=\"$JAVA_OPTS -Djava.security.auth.login.config=$INCEPTOR_CONF_DIR/kafka_client_jaas.conf\"\n  fi\n\n  INCEPTOR_JAVA_OPTS=\"$INCEPTOR_JAVA_OPTS -Dtranswarp.query.cypher.enabled=true\"\n\n  wait_metastore\n  sudo -u hive java $AGENT $INCEPTOR_JAVA_OPTS $JAVA_OPTS $DBA_SERVICE_OPTS -cp $CLASSPATH io.transwarp.inceptor.InceptorServer2\n}\n\nstart_executor() {\n  CLASSPATH=\"/etc/inceptor/conf:/etc/hadoop/conf:/etc/hyperbase/conf:$STELLARDB_CONF_DIR\"\n  set +x\n  for jar in `find /usr/lib/inceptor -name \"*.jar\"`; do\n    CLASSPATH=$CLASSPATH:$jar\n  done\n  set -x\n\n  wait_inceptor\n  sudo -u hive java $AGENT $EXECUTOR_JAVA_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n    org.apache.spark.executor.CoarseGrainedExecutorBackend \\\n    $MASTER_URI \\\n    0 \\\n    $HOSTNAME \\\n    ${SPARK_CORES}\n}\n\nstart_histroy_server() {\n  echo \"ToDo...\"\n}\n\nstart_catalog_agent() {\n  set -ex\n  echo \"options use-vc\" >>/etc/resolv.conf\n\n  export CATALOG_AGENT_CONF_DIR=/etc/catalog-agent/conf\n  export CATALOG_AGENT_HOME=/usr/lib/catalog-agent\n  export CATALOG_AGENT_COMPONENT=hive\n  export CATALOG_AGENT_VERSION=inceptor-0.12.0\n  export LOG_DIR=${LOG_DIR:-/var/log/catalog-agent}\n  \n  CATALOG_AGENT_MEM=${CATALOG_AGENT_MEM%.*}\n  if [[ \"${CATALOG_AGENT_MEM}\" == \"\" ]]; then\n    echo \"CATALOG_WEB_MEM is not configured, use default configure\"\n  elif (( \"$CATALOG_AGENT_MEM\" < \"1024\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  elif  (( \"$CATALOG_AGENT_MEM\" > \"2048\" )); then\n    CATALOG_AGENT_HEAP=\"-Xms2048m -Xmx2048m -Xmn1024m -server -XX:PermSize=128m -XX:MaxPermSize=512m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  else\n    HEAP_MEM=`expr ${CATALOG_AGENT_MEM} - 64 - 256`\n    CATALOG_AGENT_HEAP=\"-Xms${HEAP_MEM}m -Xmx${HEAP_MEM}m -XX:PermSize=64m -XX:MaxPermSize=256m -Xmn512m -server -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"\n  fi\n  \n  export CATALOG_AGENT_HEAP\n  export IPV4=\"-Djava.net.preferIPv4Stack=true\"\n  \n  CLASSPATH=${CATALOG_AGENT_CONF_DIR}\n  JAR=${CATALOG_AGENT_HOME}/${CATALOG_AGENT_COMPONENT}/${CATALOG_AGENT_VERSION}/${CATALOG_AGENT_VERSION}-${CATALOG_VERSION}.jar\n  \n  export CATALOG_AGENT_HEAP=${CATALOG_AGENT_HEAP:-\"-Xms1024m -Xmx1024m -Xmn512m -server -XX:PermSize=64m -XX:MaxPermSize=256m -XX:+UseParNewGC -XX:SurvivorRatio=8 -XX:ParallelGCThreads=4 -XX:+UseConcMarkSweepGC -XX:ParallelCMSThreads=4 -XX:LargePageSizeInBytes=64M -XX:+CMSParallelRemarkEnabled -XX:+UseFastAccessorMethods -XX:SoftRefLRUPolicyMSPerMB=0 -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:CMSFullGCsBeforeCompaction=5 -XX:+UseCMSCompactAtFullCollection -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=75 -Duser.timezone='Asia/Beijing'\"}\n  \n  if [[ \"${KRB_ENABLE}\" == \"true\" ]]; then\n      SECURITY=\"-Djava.security.krb5.conf=/etc/krb5.conf\"\n  fi\n  \n  if [[ \"${DEBUG_ENABLE}\" == \"true\" ]]; then\n    export DEBUG=\"-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$CATALOG_AGENT_DEBUG_PORT\"\n  fi\n\n  JAVA_OPTS=\"$CATALOG_AGENT_HEAP $SECURITY $IPV4 -Dloader.path=$CATALOG_AGENT_CONF_DIR -Dsun.net.inetaddr.ttl=30 $DEBUG\"\n  \n  ${JAVA_HOME}/bin/java ${JAVA_OPTS} -cp ${CLASSPATH} -jar ${JAR}\n}\n\ncase $1 in\n   inceptor )\n     start_inceptor\n   ;;\n   executor )\n     start_executor\n   ;;\n   history-server )\n     start_histroy_server\n   ;;\n   catalog-agent )\n     start_catalog_agent\n   ;;\n   * )\n     echo \"ROLE: inceptor | executor | history-server, Wrong args. exit\"\n     exit 1\n   ;;\nesac\n"
       },
       "kind": "ConfigMap",
       "metadata": {
Index: transwarp-commonlib/6.2/files/graphconf.xml.toml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- transwarp-commonlib/6.2/files/graphconf.xml.toml	(date 1571384522000)
+++ transwarp-commonlib/6.2/files/graphconf.xml.toml	(date 1571384522000)
@@ -0,0 +1,6 @@
+[[template]]
+src = "graphconf.xml.tmpl"
+dest = "/etc/stellardb/conf/graphconf.xml"
+check_cmd = "/bin/true"
+reload_cmd = "/bin/true"
+keys = [ "/" ]
\ No newline at end of file
Index: inceptor/6.2/template-json/config.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- inceptor/6.2/template-json/config.jsonnet	(date 1571652042000)
+++ inceptor/6.2/template-json/config.jsonnet	(date 1571727620000)
@@ -266,4 +266,5 @@
   SHIVA_CLIENT_CONFIG: {},
   YARN_CLIENT_CONFIG: {},
   DBA_SERVICE_CONFIG: {},
+  STELLARDB_CLIENT_CONFIG: {},
 }
Index: stellardb/6.2/template-json/config.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- stellardb/6.2/template-json/config.jsonnet	(date 1571652042000)
+++ stellardb/6.2/template-json/config.jsonnet	(date 1571727620000)
@@ -101,6 +101,13 @@
   Advance_Config: {
     graph_conf: {
       'graph.zk.base_path': '/graph',
+      serrendipity_tesseract: 'false',
+      'graph.file.server.port': 43999,
+      'graph.raft.server.port': 1998,
+      'graph.worker.ui.port': 50089,
+      'graph.master.port': 30909,
+      'graph.master.ui.port': 50088,
+      'graph.worker.port': 30815,
     },

   },
Index: stellardb/6.2/template-json/files/graphconf.xml.tmpl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- stellardb/6.2/template-json/files/graphconf.xml.tmpl	(date 1571652042000)
+++ stellardb/6.2/template-json/files/graphconf.xml.tmpl	(date 1571727620000)
@@ -19,41 +19,6 @@
     <value>{{join $ZK_QUORUM (printf ":%s," (getv "/zookeeper_client_config/zookeeper_port" "2181"))}}:{{(getv "/zookeeper_client_config/zookeeper_port" "2181")}}</value>
   </property>

-  <property>
-    <name>graph.master.port</name>
-    <value>30909</value>
-  </property>
-
-  <property>
-    <name>graph.master.ui.port</name>
-    <value>50088</value>
-  </property>
-
-  <property>
-    <name>graph.worker.port</name>
-    <value>30815</value>
-  </property>
-
-  <property>
-    <name>graph.worker.ui.port</name>
-    <value>50089</value>
-  </property>
-
-  <property>
-    <name>graph.raft.server.port</name>
-    <value>1998</value>
-  </property>
-
-  <property>
-    <name>graph.file.server.port</name>
-    <value>43999</value>
-  </property>
-
-  <property>
-    <name>serrendipity_tesseract</name>
-    <value>false</value>
-  </property>
-
   {{- range gets "/graph_conf/*" }}
   <property>
     <name>{{base .Key}}</name>
Index: stellardb/6.2/template-json/stellardb-main.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- stellardb/6.2/template-json/stellardb-main.jsonnet	(date 1571652042000)
+++ stellardb/6.2/template-json/stellardb-main.jsonnet	(date 1571727620000)
@@ -71,8 +71,11 @@
       stellardb.master.ingress('stellardb-master', overall_config),

     'dummy-svc.json': kube.v1.DummyService(providesInfo={
-      stellardb_CLIENT_CONFIG: {
-        immediate_value: {},
+      STELLARDB_CLIENT_CONFIG: {
+        immediate_value: {
+          graph_conf: confd_config.graph_conf,
+          zookeeper_client_config: confd_config.zookeeper_client_config,
+        },
       },
     }, config=overall_config),
   }
Index: stellardb/6.2/template-json/stellardb.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- stellardb/6.2/template-json/stellardb.jsonnet	(date 1571652042000)
+++ stellardb/6.2/template-json/stellardb.jsonnet	(date 1571727620000)
@@ -101,7 +101,7 @@
                     image: config.App.master.image,
                     readinessProbe: {
                       httpGet: {
-                        port: 50088,
+                        port: config.Advance_Config.graph_conf['graph.master.ui.port'],
                         path: '/index.html',
                       },
                     },
@@ -110,8 +110,8 @@
                     env: env + app.rc_env(config.App.master.env_list, []),
                     resources: kube.v1.ContainerResourcesV2(config.App.master.resources),
                     [if config.App.master.use_host_network then 'ports']: [{
-                      hostPort: 50088,
-                      containerPort: 50088,
+                      hostPort: config.Advance_Config.graph_conf['graph.master.ui.port'],
+                      containerPort: config.Advance_Config.graph_conf['graph.master.ui.port'],
                     }],
                     volumeMounts: [
                       { mountPath: '/var/log/stellardb', name: 'log' },
@@ -139,21 +139,21 @@
           ports: [
             {
               name: 'stellardb-master-ui',
-              port: 50088,
+              port: config.Advance_Config.graph_conf['graph.master.ui.port'],
               protocol: 'TCP',
-              targetPort: 50088,
+              targetPort: config.Advance_Config.graph_conf['graph.master.ui.port'],
             },
             {
               name: 'stellardb-master',
-              port: 30909,
+              port: config.Advance_Config.graph_conf['graph.master.port'],
               protocol: 'TCP',
-              targetPort: 30909,
+              targetPort: config.Advance_Config.graph_conf['graph.master.port'],
             },
             {
               name: 'stellardb-raft',
-              port: 1998,
+              port: config.Advance_Config.graph_conf['graph.raft.server.port'],
               protocol: 'TCP',
-              targetPort: 1998,
+              targetPort: config.Advance_Config.graph_conf['graph.raft.server.port'],
             },
           ],
         },
@@ -165,9 +165,9 @@
           ports: [
             {
               name: 'stellardb-master-ui',
-              port: 50088,
+              port: config.Advance_Config.graph_conf['graph.master.ui.port'],
               protocol: 'TCP',
-              targetPort: 50088,
+              targetPort: config.Advance_Config.graph_conf['graph.master.ui.port'],
             },
           ],
         },
@@ -190,8 +190,8 @@
             'nginx.ingress.kubernetes.io/proxy-cookie-path': '/ ' + config.Transwarp_Config.Ingress.path + '/',

             'nginx.ingress.kubernetes.io/redirect-by-service-domain': 'true',
-            'nginx.ingress.kubernetes.io/upstream-vhost': _name + '-hl-' + config.Transwarp_Install_ID + '.' + config.Transwarp_Install_Namespace + '.svc:50088',
-            'nginx.ingress.kubernetes.io/upstream-forwarded-host': _name + '-hl-' + config.Transwarp_Install_ID + '.' + config.Transwarp_Install_Namespace + '.svc:50088',
+            'nginx.ingress.kubernetes.io/upstream-vhost': _name + '-hl-' + config.Transwarp_Install_ID + '.' + config.Transwarp_Install_Namespace + '.svc:' + config.Advance_Config.graph_conf['graph.master.ui.port'],
+            'nginx.ingress.kubernetes.io/upstream-forwarded-host': _name + '-hl-' + config.Transwarp_Install_ID + '.' + config.Transwarp_Install_Namespace + '.svc:' + config.Advance_Config.graph_conf['graph.master.ui.port'],
           },
         },
         spec+: {
@@ -201,7 +201,7 @@
                 path: config.Transwarp_Config.Ingress.path,
                 backend: {
                   serviceName: _name + '-hl-' + config.Transwarp_Install_ID,
-                  servicePort: 50088,
+                  servicePort: config.Advance_Config.graph_conf['graph.master.ui.port'],
                 },
               }],
             },
@@ -234,7 +234,7 @@
                     image: config.App.worker.image,
                     readinessProbe: {
                       httpGet: {
-                        port: 50089,
+                        port: config.Advance_Config.graph_conf['graph.worker.ui.port'],
                         path: '/index.html',
                       },
                       initialDelaySeconds: 60,
@@ -243,8 +243,8 @@
                     env: env + app.rc_env(config.App.worker.env_list, []),
                     resources: kube.v1.ContainerResourcesV2(config.App.worker.resources),
                     [if config.App.worker.use_host_network then 'ports']: [{
-                      hostPort: 50089,
-                      containerPort: 50089,
+                      hostPort: config.Advance_Config.graph_conf['graph.worker.ui.port'],
+                      containerPort: config.Advance_Config.graph_conf['graph.worker.ui.port'],
                     }],
                     volumeMounts: [
                       { mountPath: '/var/log/stellardb', name: 'log' },
@@ -279,21 +279,27 @@
           ports: [
             {
               name: 'stellardb-worker',
-              port: 30815,
+              port: config.Advance_Config.graph_conf['graph.worker.port'],
               protocol: 'TCP',
-              targetPort: 30815,
+              targetPort: config.Advance_Config.graph_conf['graph.worker.port'],
             },
             {
               name: 'stellardb-worker-ui',
-              port: 50089,
+              port: config.Advance_Config.graph_conf['graph.worker.ui.port'],
               protocol: 'TCP',
-              targetPort: 50089,
+              targetPort: config.Advance_Config.graph_conf['graph.worker.ui.port'],
             },
             {
               name: 'stellardb-raft',
-              port: 1998,
+              port: config.Advance_Config.graph_conf['graph.raft.server.port'],
+              protocol: 'TCP',
+              targetPort: config.Advance_Config.graph_conf['graph.raft.server.port'],
+            },
+            {
+              name: 'stellardb-fileserver',
+              port: config.Advance_Config.graph_conf['graph.file.server.port'],
               protocol: 'TCP',
-              targetPort: 1998,
+              targetPort: config.Advance_Config.graph_conf['graph.file.server.port'],
             },
           ],
         },
@@ -305,9 +311,15 @@
           ports: [
             {
               name: 'stellardb-worker-ui',
-              port: 50089,
+              port: config.Advance_Config.graph_conf['graph.worker.ui.port'],
               protocol: 'TCP',
-              targetPort: 50089,
+              targetPort: config.Advance_Config.graph_conf['graph.worker.ui.port'],
+            },
+            {
+              name: 'stellardb-fileserver',
+              port: config.Advance_Config.graph_conf['graph.file.server.port'],
+              protocol: 'TCP',
+              targetPort: config.Advance_Config.graph_conf['graph.file.server.port'],
             },
           ],
         },
Index: stellardb/6.2/template-json/test-files/config0.jsonnet.golden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- stellardb/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571652042000)
+++ stellardb/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571727620000)
@@ -4,7 +4,7 @@
       "kind": "Service",
       "metadata": {
          "annotations": {
-            "transwarp.meta": "{\"provides\": {\"stellardb_CLIENT_CONFIG\": {\"immediate_value\": { }}}}"
+            "transwarp.meta": "{\"provides\": {\"STELLARDB_CLIENT_CONFIG\": {\"immediate_value\": {\"graph_conf\": {\"graph.file.server.port\": 43999, \"graph.master.port\": 30909, \"graph.master.ui.port\": 50088, \"graph.raft.server.port\": 1998, \"graph.worker.port\": 30815, \"graph.worker.ui.port\": 50089, \"graph.zk.base_path\": \"/graph\", \"serrendipity_tesseract\": \"false\"}, \"zookeeper_client_config\": { }}}}}"
          },
          "labels": {
             "scope": "tdh",
@@ -33,7 +33,7 @@
    "stellardb-confd-conf-configmap.json": {
       "apiVersion": "v1",
       "data": {
-         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>graph.data.dirs</name>\n    <value>/var/data/stellardb/graph</value>\n  </property>\n\n  <property>\n    <name>graph.raft.dirs</name>\n    <value>/var/data/stellardb/raft</value>\n  </property>\n\n  <property>\n    <name>graph.zk.quorum</name>\n    {{- $ZK_QUORUM := split (getv \"/zookeeper_client_config/zookeeper_addresses\" \"\") \",\" }}\n    <value>{{join $ZK_QUORUM (printf \":%s,\" (getv \"/zookeeper_client_config/zookeeper_port\" \"2181\"))}}:{{(getv \"/zookeeper_client_config/zookeeper_port\" \"2181\")}}</value>\n  </property>\n\n  <property>\n    <name>graph.master.port</name>\n    <value>30909</value>\n  </property>\n\n  <property>\n    <name>graph.master.ui.port</name>\n    <value>50088</value>\n  </property>\n\n  <property>\n    <name>graph.worker.port</name>\n    <value>30815</value>\n  </property>\n\n  <property>\n    <name>graph.worker.ui.port</name>\n    <value>50089</value>\n  </property>\n\n  <property>\n    <name>graph.raft.server.port</name>\n    <value>1998</value>\n  </property>\n\n  <property>\n    <name>graph.file.server.port</name>\n    <value>43999</value>\n  </property>\n\n  <property>\n    <name>serrendipity_tesseract</name>\n    <value>false</value>\n  </property>\n\n  {{- range gets \"/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n</configuration>\n",
+         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>graph.data.dirs</name>\n    <value>/var/data/stellardb/graph</value>\n  </property>\n\n  <property>\n    <name>graph.raft.dirs</name>\n    <value>/var/data/stellardb/raft</value>\n  </property>\n\n  <property>\n    <name>graph.zk.quorum</name>\n    {{- $ZK_QUORUM := split (getv \"/zookeeper_client_config/zookeeper_addresses\" \"\") \",\" }}\n    <value>{{join $ZK_QUORUM (printf \":%s,\" (getv \"/zookeeper_client_config/zookeeper_port\" \"2181\"))}}:{{(getv \"/zookeeper_client_config/zookeeper_port\" \"2181\")}}</value>\n  </property>\n\n  {{- range gets \"/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n</configuration>\n",
          "graphconf.xml.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.toml": "[[template]]\nsrc = \"guardian-site.xml.tmpl\"\ndest = \"/etc/guardian-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.xml.tmpl": "{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n{{- range gets \"/security/guardian_client_config/guardian_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n    <property>\n        <name>guardian.server.cas.authentication.enabled</name>\n        <value>true</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.url.prefix</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.login.url</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}/login</value>\n    </property>\n{{- end }}\n\n</configuration>\n{{- end -}}\n",
@@ -41,7 +41,7 @@
          "log4j.properties.raw": "stellardb.log.level=INFO\n\nlog4j.rootLogger=${stellardb.log.level},RFA\nlog4j.logger.org.apache.zookeeper = ERROR,RFA\nlog4j.logger.org.apache.curator = ERROR,RFA\nlog4j.logger.raft = ${stellardb.log.level},RaftAppender\nlog4j.additivity.raft=false\nlog4j.logger.io.transwarp.graphsearch.storage.compaction=${stellardb.log.level},CompactionAppender\nlog4j.additivity.io.transwarp.graphsearch.storage.compaction=false\n\nlog4j.appender.RFA=org.apache.log4j.RollingFileAppender\nlog4j.appender.RFA.File=${stellardb.log.dir}/${stellardb.log.file}\nlog4j.appender.RFA.MaxFileSize=10MB\nlog4j.appender.RFA.MaxBackupIndex=50\nlog4j.appender.RFA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RFA.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %t %c: %m%n\n\nlog4j.appender.RaftAppender=org.apache.log4j.RollingFileAppender\nlog4j.appender.RaftAppender.File=${stellardb.log.dir}/raft.log\nlog4j.appender.RaftAppender.MaxFileSize=10MB\nlog4j.appender.RaftAppender.MaxBackupIndex=50\nlog4j.appender.RaftAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.RaftAppender.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %t %c: %m%n\n\nlog4j.appender.CompactionAppender=org.apache.log4j.RollingFileAppender\nlog4j.appender.CompactionAppender.File=${stellardb.log.dir}/compaction.log\nlog4j.appender.CompactionAppender.MaxFileSize=10MB\nlog4j.appender.CompactionAppender.MaxBackupIndex=50\nlog4j.appender.CompactionAppender.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CompactionAppender.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %t %c: %m%n\n",
          "msl-site.toml": "[[template]]\nsrc = \"msl-site.xml.tmpl\"\ndest = \"/etc/msl-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "msl-site.xml.tmpl": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <property>\n    <name>transwarp.tls.enable</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>tls.server.url</name>\n    <value>{{ getenv \"MSL_TLS_SERVER_URL\" \"https://172.16.1.41:60907/licence\" }}</value>\n  </property>\n  <property>\n    <name>tls.ca.filepath</name>\n    <value>/srv/licence/ca.crt</value>\n  </property>\n  <property>\n    <name>tls.cert.filepath</name>\n    <value>/srv/licence/license.cert</value>\n  </property>\n  <property>\n    <name>tls.key.filepath</name>\n    <value>/srv/licence/license.key</value>\n  </property>\n  <property>\n    <name>tls.public.filepath</name>\n    <value>/srv/licence/license-pub.der</value>\n  </property>\n  <property>\n    <name>tls.init.interval</name>\n    <value>10000</value>\n  </property>\n  <property>\n    <name>tls.check.interval</name>\n    <value>60000</value>\n  </property>\n  <property>\n    <name>tls.init.retry.max.times</name>\n    <value>3</value>\n  </property>\n</configuration>",
-         "stellardb-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"graph_conf\": {\n    \"graph.zk.base_path\": \"/graph\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\",\n        \"guardian.permission.component\": \"stellardb-1100-u5003\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
+         "stellardb-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"graph_conf\": {\n    \"graph.file.server.port\": 43999,\n    \"graph.master.port\": 30909,\n    \"graph.master.ui.port\": 50088,\n    \"graph.raft.server.port\": 1998,\n    \"graph.worker.port\": 30815,\n    \"graph.worker.ui.port\": 50089,\n    \"graph.zk.base_path\": \"/graph\",\n    \"serrendipity_tesseract\": \"false\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\",\n        \"guardian.permission.component\": \"stellardb-1100-u5003\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
          "stellardb.toml": "[[template]]\nsrc = \"jaas.conf.tmpl\"\ndest = \"/etc/stellardb/conf/jaas.conf\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"log4j.properties.raw\"\ndest = \"/etc/stellardb/conf/log4j.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n",
          "tdh-env.sh.tmpl": "#!/bin/bash\nset -x\n\nsetup_keytab() {\n  echo \"setup_keytab\"\n{{ if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  # link_keytab\n  export KRB_MOUNTED_CONF_PATH=${KRB_MOUNTED_CONF_PATH:-/var/run/secrets/transwarp.io/tosvolume/keytab/krb5.conf}\n  export KRB_MOUNTED_KEYTAB=${KRB_MOUNTED_KEYTAB:-/var/run/secrets/transwarp.io/tosvolume/keytab/keytab}\n  if [ ! -f $KRB_MOUNTED_CONF_PATH ]; then\n    echo \"Expect krb5.conf at $KRB_MOUNTED_CONF_PATH but not found!\"\n    exit 1\n  fi\n  if [ ! -f $KRB_MOUNTED_KEYTAB ]; then\n    echo \"Expect keytab file at $KRB_MOUNTED_KEYTAB but not found!\"\n    exit 1\n  fi\n  ln -svf $KRB_MOUNTED_CONF_PATH /etc/krb5.conf\n  [ -d /etc/keytabs ] || mkdir -p /etc/keytabs\n  ln -svf $KRB_MOUNTED_KEYTAB /etc/keytabs/keytab\n{{ end }}\n}\n",
          "tdh-env.toml": "[[template]]\nsrc = \"tdh-env.sh.tmpl\"\ndest = \"/etc/tdh-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]"
@@ -101,7 +101,7 @@
                "annotations": {
                   "cni.networks": "overlay",
                   "transwarp.app": "stellardb",
-                  "transwarp/configmap.md5": "9a56b7980e84c47095d05d53b621f1cc3d75bd4638bfb5e2df2a6ead3799ff4f"
+                  "transwarp/configmap.md5": "36a72ffdbf71cb941c61ffc82bc01613fa53f35147bcec8130c506d1c5f77f93"
                },
                "labels": {
                   "transwarp.alias": "stellardb_ews1100",
@@ -376,6 +376,12 @@
                "port": 1998,
                "protocol": "TCP",
                "targetPort": 1998
+            },
+            {
+               "name": "stellardb-fileserver",
+               "port": 43999,
+               "protocol": "TCP",
+               "targetPort": 43999
             }
          ],
          "selector": {
@@ -412,7 +418,7 @@
                   "cni.networks": "overlay",
                   "pod.alpha.kubernetes.io/initialized": "true",
                   "transwarp.app": "stellardb",
-                  "transwarp/configmap.md5": "9a56b7980e84c47095d05d53b621f1cc3d75bd4638bfb5e2df2a6ead3799ff4f"
+                  "transwarp/configmap.md5": "36a72ffdbf71cb941c61ffc82bc01613fa53f35147bcec8130c506d1c5f77f93"
                },
                "labels": {
                   "transwarp.alias": "stellardb_ews1100",
@@ -632,6 +638,12 @@
                "port": 50089,
                "protocol": "TCP",
                "targetPort": 50089
+            },
+            {
+               "name": "stellardb-fileserver",
+               "port": 43999,
+               "protocol": "TCP",
+               "targetPort": 43999
             }
          ],
          "selector": {
Index: hyperbase/6.2/template-json/test-files/config1.jsonnet.golden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hyperbase/6.2/template-json/test-files/config1.jsonnet.golden	(date 1571728600000)
+++ hyperbase/6.2/template-json/test-files/config1.jsonnet.golden	(date 1571727620000)
@@ -4,7 +4,7 @@
       "kind": "Service",
       "metadata": {
          "annotations": {
-            "transwarp.meta": "{\"provides\": {\"HYPERBASE_CLIENT_CONFIG\": {\"immediate_value\": {\"auth_type\": \"none\", \"hbase_site\": {\"dfs.support.append\": \"true\", \"hbase.abort.disconected.batchmutate\": \"true\", \"hbase.assignment.timeout.management\": \"true\", \"hbase.balancer.period\": \"300000\", \"hbase.client.meta.operation.timeout\": \"60000\", \"hbase.client.operation.timeout\": \"60000\", \"hbase.client.scanner.caching\": \"200\", \"hbase.client.scanner.timeout.period\": \"600000\", \"hbase.client.write.buffer\": \"4194304\", \"hbase.cluster.distributed\": \"true\", \"hbase.hregion.majorcompaction\": \"604800000\", \"hbase.hregion.majorcompaction.cron\": \"0 0 1 * * ?\", \"hbase.hregion.max.filesize\": \"3758096384\", \"hbase.hregion.memstore.block.multiplier\": \"4\", \"hbase.hregion.memstore.chunkpool.maxsize\": \"0.3\", \"hbase.hregion.memstore.flush.size\": \"67108864\", \"hbase.hregion.memstore.mslab.enabled\": \"true\", \"hbase.hregion.preclose.flush.size\": \"1310720\", \"hbase.hstore.blockingStoreFiles\": \"30\", \"hbase.hstore.blockingWaitTime\": \"5000\", \"hbase.hstore.compaction.kv.max\": \"100\", \"hbase.hstore.compaction.max\": \"25\", \"hbase.hstore.compaction.max.size\": \"2147483648\", \"hbase.hstore.compaction.min\": \"50\", \"hbase.hstore.compaction.ratio\": \"1.2\", \"hbase.hstore.defaultengine.compactionpolicy.class\": \"org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy\", \"hbase.hstore.flusher.count\": \"20\", \"hbase.lightweight.snapshotmanager.enable\": \"true\", \"hbase.master.assignment.timeoutmonitor.period\": \"600000\", \"hbase.master.balancer.regionLocationCacheTime\": \"300\", \"hbase.master.balancer.stochastic.maxRunningTime\": \"300000\", \"hbase.master.distributed.log.replay\": \"true\", \"hbase.master.executor.closeregion.threads\": \"40\", \"hbase.master.executor.openregion.threads\": \"40\", \"hbase.master.info.bindAddress\": \"0.0.0.0\", \"hbase.master.info.port\": \"60010\", \"hbase.master.ipc.address\": \"0.0.0.0\", \"hbase.master.port\": \"60000\", \"hbase.master.preload.tabledescriptors\": \"true\", \"hbase.master.report.ip\": \"false\", \"hbase.master.wait.on.regionservers.mintostart\": \"1\", \"hbase.partition.ignore.unavailable.clusters\": \"false\", \"hbase.regions.slop\": \"0\", \"hbase.regionserver.executor.closeregion.threads\": \"40\", \"hbase.regionserver.executor.openregion.threads\": \"40\", \"hbase.regionserver.fileSplitTimeout\": \"300000\", \"hbase.regionserver.global.memstore.size\": \"0.5\", \"hbase.regionserver.global.memstore.size.lower.limit\": \"0.95\", \"hbase.regionserver.handler.count\": \"100\", \"hbase.regionserver.hlog.blocksize\": \"268435456\", \"hbase.regionserver.info.bindAddress\": \"0.0.0.0\", \"hbase.regionserver.info.port\": \"60030\", \"hbase.regionserver.ipc.address\": \"0.0.0.0\", \"hbase.regionserver.lease.period\": \"600000\", \"hbase.regionserver.maxlogs\": \"100\", \"hbase.regionserver.metahandler.count\": \"200\", \"hbase.regionserver.port\": \"60020\", \"hbase.regionserver.replication.handler.count\": \"10\", \"hbase.regionserver.report.ip\": \"false\", \"hbase.regionserver.storefile.refresh.period\": \"0\", \"hbase.regionserver.thread.compaction.large\": \"8\", \"hbase.regionserver.thread.compaction.small\": \"20\", \"hbase.regionserver.thread.compaction.throttle\": \"4294967296\", \"hbase.regionserver.thread.split\": \"10\", \"hbase.regionserver.thrift.port\": \"19090\", \"hbase.rootdir.perms\": \"711\", \"hbase.rpc.timeout\": \"120000\", \"hbase.service.id\": \"hyperbase-1068-default\", \"hbase.thrift.info.bindAddress\": \"0.0.0.0\", \"hbase.thrift.info.port\": \"19095\", \"hbase.thrift.security.qop\": \"auth-conf\", \"hbase.use.partition.table\": \"false\", \"hbase.zookeeper.property.maxClientCnxns\": \"2000\", \"hfile.block.cache.size\": \"0.1\", \"hregion.index.path\": \"hyperbase1\", \"mapred.child.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\", \"yarn.app.mapreduce.am.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\", \"zookeeper.session.timeout\": \"180000\", \"zookeeper.znode.parent\": \"/hyperbase1\"}, \"hyperbase_master_address\": \"hbmaster-hl-1068.default.svc\", \"hyperbase_principal\": \"hbase/tos@TDH\", \"security\": {\"auth_type\": \"none\", \"cas_client_config\": { }, \"cas_plugin_enable\": \"false\", \"guardian_client_config\": {\"guardian_site\": {\"guardian.client.principal\": \"hbase/tos\", \"guardian.permission.component\": \"hyperbase-1068-default\"}}, \"guardian_plugin_enable\": \"false\", \"guardian_principal_host\": \"tos\", \"guardian_principal_user\": \"hbase\", \"guardian_realm\": \"TDH\", \"guardian_spnego_principal_host\": \"tos\", \"guardian_spnego_principal_user\": \"HTTP\", \"sssd_plugin_enable\": \"false\"}, \"zookeeper_client_config\": { }}}}}"
+            "transwarp.meta": "{\"provides\": {\"HYPERBASE_CLIENT_CONFIG\": {\"immediate_value\": {\"auth_type\": \"none\", \"hbase_site\": {\"dfs.support.append\": \"true\", \"hbase.abort.disconected.batchmutate\": \"true\", \"hbase.assignment.timeout.management\": \"true\", \"hbase.balancer.period\": \"300000\", \"hbase.client.meta.operation.timeout\": \"60000\", \"hbase.client.operation.timeout\": \"60000\", \"hbase.client.scanner.caching\": \"200\", \"hbase.client.scanner.timeout.period\": \"600000\", \"hbase.client.write.buffer\": \"4194304\", \"hbase.cluster.distributed\": \"true\", \"hbase.hregion.majorcompaction\": \"604800000\", \"hbase.hregion.majorcompaction.cron\": \"0 0 1 * * ?\", \"hbase.hregion.max.filesize\": \"3758096384\", \"hbase.hregion.memstore.block.multiplier\": \"4\", \"hbase.hregion.memstore.chunkpool.maxsize\": \"0.3\", \"hbase.hregion.memstore.flush.size\": \"67108864\", \"hbase.hregion.memstore.mslab.enabled\": \"true\", \"hbase.hregion.preclose.flush.size\": \"1310720\", \"hbase.hstore.blockingStoreFiles\": \"30\", \"hbase.hstore.blockingWaitTime\": \"5000\", \"hbase.hstore.compaction.kv.max\": \"100\", \"hbase.hstore.compaction.max\": \"25\", \"hbase.hstore.compaction.max.size\": \"2147483648\", \"hbase.hstore.compaction.min\": \"50\", \"hbase.hstore.compaction.ratio\": \"1.2\", \"hbase.hstore.defaultengine.compactionpolicy.class\": \"org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy\", \"hbase.hstore.flusher.count\": \"20\", \"hbase.lightweight.snapshotmanager.enable\": \"true\", \"hbase.master.assignment.timeoutmonitor.period\": \"600000\", \"hbase.master.balancer.regionLocationCacheTime\": \"300\", \"hbase.master.balancer.stochastic.maxRunningTime\": \"300000\", \"hbase.master.distributed.log.replay\": \"true\", \"hbase.master.executor.closeregion.threads\": \"40\", \"hbase.master.executor.openregion.threads\": \"40\", \"hbase.master.info.bindAddress\": \"0.0.0.0\", \"hbase.master.info.port\": \"60010\", \"hbase.master.ipc.address\": \"0.0.0.0\", \"hbase.master.port\": \"60000\", \"hbase.master.preload.tabledescriptors\": \"true\", \"hbase.master.report.ip\": \"false\", \"hbase.master.wait.on.regionservers.mintostart\": \"1\", \"hbase.partition.ignore.unavailable.clusters\": \"false\", \"hbase.regions.slop\": \"0\", \"hbase.regionserver.executor.closeregion.threads\": \"40\", \"hbase.regionserver.executor.openregion.threads\": \"40\", \"hbase.regionserver.fileSplitTimeout\": \"300000\", \"hbase.regionserver.global.memstore.size\": \"0.5\", \"hbase.regionserver.global.memstore.size.lower.limit\": \"0.95\", \"hbase.regionserver.handler.count\": \"100\", \"hbase.regionserver.hlog.blocksize\": \"268435456\", \"hbase.regionserver.info.bindAddress\": \"0.0.0.0\", \"hbase.regionserver.info.port\": \"60030\", \"hbase.regionserver.ipc.address\": \"0.0.0.0\", \"hbase.regionserver.lease.period\": \"600000\", \"hbase.regionserver.maxlogs\": \"100\", \"hbase.regionserver.metahandler.count\": \"200\", \"hbase.regionserver.port\": \"60020\", \"hbase.regionserver.replication.handler.count\": \"10\", \"hbase.regionserver.report.ip\": \"false\", \"hbase.regionserver.storefile.refresh.period\": \"0\", \"hbase.regionserver.thread.compaction.large\": \"8\", \"hbase.regionserver.thread.compaction.small\": \"20\", \"hbase.regionserver.thread.compaction.throttle\": \"4294967296\", \"hbase.regionserver.thread.split\": \"10\", \"hbase.regionserver.thrift.port\": \"9090\", \"hbase.rootdir.perms\": \"711\", \"hbase.rpc.timeout\": \"120000\", \"hbase.service.id\": \"hyperbase-1068-default\", \"hbase.thrift.info.bindAddress\": \"0.0.0.0\", \"hbase.thrift.info.port\": \"9095\", \"hbase.thrift.security.qop\": \"auth-conf\", \"hbase.use.partition.table\": \"false\", \"hbase.zookeeper.property.maxClientCnxns\": \"2000\", \"hfile.block.cache.size\": \"0.1\", \"hregion.index.path\": \"hyperbase1\", \"mapred.child.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\", \"yarn.app.mapreduce.am.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\", \"zookeeper.session.timeout\": \"180000\", \"zookeeper.znode.parent\": \"/hyperbase1\"}, \"hyperbase_master_address\": \"hbmaster-hl-1068.default.svc\", \"hyperbase_principal\": \"hbase/tos@TDH\", \"security\": {\"auth_type\": \"none\", \"cas_client_config\": { }, \"cas_plugin_enable\": \"false\", \"guardian_client_config\": {\"guardian_site\": {\"guardian.client.principal\": \"hbase/tos\", \"guardian.permission.component\": \"hyperbase-1068-default\"}}, \"guardian_plugin_enable\": \"false\", \"guardian_principal_host\": \"tos\", \"guardian_principal_user\": \"hbase\", \"guardian_realm\": \"TDH\", \"guardian_spnego_principal_host\": \"tos\", \"guardian_spnego_principal_user\": \"HTTP\", \"sssd_plugin_enable\": \"false\"}, \"zookeeper_client_config\": { }}}}}"
          },
          "labels": {
             "scope": "tdh",
@@ -55,7 +55,7 @@
                   "cni.networks": "overlay",
                   "scheduler.alpha.kubernetes.io/affinity": "{\"podAntiAffinity\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"labelSelector\": {\"matchLabels\": {\"transwarp.alias\": \"hdfs_hjc1068\", \"transwarp.install\": \"1068\", \"transwarp.name\": \"hyperbasecagent\"}}, \"namespaces\": [\"default\"], \"topologyKey\": \"kubernetes.io/hostname\"}]}}",
                   "transwarp.app": "hdfs",
-                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18f5b01da83fcd51f1368b88c227ce61e"
+                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18063a54837778d2737a5e7218fba083c"
                },
                "labels": {
                   "transwarp.alias": "hdfs_hjc1068",
@@ -263,7 +263,7 @@
          "hbase-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- range gets \"/hbase_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/catalog_agent/enable\" \"false\") \"true\" -}}\n{{- range gets \"/hbase_site/catalog_plugin/hbase_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.clientPort</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_port\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.peerport</name>\n    <value>2888</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.leaderport</name>\n    <value>3888</value>\n  </property>\n\n  <property>\n    <name>hbase.master.advertise.hostname</name>\n    <value>{{ getenv \"HBASE_MASTER_ADVERTISE_HOSTNAME\" \"\" }}</value>\n  </property>\n\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n  <property>\n    <name>hbase.rpc.engine</name>\n    <value>org.apache.hadoop.hbase.ipc.SecureRpcEngine</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.master.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.thrift.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.thrift.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.thrift.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n  <property>\n    <name>hbase.rest.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.rest.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.rest.authentication.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hbase\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.rest.authentication.kerberos.keytab</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.coprocessor.master.classes</name>\n    <value>{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" }}org.apache.hadoop.hbase.security.access.GuardianAccessController{{- else }}org.apache.hadoop.hbase.security.access.AccessController{{- end }}{{- if eq (getv \"/catalog_agent/enable\" \"false\") \"true\" }},io.transwarp.catalog.hook.hyperbase._6_2_0.HBaseCoprocessor{{- else }}{{- end }}</value>\n  </property>\n  <property>\n    <name>hbase.coprocessor.region.classes</name>\n    <value>org.apache.hadoop.hyperbase.secondaryindex.coprocessor.Indexer,org.apache.hadoop.hbase.security.token.TokenProvider,{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" }}org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,org.apache.hadoop.hbase.security.access.GuardianAccessController{{- else }}org.apache.hadoop.hbase.security.access.SecureBulkLoadEndpoint,org.apache.hadoop.hbase.security.access.AccessController{{- end }}{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 }},org.apache.hadoop.hyperbase.fulltextindex.coprocessor.EsRegionCoprocessor{{- end }}</value>\n  </property>\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hbase.coprocessor.master.classes</name>\n    <value>{{- if eq (getv \"/catalog_agent/enable\" \"false\") \"true\" }}io.transwarp.catalog.hook.hyperbase._6_2_0.HBaseCoprocessor{{- else }}{{- end }}</value>\n  </property>\n  <property>\n    <name>hbase.coprocessor.region.classes</name>\n    <value>org.apache.hadoop.hyperbase.secondaryindex.coprocessor.Indexer,org.apache.hadoop.hbase.security.token.TokenProvider{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 }},org.apache.hadoop.hyperbase.fulltextindex.coprocessor.EsRegionCoprocessor{{- end }}</value>\n  </property>\n{{- end }}\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" \"\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n  <property>\n    <name>license.zookeeper.quorum</name>\n    <value>{{ getenv \"TRANSWARP_LICENSE_ZOOKEEPER_QUORUM\" \"127.0.0.1\" }}</value>\n  </property>\n\n  <property>\n      <name>hbase.rootdir</name>\n      <value>hdfs://{{ getv \"/hdfs_client_config/hdfs_confd_config/hdfs_site/dfs.nameservices\" \"\" }}{{ getv \"/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n</configuration>",
          "hdfs-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/hdfs_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\" \"\") \"kerberos\" }}\n  <property>\n    <name>dfs.block.access.token.enable</name>\n    <value>true</value>\n  </property>\n\n  <!-- Datanode security config -->\n  <property>\n    <name>dfs.datanode.keytab.file</name>\n    <value>/etc/keytabs/keytab</value> <!-- path to the HDFS keytab -->\n  </property>\n  <property>\n    <name>dfs.datanode.kerberos.principal</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_principal_user\" \"hdfs\" }}/{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n   <!-- NameNode security config -->\n  <property>\n    <name>dfs.namenode.keytab.file</name>\n    <value>/etc/keytabs/keytab</value> <!-- path to the Namenode keytab -->\n  </property>\n  <property>\n    <name>dfs.namenode.kerberos.principal</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_principal_user\" \"hdfs\" }}/{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>dfs.namenode.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n{{- end }}\n\n  <property>\n    <name>dfs.ha.namenodes.service</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/hdfs/hdfs_ha_namenodes_service\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hdfs.service.id</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/guardian_site/guardian.permission.component\" \"\" }}</value>\n  </property>\n</configuration>",
          "hdfs.toml": "[[template]]\nsrc = \"core-site.xml.tmpl\"\ndest = \"/etc/hadoop/conf/core-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hdfs-site.xml.tmpl\"\ndest = \"/etc/hadoop/conf/hdfs-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n",
-         "hyperbase-confd.conf": "{\n  \"Ingress\": {\n    \"path\": \"test_hyperbase\"\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"catalog_agent\": {\n    \"enable\": true,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/hyperbase/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.auth-type\": \"KERBEROS\",\n        \"catalog.agent.service.id\": \"hyperbase-1068-default\",\n        \"catalog.agent.service.tenant\": \"default\",\n        \"catalog.agent.service.version\": \"transwarp-6.2\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"datasource.load.meta\": false,\n        \"logging.config\": \"classpath:logback-file.xml\",\n        \"logging.level.root\": \"INFO\",\n        \"server.address\": \"hyperbasecagent-hl-1068.default.svc\",\n        \"server.port\": 25400,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 0.5,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 1,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hbase_site\": {\n    \"dfs.support.append\": \"true\",\n    \"hbase.abort.disconected.batchmutate\": \"true\",\n    \"hbase.assignment.timeout.management\": \"true\",\n    \"hbase.balancer.period\": \"300000\",\n    \"hbase.client.meta.operation.timeout\": \"60000\",\n    \"hbase.client.operation.timeout\": \"60000\",\n    \"hbase.client.scanner.caching\": \"200\",\n    \"hbase.client.scanner.timeout.period\": \"600000\",\n    \"hbase.client.write.buffer\": \"4194304\",\n    \"hbase.cluster.distributed\": \"true\",\n    \"hbase.hregion.majorcompaction\": \"604800000\",\n    \"hbase.hregion.majorcompaction.cron\": \"0 0 1 * * ?\",\n    \"hbase.hregion.max.filesize\": \"3758096384\",\n    \"hbase.hregion.memstore.block.multiplier\": \"4\",\n    \"hbase.hregion.memstore.chunkpool.maxsize\": \"0.3\",\n    \"hbase.hregion.memstore.flush.size\": \"67108864\",\n    \"hbase.hregion.memstore.mslab.enabled\": \"true\",\n    \"hbase.hregion.preclose.flush.size\": \"1310720\",\n    \"hbase.hstore.blockingStoreFiles\": \"30\",\n    \"hbase.hstore.blockingWaitTime\": \"5000\",\n    \"hbase.hstore.compaction.kv.max\": \"100\",\n    \"hbase.hstore.compaction.max\": \"25\",\n    \"hbase.hstore.compaction.max.size\": \"2147483648\",\n    \"hbase.hstore.compaction.min\": \"50\",\n    \"hbase.hstore.compaction.ratio\": \"1.2\",\n    \"hbase.hstore.defaultengine.compactionpolicy.class\": \"org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy\",\n    \"hbase.hstore.flusher.count\": \"20\",\n    \"hbase.lightweight.snapshotmanager.enable\": \"true\",\n    \"hbase.master.assignment.timeoutmonitor.period\": \"600000\",\n    \"hbase.master.balancer.regionLocationCacheTime\": \"300\",\n    \"hbase.master.balancer.stochastic.maxRunningTime\": \"300000\",\n    \"hbase.master.distributed.log.replay\": \"true\",\n    \"hbase.master.executor.closeregion.threads\": \"40\",\n    \"hbase.master.executor.openregion.threads\": \"40\",\n    \"hbase.master.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.master.info.port\": \"60010\",\n    \"hbase.master.ipc.address\": \"0.0.0.0\",\n    \"hbase.master.port\": \"60000\",\n    \"hbase.master.preload.tabledescriptors\": \"true\",\n    \"hbase.master.report.ip\": \"false\",\n    \"hbase.master.wait.on.regionservers.mintostart\": \"1\",\n    \"hbase.partition.ignore.unavailable.clusters\": \"false\",\n    \"hbase.regions.slop\": \"0\",\n    \"hbase.regionserver.executor.closeregion.threads\": \"40\",\n    \"hbase.regionserver.executor.openregion.threads\": \"40\",\n    \"hbase.regionserver.fileSplitTimeout\": \"300000\",\n    \"hbase.regionserver.global.memstore.size\": \"0.5\",\n    \"hbase.regionserver.global.memstore.size.lower.limit\": \"0.95\",\n    \"hbase.regionserver.handler.count\": \"100\",\n    \"hbase.regionserver.hlog.blocksize\": \"268435456\",\n    \"hbase.regionserver.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.regionserver.info.port\": \"60030\",\n    \"hbase.regionserver.ipc.address\": \"0.0.0.0\",\n    \"hbase.regionserver.lease.period\": \"600000\",\n    \"hbase.regionserver.maxlogs\": \"100\",\n    \"hbase.regionserver.metahandler.count\": \"200\",\n    \"hbase.regionserver.port\": \"60020\",\n    \"hbase.regionserver.replication.handler.count\": \"10\",\n    \"hbase.regionserver.report.ip\": \"false\",\n    \"hbase.regionserver.storefile.refresh.period\": \"0\",\n    \"hbase.regionserver.thread.compaction.large\": \"8\",\n    \"hbase.regionserver.thread.compaction.small\": \"20\",\n    \"hbase.regionserver.thread.compaction.throttle\": \"4294967296\",\n    \"hbase.regionserver.thread.split\": \"10\",\n    \"hbase.regionserver.thrift.port\": \"19090\",\n    \"hbase.rootdir.perms\": \"711\",\n    \"hbase.rpc.timeout\": \"120000\",\n    \"hbase.service.id\": \"hyperbase-1068-default\",\n    \"hbase.thrift.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.thrift.info.port\": \"19095\",\n    \"hbase.thrift.security.qop\": \"auth-conf\",\n    \"hbase.use.partition.table\": \"false\",\n    \"hbase.zookeeper.property.maxClientCnxns\": \"2000\",\n    \"hfile.block.cache.size\": \"0.1\",\n    \"hregion.index.path\": \"hyperbase1\",\n    \"mapred.child.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\",\n    \"yarn.app.mapreduce.am.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\",\n    \"zookeeper.session.timeout\": \"180000\",\n    \"zookeeper.znode.parent\": \"/hyperbase1\"\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"java_opts\": {\n    \"hbase_hbck_opts\": \"-Xms2963m -Xmx5927m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hbase/tos\",\n        \"guardian.permission.component\": \"hyperbase-1068-default\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hbase\",\n    \"guardian_realm\": \"TDH\",\n    \"guardian_spnego_principal_host\": \"tos\",\n    \"guardian_spnego_principal_user\": \"HTTP\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
+         "hyperbase-confd.conf": "{\n  \"Ingress\": {\n    \"path\": \"test_hyperbase\"\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"catalog_agent\": {\n    \"enable\": true,\n    \"env_list\": [\n\n    ],\n    \"image\": \"172.16.1.99/gold/catalog-agent:tdc-2.0\",\n    \"priority\": 0,\n    \"properties\": {\n      \"atlas_application\": {\n        \"atlas.authentication.keytab\": \"/etc/keytabs/keytab\",\n        \"atlas.authentication.method\": \"kerberos\",\n        \"atlas.kafka.auto.commit.interval.ms\": \"1000\",\n        \"atlas.kafka.auto.offset.reset\": \"earliest\",\n        \"atlas.kafka.bootstrap.servers\": \"\",\n        \"atlas.kafka.enable.auto.commit\": \"false\",\n        \"atlas.kafka.offsets.topic.replication.factor\": \"1\",\n        \"atlas.kafka.poll.timeout.ms\": \"60000\",\n        \"atlas.kafka.sasl.kerberos.service.name\": \"kafka\",\n        \"atlas.kafka.sasl.kerberos.service.principal.instance\": \"tos_tdcsys\",\n        \"atlas.kafka.sasl.mechanism\": \"GSSAPI\",\n        \"atlas.kafka.security.protocol\": \"SASL_PLAINTEXT\",\n        \"atlas.kafka.session.timeout.ms\": \"600000\",\n        \"atlas.kafka.zookeeper.connect\": \"\",\n        \"atlas.kafka.zookeeper.connection.timeout.ms\": \"60000\",\n        \"atlas.kafka.zookeeper.session.timeout.ms\": \"120000\",\n        \"atlas.kafka.zookeeper.sync.time.ms\": \"1000\",\n        \"atlas.notification.consumer.retry.interval\": \"5000\",\n        \"atlas.notification.hook.retry.interval\": \"10000\",\n        \"atlas.notification.log.failed.messages\": \"true\",\n        \"atlas.notification.topic.entities\": \"CATALOG_ENTITIES\",\n        \"atlas.notification.topic.hook\": \"CATALOG_HOOK\",\n        \"atlas.rest.address\": \"\",\n        \"java.security.auth.login.config\": \"/etc/hyperbase/conf/kafka_client_jaas.conf\"\n      },\n      \"ca_application\": {\n        \"catalog.agent.service.auth-type\": \"KERBEROS\",\n        \"catalog.agent.service.id\": \"hyperbase-1068-default\",\n        \"catalog.agent.service.tenant\": \"default\",\n        \"catalog.agent.service.version\": \"transwarp-6.2\",\n        \"catalog.keytab.file\": \"/etc/keytabs/keytab\",\n        \"datasource.load.meta\": false,\n        \"logging.config\": \"classpath:logback-file.xml\",\n        \"logging.level.root\": \"INFO\",\n        \"server.address\": \"hyperbasecagent-hl-1068.default.svc\",\n        \"server.port\": 25400,\n        \"spring.profiles.include\": \"ssl\"\n      },\n      \"web_address\": \"\"\n    },\n    \"replicas\": 1,\n    \"resources\": {\n      \"cpu_limit\": 0.5,\n      \"cpu_request\": 0.10000000000000001,\n      \"memory_limit\": 1,\n      \"memory_request\": 0.5,\n      \"storage\": {\n        \"log\": {\n          \"accessMode\": \"ReadWriteOnce\",\n          \"limit\": {\n\n          },\n          \"size\": \"20Gi\",\n          \"storageClass\": \"silver\"\n        }\n      }\n    },\n    \"update_strategy_configs\": {\n      \"type\": \"Recreate\"\n    },\n    \"use_host_network\": false\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hbase_site\": {\n    \"dfs.support.append\": \"true\",\n    \"hbase.abort.disconected.batchmutate\": \"true\",\n    \"hbase.assignment.timeout.management\": \"true\",\n    \"hbase.balancer.period\": \"300000\",\n    \"hbase.client.meta.operation.timeout\": \"60000\",\n    \"hbase.client.operation.timeout\": \"60000\",\n    \"hbase.client.scanner.caching\": \"200\",\n    \"hbase.client.scanner.timeout.period\": \"600000\",\n    \"hbase.client.write.buffer\": \"4194304\",\n    \"hbase.cluster.distributed\": \"true\",\n    \"hbase.hregion.majorcompaction\": \"604800000\",\n    \"hbase.hregion.majorcompaction.cron\": \"0 0 1 * * ?\",\n    \"hbase.hregion.max.filesize\": \"3758096384\",\n    \"hbase.hregion.memstore.block.multiplier\": \"4\",\n    \"hbase.hregion.memstore.chunkpool.maxsize\": \"0.3\",\n    \"hbase.hregion.memstore.flush.size\": \"67108864\",\n    \"hbase.hregion.memstore.mslab.enabled\": \"true\",\n    \"hbase.hregion.preclose.flush.size\": \"1310720\",\n    \"hbase.hstore.blockingStoreFiles\": \"30\",\n    \"hbase.hstore.blockingWaitTime\": \"5000\",\n    \"hbase.hstore.compaction.kv.max\": \"100\",\n    \"hbase.hstore.compaction.max\": \"25\",\n    \"hbase.hstore.compaction.max.size\": \"2147483648\",\n    \"hbase.hstore.compaction.min\": \"50\",\n    \"hbase.hstore.compaction.ratio\": \"1.2\",\n    \"hbase.hstore.defaultengine.compactionpolicy.class\": \"org.apache.hadoop.hbase.regionserver.compactions.RatioBasedCompactionPolicy\",\n    \"hbase.hstore.flusher.count\": \"20\",\n    \"hbase.lightweight.snapshotmanager.enable\": \"true\",\n    \"hbase.master.assignment.timeoutmonitor.period\": \"600000\",\n    \"hbase.master.balancer.regionLocationCacheTime\": \"300\",\n    \"hbase.master.balancer.stochastic.maxRunningTime\": \"300000\",\n    \"hbase.master.distributed.log.replay\": \"true\",\n    \"hbase.master.executor.closeregion.threads\": \"40\",\n    \"hbase.master.executor.openregion.threads\": \"40\",\n    \"hbase.master.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.master.info.port\": \"60010\",\n    \"hbase.master.ipc.address\": \"0.0.0.0\",\n    \"hbase.master.port\": \"60000\",\n    \"hbase.master.preload.tabledescriptors\": \"true\",\n    \"hbase.master.report.ip\": \"false\",\n    \"hbase.master.wait.on.regionservers.mintostart\": \"1\",\n    \"hbase.partition.ignore.unavailable.clusters\": \"false\",\n    \"hbase.regions.slop\": \"0\",\n    \"hbase.regionserver.executor.closeregion.threads\": \"40\",\n    \"hbase.regionserver.executor.openregion.threads\": \"40\",\n    \"hbase.regionserver.fileSplitTimeout\": \"300000\",\n    \"hbase.regionserver.global.memstore.size\": \"0.5\",\n    \"hbase.regionserver.global.memstore.size.lower.limit\": \"0.95\",\n    \"hbase.regionserver.handler.count\": \"100\",\n    \"hbase.regionserver.hlog.blocksize\": \"268435456\",\n    \"hbase.regionserver.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.regionserver.info.port\": \"60030\",\n    \"hbase.regionserver.ipc.address\": \"0.0.0.0\",\n    \"hbase.regionserver.lease.period\": \"600000\",\n    \"hbase.regionserver.maxlogs\": \"100\",\n    \"hbase.regionserver.metahandler.count\": \"200\",\n    \"hbase.regionserver.port\": \"60020\",\n    \"hbase.regionserver.replication.handler.count\": \"10\",\n    \"hbase.regionserver.report.ip\": \"false\",\n    \"hbase.regionserver.storefile.refresh.period\": \"0\",\n    \"hbase.regionserver.thread.compaction.large\": \"8\",\n    \"hbase.regionserver.thread.compaction.small\": \"20\",\n    \"hbase.regionserver.thread.compaction.throttle\": \"4294967296\",\n    \"hbase.regionserver.thread.split\": \"10\",\n    \"hbase.regionserver.thrift.port\": \"9090\",\n    \"hbase.rootdir.perms\": \"711\",\n    \"hbase.rpc.timeout\": \"120000\",\n    \"hbase.service.id\": \"hyperbase-1068-default\",\n    \"hbase.thrift.info.bindAddress\": \"0.0.0.0\",\n    \"hbase.thrift.info.port\": \"9095\",\n    \"hbase.thrift.security.qop\": \"auth-conf\",\n    \"hbase.use.partition.table\": \"false\",\n    \"hbase.zookeeper.property.maxClientCnxns\": \"2000\",\n    \"hfile.block.cache.size\": \"0.1\",\n    \"hregion.index.path\": \"hyperbase1\",\n    \"mapred.child.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\",\n    \"yarn.app.mapreduce.am.env\": \"JAVA_HOME=/usr/java/jdk1.8.0_25\",\n    \"zookeeper.session.timeout\": \"180000\",\n    \"zookeeper.znode.parent\": \"/hyperbase1\"\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"java_opts\": {\n    \"hbase_hbck_opts\": \"-Xms2963m -Xmx5927m -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hbase/tos\",\n        \"guardian.permission.component\": \"hyperbase-1068-default\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hbase\",\n    \"guardian_realm\": \"TDH\",\n    \"guardian_spnego_principal_host\": \"tos\",\n    \"guardian_spnego_principal_user\": \"HTTP\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
          "hyperbase.toml": "[[template]]\nsrc = \"jaas.conf.tmpl\"\ndest = \"/etc/hyperbase/conf/jaas.conf\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hbase-env.sh.tmpl\"\ndest = \"/etc/hyperbase/conf/hbase-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hbase-site.xml.tmpl\"\ndest = \"/etc/hyperbase/conf/hbase-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n",
          "jaas.conf.tmpl": "{{- if eq (getv \"/zookeeper_client_config/zookeeper_auth_type\") \"kerberos\" }}\nServer {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  keyTab=\"/etc/keytabs/keytab\"\n  storeKey=true\n  useTicketCache=false\n  principal=\"{{getv \"/zookeeper_client_config/zookeeper_principal\"}}\";\n};\nClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=false\n  useTicketCache=true;\n};\n\nKafkaClient {\n  com.sun.security.auth.module.Krb5LoginModule required\n  useKeyTab=true\n  storeKey=true\n  keyTab=\"/etc/keytabs/keytab\"\n  principal=\"kafka/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}\";\n};\n{{- end }}\n",
          "msl-site.toml": "[[template]]\nsrc = \"msl-site.xml.tmpl\"\ndest = \"/etc/msl-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
@@ -330,7 +330,7 @@
                   "cni.networks": "overlay",
                   "scheduler.alpha.kubernetes.io/affinity": "{\"podAntiAffinity\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"labelSelector\": {\"matchLabels\": {\"transwarp.alias\": \"hdfs_hjc1068\", \"transwarp.install\": \"1068\", \"transwarp.name\": \"hbmaster\"}}, \"namespaces\": [\"default\"], \"topologyKey\": \"kubernetes.io/hostname\"}]}}",
                   "transwarp.app": "hdfs",
-                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18f5b01da83fcd51f1368b88c227ce61e"
+                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18063a54837778d2737a5e7218fba083c"
                },
                "labels": {
                   "transwarp.alias": "hdfs_hjc1068",
@@ -711,7 +711,7 @@
                   "cni.networks": "overlay",
                   "scheduler.alpha.kubernetes.io/affinity": "{\"podAntiAffinity\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"labelSelector\": {\"matchLabels\": {\"transwarp.alias\": \"hdfs_hjc1068\", \"transwarp.install\": \"1068\", \"transwarp.name\": \"hbregionserver\"}}, \"namespaces\": [\"default\"], \"topologyKey\": \"kubernetes.io/hostname\"}]}}",
                   "transwarp.app": "hdfs",
-                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18f5b01da83fcd51f1368b88c227ce61e"
+                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18063a54837778d2737a5e7218fba083c"
                },
                "labels": {
                   "transwarp.alias": "hdfs_hjc1068",
@@ -944,7 +944,7 @@
                   "cni.networks": "overlay",
                   "scheduler.alpha.kubernetes.io/affinity": "{\"podAntiAffinity\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"labelSelector\": {\"matchLabels\": {\"transwarp.alias\": \"hdfs_hjc1068\", \"transwarp.install\": \"1068\", \"transwarp.name\": \"hbthrift\"}}, \"namespaces\": [\"default\"], \"topologyKey\": \"kubernetes.io/hostname\"}]}}",
                   "transwarp.app": "hdfs",
-                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18f5b01da83fcd51f1368b88c227ce61e"
+                  "transwarp/configmap.md5": "64e6e62a3f9d7fa5614ea809218e17f18063a54837778d2737a5e7218fba083c"
                },
                "labels": {
                   "transwarp.alias": "hdfs_hjc1068",
Index: metastore/6.2/app.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/app.yaml	(date 1571738526000)
+++ metastore/6.2/app.yaml	(date 1571745813000)
@@ -79,6 +79,14 @@
   name: shiva
   requires:
     SHIVA_CLIENT_CONFIG: $(SHIVA_CLIENT_CONFIG)
+- applicationSelector:
+    transwarp.app: stellardb
+  dependencyOptional: true
+  maxVersion: 6.2
+  minVersion: 6.2
+  name: stellardb
+  requires:
+    STELLARDB_CLIENT_CONFIG: $(STELLARDB_CLIENT_CONFIG)
 userInputParams:
   commonConfig:
     roles:
Index: metastore/6.2/template-json/config.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/template-json/config.jsonnet	(date 1571738526000)
+++ metastore/6.2/template-json/config.jsonnet	(date 1571745813000)
@@ -107,4 +107,5 @@
   SHIVA_CLIENT_CONFIG: {},
   ELASTICSEARCH_CLIENT_CONFIG: {},
   HYPERBASE_CLIENT_CONFIG: {},
+  STELLARDB_CLIENT_CONFIG: {},
 }
Index: metastore/6.2/template-json/files/entrypoint.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/template-json/files/entrypoint.sh	(date 1571738526000)
+++ metastore/6.2/template-json/files/entrypoint.sh	(date 1571745813000)
@@ -4,12 +4,14 @@
 export TRANSWARP_DIR=/var/transwarp
 export HADOOP_CONF_DIR=/etc/hadoop/conf
 export HBASE_CONF_DIR=/etc/hyperbase/conf
+export STELLARDB_CONF_DIR=/etc/stellardb/conf
 export YARN_CONF_DIR=$HADOOP_CONF_DIR
 export INCEPTOR_CONF_DIR=/etc/inceptor/conf
 export HIVE_HOME=/usr/lib/hive
 export LOGDIR=/var/transwarp/logs

 mkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR}/hive ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR}
+mkdir -p ${STELLARDB_CONF_DIR}

 confd -onetime -backend file -prefix / -file /etc/confd/metastore-confd.conf
 chown hive:hive -R ${LOGDIR}
@@ -54,7 +56,7 @@
 if [ x"$GUARDIAN_PLUGIN_ENABLE" = x"true" ]; then
   CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*
 fi
-CLASSPATH="$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR"
+CLASSPATH="$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR:$STELLARDB_CONF_DIR"
 MAIN_CLASS=org.apache.hadoop.hive.metastore.HiveMetaStore

 AGENT_OPTS=" -agentpath:/usr/lib/inceptor/bin/libagent.so "
Index: metastore/6.2/template-json/metastore-main.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/template-json/metastore-main.jsonnet	(date 1571738526000)
+++ metastore/6.2/template-json/metastore-main.jsonnet	(date 1571745813000)
@@ -28,6 +28,8 @@
   'tdh-env.toml': importstr '../../../transwarp-commonlib/6.2/files/tdh-env.toml',
   'hbase.toml': importstr '../../../transwarp-commonlib/6.2/files/hbase.toml',
   'hbase-site.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/hbase-site.xml.tmpl',
+  'graphconf.xml.toml': importstr '../../../transwarp-commonlib/6.2/files/graphconf.xml.toml',
+  'graphconf.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/graphconf.xml.tmpl',
   'yarn.toml': importstr '../../../transwarp-commonlib/6.2/files/yarn.toml',
   'yarn-site.xml.tmpl': importstr '../../../transwarp-commonlib/6.2/files/yarn-site.xml.tmpl',
 };
Index: metastore/6.2/template-json/metastore.jsonnet
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/template-json/metastore.jsonnet	(date 1571738526000)
+++ metastore/6.2/template-json/metastore.jsonnet	(date 1571745813000)
@@ -15,6 +15,7 @@
         elasticsearch_client_config: config.ELASTICSEARCH_CLIENT_CONFIG,
         hyperbase_client_config: config.HYPERBASE_CLIENT_CONFIG,
         shiva_client_config: config.SHIVA_CLIENT_CONFIG,
+        stellardb_client_config: config.STELLARDB_CLIENT_CONFIG,
         argodb: {
           use_ladder: std.toString(config.Advance_Config.argodb.use_ladder),
         },
Index: metastore/6.2/template-json/test-files/config0.jsonnet.golden
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- metastore/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571738526000)
+++ metastore/6.2/template-json/test-files/config0.jsonnet.golden	(date 1571745813000)
@@ -33,6 +33,8 @@
       "apiVersion": "v1",
       "data": {
          "core-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n\n    {{- range gets \"/ladder_client_config/ladder_confd_config/core_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n{{- else -}}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"kerberos\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>true</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.filter.initializers</name>\n    <value>org.apache.hadoop.security.AuthenticationFilterInitializer</value>\n  </property>\n\n  <property>\n    <name>hadoop.http.authentication.simple.anonymous.allowed</name>\n    <value>true</value>\n  </property>\n{{- else if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/auth_type\") \"none\" }}\n  <property>\n    <name>hadoop.security.authentication</name>\n    <value>simple</value>\n  </property>\n\n  <property>\n    <name>hadoop.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_plugin_enable\" \"false\") \"true\" }}\n  <property>\n    <name>hadoop.security.group.mapping</name>\n    <value>org.apache.hadoop.security.LdapGroupsMapping</value>\n  </property>\n\n{{- $LDAP_SLAVES := split (getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_slave_addresses\" \"\") \";\" }}\n{{- if exists \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}\n  <property>\n    <name>hadoop.security.group.mapping.ldap.url</name>\n    <value>ldap://{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_master\" }}:{{ getv \"/hdfs_client_config/hdfs_confd_config/security/guardian_client_config/ldap_port\" }}{{- if ne (len $LDAP_SLAVES) 0}} ldap://{{ join $LDAP_SLAVES \" ldap://\" }}{{- end}}</value>\n  </property>\n{{- end }}\n\n{{- range gets \"/hdfs_client_config/hdfs_confd_config/hdfs/guardian_plugin/core_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n  <property>\n    <name>ha.zookeeper.quorum</name>\n    <value>{{ getv \"/hdfs_client_config/hdfs_confd_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n\n  {{- end }}\n\n</configuration>\n",
+         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  {{- range gets \"/stellardb_client_config/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n  <property>\n    <name>graph.zk.quorum</name>\n    <value>{{ getv \"/stellardb_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
+         "graphconf.xml.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.toml": "[[template]]\nsrc = \"guardian-site.xml.tmpl\"\ndest = \"/etc/guardian-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "guardian-site.xml.tmpl": "{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n{{- range gets \"/security/guardian_client_config/guardian_site/*\" }}\n    <property>\n        <name>{{base .Key}}</name>\n        <value>{{.Value}}</value>\n    </property>\n{{- end }}\n\n\n{{- if eq (getv \"/security/cas_client_config/cas_plugin_enable\" \"false\") \"true\" }}\n    <property>\n        <name>guardian.server.cas.authentication.enabled</name>\n        <value>true</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.url.prefix</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}</value>\n    </property>\n    <property>\n        <name>guardian.server.cas.server.login.url</name>\n        <value>{{getv \"/security/cas_client_config/cas/cas_server_external_address\" \"localhost:8393\"}}{{getv \"/security/cas_client_config/cas/cas_server_context_path\" \"/cas\"}}/login</value>\n    </property>\n{{- end }}\n\n</configuration>\n{{- end -}}\n",
          "hbase-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n{{- range gets \"/hyperbase_client_config/hbase_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hbase.zookeeper.property.clientPort</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_port\" \"\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.peerport</name>\n    <value>2888</value>\n  </property>\n\n  <property>\n    <name>hbase.zookeeper.leaderport</name>\n    <value>3888</value>\n  </property>\n\n{{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n  <property>\n    <name>hbase.rpc.engine</name>\n    <value>org.apache.hadoop.hbase.ipc.SecureRpcEngine</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n  <property>\n    <name>hbase.security.authorization</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" \"\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n  <property>\n      <name>hbase.rootdir</name>\n      <value>hdfs://{{ getv \"/hdfs_client_config/hdfs_confd_config/hdfs_site/dfs.nameservices\" \"\" }}{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n</configuration>\n",
@@ -44,7 +46,7 @@
          "hive-site.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>{{ getv \"/metastore/javax_jdo_option_connection_username\" }}</value>\n  </property>\n\n  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>{{ getv \"/metastore/javax_jdo_option_connection_password\" }}</value>\n  </property>\n\n  <property>\n    <name>holodesk.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>hive.zookeeper.quorum</name>\n    <value>{{ getv \"/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n\n\n{{- $YARN_RMADDR := split (getv \"/yarn_client_config/yarn_resourcemanager_address\" \"\") \",\" -}}\n{{- if gt (len $YARN_RMADDR) 0 -}}\n  <property>\n    <name>mapred.job.tracker</name>\n    <value>{{ join $YARN_RMADDR \":8031,\" }}:8031</value>\n  </property>\n  <property>\n    <name>yarn.resourcemanager.principal</name>\n    <value>{{ getv \"/yarn_client_config/yarn_principal\" \"\" }}</value>\n  </property>\n{{- end -}}\n\n\n  <property>\n    <name>hbase.zookeeper.quorum</name>\n    <value>{{ getv \"/hyperbase_client_config/zookeeper_client_config/zookeeper_addresses\" \"\" }}</value>\n  </property>\n  <property>\n    <name>zookeeper.znode.parent</name>\n    <value>{{ getv \"/hyperbase_client_config/hbase_site/zookeeper.znode.parent\" \"\" }}</value>\n  </property>\n\n  {{- if eq (getv \"/hyperbase_client_config/auth_type\" \"\" ) \"kerberos\" }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>kerberos</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal</name>\n    <value>hbase/{{ getv \"/hyperbase_client_config/security/guardian_principal_host\" \"\" }}@{{ getv \"/hyperbase_client_config/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n\n  <property>\n    <name>hbase.regionserver.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n  <property>\n    <name>hbase.master.kerberos.principal.pattern</name>\n    <value>*</value>\n  </property>\n\n{{- else }}\n  <property>\n    <name>hbase.security.authentication</name>\n    <value>simple</value>\n  </property>\n{{- end }}\n\n{{- if gt (len (getv \"/elasticsearch_client_config/elasticsearch_address\" \"\")) 0 -}}\n  <property>\n    <name>discovery.zen.ping.unicast.hosts</name>\n    <value>{{ getv \"/elasticsearch_client_config/elasticsearch_address\" }}</value>\n  </property>\n  <property>\n    <name>discovery.zen.minimum_master_nodes</name>\n    <value>1</value>\n  </property>\n  <property>\n    <name>cluster.name</name>\n    <value>elastic</value>\n  </property>\n{{- end }}\n\n{{- $MYSQL_SERVERS := split (getv \"/mysql_client_config/mysqladdresses\") \",\" }}\n  <property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://{{ join $MYSQL_SERVERS (printf \":%s,\" (getv \"/mysql_client_config/mysqlport\" \"3306\")) }}:{{getv \"/mysql_client_config/mysqlport\" \"3306\"}}/{{getv \"/metastore/database\"}}?autoReconnect=true&amp;failOverReadOnly=false&amp;createDatabaseIfNotExist=false&amp;characterEncoding=UTF-8&amp;connectTimeout=10000</value>\n  </property>\n\n{{- range gets \"/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n\n{{- if eq (getv \"/security/guardian_plugin_enable\" \"false\") \"true\" -}}\n{{- range gets \"/hive_site/guardian_plugin/hive_site/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n{{- end }}\n{{- end }}\n\n{{- if eq (getv \"/security/auth_type\") \"kerberos\" -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>true</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>true</value>\n  </property>\n{{- else -}}\n  <property>\n    <name>hive.metastore.sasl.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n    <name>hive.security.authorization.enabled</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n  <property>\n    <name>hive.metastore.kerberos.principal</name>\n    <value>{{ getv \"/security/guardian_principal_user\" \"hive\" }}/{{ getv \"/security/guardian_principal_host\" \"tos\" }}@{{ getv \"/security/guardian_client_config/realm\" \"TDH\" }}</value>\n  </property>\n  <property>\n    <name>hive.metastore.kerberos.keytab.file</name>\n    <value>/etc/keytabs/keytab</value>\n  </property>\n\n\n{{- if gt (len (getv \"/shiva_client_config/master_group\" \"\")) 0 -}}\n  <property>\n    <name>ngmr.holodesk.shiva.mastergroup</name>\n    <value>{{ getv \"/shiva_client_config/master_group\" }}</value>\n  </property>\n\n  <property>\n      <name>holodesk.shiva.meta</name>\n      <value>true</value>\n    </property>\n\n{{- else }}\n\n  <property>\n    <name>holodesk.shiva.meta</name>\n    <value>false</value>\n  </property>\n{{- end }}\n\n\n{{- if gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0 -}}\n  <property>\n    <name>ladder.user.short.circuit.enabled</name>\n    <value>false</value>\n  </property>\n  <property>\n     <name>ladder.master.rpc.server.addresslist</name>\n     <value>{{ getv \"/ladder_client_config/ladder_master_address\" }}</value>\n  </property>\n{{- end }}\n\n\n{{- if and (eq (getv \"/argodb/use_ladder\" \"false\") \"true\") (gt (len (getv \"/ladder_client_config/ladder_master_address\" \"\")) 0) -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>ladder://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>ladder://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>ladder://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- else -}}\n  <property>\n    <name>fs.defaultFS</name>\n    <value>hdfs://service</value>\n  </property>\n  <property>\n    <name>hive.metastore.warehouse.dir</name>\n    <value>hdfs://service/user/hive/inceptor/user/hive/warehouse</value>\n  </property>\n  <property>\n    <name>hive.exec.scratchdir</name>\n    <value>hdfs://service/user/hive/inceptor/tmp/hive</value>\n  </property>\n{{- end }}\n\n</configuration>\n",
          "ladder-site.properties.tmpl": "#\n# The Ladder Open Foundation licenses this work under the Apache License, version 2.0\n# (the \"License\"). You may not use this work except in compliance with the License, which is\n# available at www.apache.org/licenses/LICENSE-2.0\n#\n# This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n# either express or implied, as more fully set forth in the License.\n#\n# See the NOTICE file distributed with this work for information regarding copyright ownership.\n#\n\n# Site specific configuration properties for Ladder\n# Details about all configuration properties http://www.ladder.org/documentation/en/Configuration-Settings.html\n\n# Common properties\nladder.master.hostname={{getv \"/ladder_client_config/ladder_confd_config/ladder/ladder_master_hostname_service\" \"localhost\"}}\nladder.underfs.address=/vdir/tmp/ladder/localfs\nladder.master.journal.folder=/var/data/ladder/journal\nladder.master.web.port=19999\n#ladder.security.authentication.type=NOSASL\n#ladder.master.journal.type=NOOP\n#ladder.user.file.copyfromlocal.write.location.policy.class=io.transwarp.ladder.client.file.policy.LocalFirstPolicy\n\n# Security properties\n# ladder.security.authorization.permission.enabled=true\n# ladder.security.authentication.type=SIMPLE\n\n# Worker properties\nladder.worker.memory.size=4GB\nladder.worker.tieredstore.levels=2\nladder.worker.tieredstore.level0.alias=MEM\nladder.worker.tieredstore.level0.dirs.path=/var/data/ladder/laddermemdisk\nladder.worker.tieredstore.level0.watermark.high.ratio=0.9\nladder.worker.tieredstore.level0.watermark.low.ratio=0.7\nladder.worker.tieredstore.level1.alias=HDD\nladder.worker.tieredstore.level1.dirs.path=/var/data/ladder/data\nladder.worker.tieredstore.level1.dirs.quota=100GB\nladder.worker.tieredstore.level1.watermark.high.ratio=0.9\nladder.worker.tieredstore.level1.watermark.low.ratio=0.7\n#ladder.worker.allocator.class=alluxio.worker.block.allocator.MaxFreeAllocator\n#ladder.worker.evictor.class=alluxio.worker.block.evictor.LRUEvictor\nladder.worker.tieredstore.reserver.enabled=true\nladder.worker.web.port=30000\n\n\n# User properties\n# ladder.user.file.readtype.default=CACHE_PROMOTE\n# ladder.user.file.writetype.default=MUST_CACHE\n",
          "ladder.toml": "[[template]]\nsrc = \"ladder-site.properties.tmpl\"\ndest = \"/etc/ladder/conf/ladder-site.properties\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
-         "metastore-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.aux.jars.path\": \"file:///usr/lib/hive/lib/hive-hbase-handler.jar,file:///usr/lib/hbase/lib/hbase-bson-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-client-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-common-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-examples-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hadoop2-compat-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hadoop-compat-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hyperbase-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-it-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-it-0.98.6-transwarp-tests.jar,file:///usr/lib/hbase/lib/hbase-prefix-tree-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-protocol-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-server-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-server-0.98.6-transwarp-tests.jar,file:///usr/lib/hbase/lib/hbase-shell-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-testing-util-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-thrift-0.98.6-transwarp.jar,file:///usr/lib/zookeeper/zookeeper.jar,file:///usr/lib/hbase/lib/protobuf-java-2.5.0.jar,file:///usr/lib/hive/lib/kryo-2.21.jar\",\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"java_opts\": {\n    \"memory_opts\": {\n      \"metastore_memory\": \"6552\"\n    }\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore\": {\n    \"database\": \"metastore_inceptor1\",\n    \"javax_jdo_option_connection_password\": \"passwd\",\n    \"javax_jdo_option_connection_username\": \"hiveuser\",\n    \"metastore_addresses\": \"metastore-hl-1098.u5003.svc\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"mysql_client_config\": {\n\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\",\n        \"guardian.permission.component\": \"metastore-1098-u5003\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
+         "metastore-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"argodb\": {\n    \"use_ladder\": false\n  },\n  \"elasticsearch_client_config\": {\n\n  },\n  \"hdfs_client_config\": {\n\n  },\n  \"hive_site\": {\n    \"datanucleus.autoCreateSchema\": \"false\",\n    \"datanucleus.fixedDatastore\": \"true\",\n    \"guardian_plugin\": {\n      \"hive_site\": {\n        \"hive.metastore.event.listeners\": \"io.transwarp.guardian.plugins.inceptor.GuardianMetaStoreListener\",\n        \"hive.security.authorization.manager\": \"io.transwarp.guardian.plugins.inceptor.GuardianHiveAuthorizerFactory\"\n      }\n    },\n    \"hbase.client.scanner.caching\": 500,\n    \"hbase.scan.cache\": 500,\n    \"hbase.zookeeper.property.clientPort\": 2181,\n    \"hive.aux.jars.path\": \"file:///usr/lib/hive/lib/hive-hbase-handler.jar,file:///usr/lib/hbase/lib/hbase-bson-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-client-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-common-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-examples-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hadoop2-compat-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hadoop-compat-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-hyperbase-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-it-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-it-0.98.6-transwarp-tests.jar,file:///usr/lib/hbase/lib/hbase-prefix-tree-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-protocol-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-server-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-server-0.98.6-transwarp-tests.jar,file:///usr/lib/hbase/lib/hbase-shell-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-testing-util-0.98.6-transwarp.jar,file:///usr/lib/hbase/lib/hbase-thrift-0.98.6-transwarp.jar,file:///usr/lib/zookeeper/zookeeper.jar,file:///usr/lib/hbase/lib/protobuf-java-2.5.0.jar,file:///usr/lib/hive/lib/kryo-2.21.jar\",\n    \"hive.exec.compress.intermediate\": \"true\",\n    \"hive.exec.compress.output\": \"false\",\n    \"hive.exec.dynamic.partition\": \"false\",\n    \"hive.hwi.war.file\": \"lib/hive-hwi-0.8.1.war\",\n    \"hive.input.format\": \"org.apache.hadoop.hive.ql.io.HiveInputFormat\",\n    \"hive.metastore.execute.setugi\": \"true\",\n    \"hive.server2.logging.operation.enabled\": \"false\",\n    \"hive.users.in.admin.role\": \"hive\",\n    \"javax.jdo.option.ConnectionDriverName\": \"com.mysql.jdbc.Driver\",\n    \"mapreduce.framework.name\": \"yarn\"\n  },\n  \"hyperbase_client_config\": {\n\n  },\n  \"java_opts\": {\n    \"memory_opts\": {\n      \"metastore_memory\": \"6552\"\n    }\n  },\n  \"ladder_client_config\": {\n\n  },\n  \"metastore\": {\n    \"database\": \"metastore_inceptor1\",\n    \"javax_jdo_option_connection_password\": \"passwd\",\n    \"javax_jdo_option_connection_username\": \"hiveuser\",\n    \"metastore_addresses\": \"metastore-hl-1098.u5003.svc\"\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"mysql_client_config\": {\n\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n        \"guardian.client.principal\": \"hive/tos\",\n        \"guardian.permission.component\": \"metastore-1098-u5003\"\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"shiva_client_config\": {\n\n  },\n  \"stellardb_client_config\": {\n\n  },\n  \"yarn_client_config\": {\n\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
          "metastore.toml": "[[template]]\nsrc = \"hive-site.xml.tmpl\"\ndest = \"/etc/inceptor/conf/hive-site.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hive-env-functions.sh.tmpl\"\ndest = \"/etc/inceptor/conf/hive-env-functions.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]\n\n[[template]]\nsrc = \"hive-env.sh.tmpl\"\ndest = \"/etc/inceptor/conf/hive-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
          "tdh-env.sh.tmpl": "#!/bin/bash\nset -x\n\nsetup_keytab() {\n  echo \"setup_keytab\"\n{{ if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  # link_keytab\n  export KRB_MOUNTED_CONF_PATH=${KRB_MOUNTED_CONF_PATH:-/var/run/secrets/transwarp.io/tosvolume/keytab/krb5.conf}\n  export KRB_MOUNTED_KEYTAB=${KRB_MOUNTED_KEYTAB:-/var/run/secrets/transwarp.io/tosvolume/keytab/keytab}\n  if [ ! -f $KRB_MOUNTED_CONF_PATH ]; then\n    echo \"Expect krb5.conf at $KRB_MOUNTED_CONF_PATH but not found!\"\n    exit 1\n  fi\n  if [ ! -f $KRB_MOUNTED_KEYTAB ]; then\n    echo \"Expect keytab file at $KRB_MOUNTED_KEYTAB but not found!\"\n    exit 1\n  fi\n  ln -svf $KRB_MOUNTED_CONF_PATH /etc/krb5.conf\n  [ -d /etc/keytabs ] || mkdir -p /etc/keytabs\n  ln -svf $KRB_MOUNTED_KEYTAB /etc/keytabs/keytab\n{{ end }}\n}\n",
          "tdh-env.toml": "[[template]]\nsrc = \"tdh-env.sh.tmpl\"\ndest = \"/etc/tdh-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
@@ -90,7 +92,7 @@
                "annotations": {
                   "scheduler.alpha.kubernetes.io/affinity": "{\"podAntiAffinity\": {\"requiredDuringSchedulingIgnoredDuringExecution\": [{\"labelSelector\": {\"matchLabels\": {\"transwarp.alias\": \"metastore_mni1098\", \"transwarp.install\": \"1098\", \"transwarp.name\": \"metastore\"}}, \"namespaces\": [\"u5003\"], \"topologyKey\": \"kubernetes.io/hostname\"}]}}",
                   "transwarp.app": "metastore",
-                  "transwarp/configmap.md5": "b97ba8b841ae7852df0f344e695e88ae1f5f36cf8bc311779d0a7683cccc1257"
+                  "transwarp/configmap.md5": "1df85689c9cb8456b61c12fde23ca34950994916530f428217daf24fe7a28ddd"
                },
                "labels": {
                   "transwarp.alias": "metastore_mni1098",
@@ -265,7 +267,7 @@
       "apiVersion": "v1",
       "data": {
          "entrypoint-job.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\nexport HADOOP_HEAPSIZE=4096\nexport HIVE_PORT=10000\nexport INIT_MYSQL=false\n\nmkdir -p -m 777 ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR} ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR}\n\nconfd -onetime -backend file -prefix / -file /etc/confd/metastore-confd.conf\n\nsource /etc/inceptor/conf/hive-env-functions.sh\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n\nwait_mysql_ready\nif [ $? -ne 0 ]; then\n  echo \"MySQL server ${MYSQL_SERVER} didn't respond in 60s. Try next one.\"\n  exit 1\nfi\n\ncheck_database\nif [ $? -ne 0 ]; then\n  echo \"MySQL server ${MYSQL_SERVER} didn't exist database ${METASTORE_ID}. Init MYSQL\"\n  init_mysql\nelse\n  echo \"MySQL server ${MYSQL_SERVER} exist database ${METASTORE_ID}. Update MYSQL\"\n  upgrade_mysql\nfi\nif [ $? -ne 0 ]; then\n  echo \"Check Database Fail\"\n  exit 1\nfi\n\necho \"begin check data dictionary\"\ncheck_data_dictionary\nif [ $? -ne 0 ]; then\n  install_data_dictionary || {\n    echo \"Failed to init data dictionary, exit now\"\n    exit 1\n  }\nfi\n\necho \"check data dictionary suc..\"\n",
-         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR}/hive ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR}\n\nconfd -onetime -backend file -prefix / -file /etc/confd/metastore-confd.conf\nchown hive:hive -R ${LOGDIR}\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nset +x\nfor jar in `find /usr/lib/{hadoop,inceptor} -name \"*.jar\"`\ndo\n  CLASSPATH=$CLASSPATH:$jar\ndone\nset -x\n\n[ -f $INCEPTOR_CONF_DIR/hive-env.sh ] && {\n  source $INCEPTOR_CONF_DIR/hive-env.sh\n}\n[ -f $INCEPTOR_CONF_DIR/hive-env-functions.sh ] && {\n  source $INCEPTOR_CONF_DIR/hive-env-functions.sh\n}\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -f /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n\nREADY=false\nfor ((i = 0; i < 36; i++)); do\n  check_data_dictionary\n  if [ $? -eq 0 ]; then\n    READY=true\n    break;\n  fi\n  sleep 5\ndone\nif [ \"${READY}\" = \"false\" ]; then\n  \"data_dictionary is not initialized. Exit\"\n  exit 1\nfi\n\nif [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n  CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\nfi\nCLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR\"\nMAIN_CLASS=org.apache.hadoop.hive.metastore.HiveMetaStore\n\nAGENT_OPTS=\" -agentpath:/usr/lib/inceptor/bin/libagent.so \"\nJAVA_OPTS=\"-Xmx${METASTORE_MEMORY_MB}m \\\n-XX:MaxPermSize=2048m \\\n-Djava.net.preferIPv4Stack=true \\\n-Dhadoop.log.dir=$HADOOP_LOG_DIR \\\n-Dhadoop.log.file=hadoop.log\n-Dhadoop.home.dir=/usr/lib/hadoop \\\n-Dhadoop.id.str=`whoami` \\\n-Dhadoop.root.logger=INFO,RFA,console \\\n-Dhive.log.dir=${LOGDIR} \\\n-Djava.library.path=/usr/lib/hadoop/lib/native \\\n-Dhadoop.policy.file=hadoop-policy.xml \\\n-Djava.net.preferIPv4Stack=true \\\n-Dzookeeper.server.principal=$ZOOKEEPER_SERVER_PRINCIPAL \\\n-Dhadoop.security.logger=INFO,RFA,console \\\n-Dsun.net.inetaddr.ttl=60 \\\n-Dsun.net.inetaddr.negative.ttl=60 \\\n$JAVA_OPTS \"\n\nsudo -u hive java $AGENT_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n  \"org.apache.hadoop.util.RunJar\" \\\n  /usr/lib/inceptor/lib/inceptor-service-*.jar \\\n  $MAIN_CLASS -p 9083\n"
+         "entrypoint.sh": "#!/bin/bash\nset -x\n\nexport TRANSWARP_DIR=/var/transwarp\nexport HADOOP_CONF_DIR=/etc/hadoop/conf\nexport HBASE_CONF_DIR=/etc/hyperbase/conf\nexport STELLARDB_CONF_DIR=/etc/stellardb/conf\nexport YARN_CONF_DIR=$HADOOP_CONF_DIR\nexport INCEPTOR_CONF_DIR=/etc/inceptor/conf\nexport HIVE_HOME=/usr/lib/hive\nexport LOGDIR=/var/transwarp/logs\n\nmkdir -p ${HADOOP_CONF_DIR} ${YARN_CONF_DIR} ${LOGDIR}/hive ${HBASE_CONF_DIR} ${INCEPTOR_CONF_DIR}\nmkdir -p ${STELLARDB_CONF_DIR}\n\nconfd -onetime -backend file -prefix / -file /etc/confd/metastore-confd.conf\nchown hive:hive -R ${LOGDIR}\n\n[[ `grep \"use-vc\" /etc/resolv.conf` ]] || echo \"options use-vc\" >> /etc/resolv.conf\n\nset +x\nfor jar in `find /usr/lib/{hadoop,inceptor} -name \"*.jar\"`\ndo\n  CLASSPATH=$CLASSPATH:$jar\ndone\nset -x\n\n[ -f $INCEPTOR_CONF_DIR/hive-env.sh ] && {\n  source $INCEPTOR_CONF_DIR/hive-env.sh\n}\n[ -f $INCEPTOR_CONF_DIR/hive-env-functions.sh ] && {\n  source $INCEPTOR_CONF_DIR/hive-env-functions.sh\n}\n[ -f /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n[ -f /etc/guardian-site.xml ] && {\n  cp /etc/guardian-site.xml $INCEPTOR_CONF_DIR\n}\n\nREADY=false\nfor ((i = 0; i < 36; i++)); do\n  check_data_dictionary\n  if [ $? -eq 0 ]; then\n    READY=true\n    break;\n  fi\n  sleep 5\ndone\nif [ \"${READY}\" = \"false\" ]; then\n  \"data_dictionary is not initialized. Exit\"\n  exit 1\nfi\n\nif [ x\"$GUARDIAN_PLUGIN_ENABLE\" = x\"true\" ]; then\n  CLASSPATH=$CLASSPATH:/usr/lib/guardian-plugins/lib/*\nfi\nCLASSPATH=\"$CLASSPATH:$INCEPTOR_CONF_DIR:$HADOOP_CONF_DIR:$HBASE_CONF_DIR:$STELLARDB_CONF_DIR\"\nMAIN_CLASS=org.apache.hadoop.hive.metastore.HiveMetaStore\n\nAGENT_OPTS=\" -agentpath:/usr/lib/inceptor/bin/libagent.so \"\nJAVA_OPTS=\"-Xmx${METASTORE_MEMORY_MB}m \\\n-XX:MaxPermSize=2048m \\\n-Djava.net.preferIPv4Stack=true \\\n-Dhadoop.log.dir=$HADOOP_LOG_DIR \\\n-Dhadoop.log.file=hadoop.log\n-Dhadoop.home.dir=/usr/lib/hadoop \\\n-Dhadoop.id.str=`whoami` \\\n-Dhadoop.root.logger=INFO,RFA,console \\\n-Dhive.log.dir=${LOGDIR} \\\n-Djava.library.path=/usr/lib/hadoop/lib/native \\\n-Dhadoop.policy.file=hadoop-policy.xml \\\n-Djava.net.preferIPv4Stack=true \\\n-Dzookeeper.server.principal=$ZOOKEEPER_SERVER_PRINCIPAL \\\n-Dhadoop.security.logger=INFO,RFA,console \\\n-Dsun.net.inetaddr.ttl=60 \\\n-Dsun.net.inetaddr.negative.ttl=60 \\\n$JAVA_OPTS \"\n\nsudo -u hive java $AGENT_OPTS $JAVA_OPTS -cp $CLASSPATH \\\n  \"org.apache.hadoop.util.RunJar\" \\\n  /usr/lib/inceptor/lib/inceptor-service-*.jar \\\n  $MAIN_CLASS -p 9083\n"
       },
       "kind": "ConfigMap",
       "metadata": {
Index: stellardb/6.0/Chart.yaml
===================================================================
--- stellardb/6.0/Chart.yaml	(date 1571652042000)
+++ stellardb/6.0/Chart.yaml	(date 1571652042000)
@@ -1,10 +0,0 @@
-name: stellardb
-version: 6.0.0
-description: Stellardb服务
-keywords:
-  - transwarp
-home: https://transwarp.io/
-sources:
-  - https://transwarp.io/
-engine: jsonnet
-appVersion: "6.0"
Index: stellardb/6.0/Chart.yaml
===================================================================
--- stellardb/6.0/Chart.yaml	(date 1571728600000)
+++ stellardb/6.0/Chart.yaml	(date 1571728600000)
@@ -1,10 +0,0 @@
-name: stellardb
-version: 6.0.0
-description: Stellardb服务
-keywords:
-  - transwarp
-home: https://transwarp.io/
-sources:
-  - https://transwarp.io/
-engine: jsonnet
-appVersion: "6.0"
Index: stellardb/6.0/app.yaml
===================================================================
--- stellardb/6.0/app.yaml	(date 1571652042000)
+++ stellardb/6.0/app.yaml	(date 1571652042000)
@@ -1,148 +0,0 @@
-name: stellardb
-version: "6"
-jsonnetTemplatePath: template-json/stellardb-main.jsonnet
-meta:
-  provides:
-    STELLARDB_CLIENT_CONFIG:
-      immediateValue: $(STELLARDB_CLIENT_CONFIG)
-templates: []
-dependencies:
-- applicationSelector:
-    transwarp.app: zookeeper
-  minVersion: 6
-  name: zookeeper
-  requires:
-    ZOOKEEPER_CLIENT_CONFIG: $(ZOOKEEPER_CLIENT_CONFIG)
-- applicationSelector:
-    transwarp.app: guardian
-  minVersion: 6
-  name: guardian
-  requires:
-    CAS_CLIENT_CONFIG: $(CAS_CLIENT_CONFIG)
-    GUARDIAN_CLIENT_CONFIG: $(GUARDIAN_CLIENT_CONFIG)
-- applicationSelector: null
-  minVersion: 6
-  name: inceptor
-  requires:
-    INCEPTOR_CLIENT_CONFIG: $(INCEPTOR_CLIENT_CONFIG)
-  transwarp.app: inceptor
-userInputParams:
-  commonConfig:
-    roles:
-    - name: worker
-      description: worker
-      baseConfig:
-      - variable: image
-        default: 172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final
-        description: 镜像
-        type: string
-      - variable: replicas
-        default: 3
-        description: 副本个数
-        type: number
-      - variable: env_list
-        default: []
-        description: 额外环境变量
-        type: list
-      - variable: use_host_network
-        default: false
-        description: 是否使用主机网络
-        type: bool
-      - variable: priority
-        default: 0
-        description: 优先级
-        type: number
-      resouceConfig:
-        cpu_limit: 4
-        cpu_request: 1
-        memory_limit: 16
-        memory_request: 8
-        storage:
-        - name: log
-          storageType: ""
-          storageClass: silver
-          size: 20Gi
-          accessModes: []
-          accessMode: ReadWriteOnce
-          type: tosDisk
-          disk_replicas: 0
-        - name: data
-          storageType: ""
-          storageClass: silver
-          size: 200Gi
-          accessModes:
-          - ReadWriteOnce
-          accessMode: ""
-          type: pvc
-          disk_replicas: 0
-    - name: master
-      description: master
-      baseConfig:
-      - variable: image
-        default: 172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final
-        description: 镜像
-        type: string
-      - variable: replicas
-        default: 1
-        description: 副本个数
-        type: number
-      - variable: env_list
-        default: []
-        description: 额外环境变量
-        type: list
-      - variable: use_host_network
-        default: false
-        description: 是否使用主机网络
-        type: bool
-      - variable: priority
-        default: 0
-        description: 优先级
-        type: number
-      resouceConfig:
-        cpu_limit: 2
-        cpu_request: 2
-        memory_limit: 2
-        memory_request: 2
-        storage:
-        - name: log
-          storageType: ""
-          storageClass: silver
-          size: 20Gi
-          accessModes: []
-          accessMode: ReadWriteOnce
-          type: tosDisk
-          disk_replicas: 0
-  transwarpBundleConfig:
-  - variable: Transwarp_Config.security.sssd_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.auth_type
-    default: none
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.cas_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_principal_host
-    default: tos
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_principal_user
-    default: hive
-    description: ""
-    type: string
-  - variable: Transwarp_Config.Transwarp_Auto_Injected_Volumes
-    default: []
-    description: ""
-    type: list
-  - variable: Transwarp_Config.msl_plugin_config.enable
-    default: false
-    description: ""
-    type: string
-  advanceConfig: []
Index: stellardb/6.0/app.yaml
===================================================================
--- stellardb/6.0/app.yaml	(date 1571728600000)
+++ stellardb/6.0/app.yaml	(date 1571728600000)
@@ -1,148 +0,0 @@
-name: stellardb
-version: "6"
-jsonnetTemplatePath: template-json/stellardb-main.jsonnet
-meta:
-  provides:
-    STELLARDB_CLIENT_CONFIG:
-      immediateValue: $(STELLARDB_CLIENT_CONFIG)
-templates: []
-dependencies:
-- applicationSelector:
-    transwarp.app: zookeeper
-  minVersion: 6
-  name: zookeeper
-  requires:
-    ZOOKEEPER_CLIENT_CONFIG: $(ZOOKEEPER_CLIENT_CONFIG)
-- applicationSelector:
-    transwarp.app: guardian
-  minVersion: 6
-  name: guardian
-  requires:
-    CAS_CLIENT_CONFIG: $(CAS_CLIENT_CONFIG)
-    GUARDIAN_CLIENT_CONFIG: $(GUARDIAN_CLIENT_CONFIG)
-- applicationSelector: null
-  minVersion: 6
-  name: inceptor
-  requires:
-    INCEPTOR_CLIENT_CONFIG: $(INCEPTOR_CLIENT_CONFIG)
-  transwarp.app: inceptor
-userInputParams:
-  commonConfig:
-    roles:
-    - name: worker
-      description: worker
-      baseConfig:
-      - variable: image
-        default: 172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final
-        description: 镜像
-        type: string
-      - variable: replicas
-        default: 3
-        description: 副本个数
-        type: number
-      - variable: env_list
-        default: []
-        description: 额外环境变量
-        type: list
-      - variable: use_host_network
-        default: false
-        description: 是否使用主机网络
-        type: bool
-      - variable: priority
-        default: 0
-        description: 优先级
-        type: number
-      resouceConfig:
-        cpu_limit: 4
-        cpu_request: 1
-        memory_limit: 16
-        memory_request: 8
-        storage:
-        - name: log
-          storageType: ""
-          storageClass: silver
-          size: 20Gi
-          accessModes: []
-          accessMode: ReadWriteOnce
-          type: tosDisk
-          disk_replicas: 0
-        - name: data
-          storageType: ""
-          storageClass: silver
-          size: 200Gi
-          accessModes:
-          - ReadWriteOnce
-          accessMode: ""
-          type: pvc
-          disk_replicas: 0
-    - name: master
-      description: master
-      baseConfig:
-      - variable: image
-        default: 172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final
-        description: 镜像
-        type: string
-      - variable: replicas
-        default: 1
-        description: 副本个数
-        type: number
-      - variable: env_list
-        default: []
-        description: 额外环境变量
-        type: list
-      - variable: use_host_network
-        default: false
-        description: 是否使用主机网络
-        type: bool
-      - variable: priority
-        default: 0
-        description: 优先级
-        type: number
-      resouceConfig:
-        cpu_limit: 2
-        cpu_request: 2
-        memory_limit: 2
-        memory_request: 2
-        storage:
-        - name: log
-          storageType: ""
-          storageClass: silver
-          size: 20Gi
-          accessModes: []
-          accessMode: ReadWriteOnce
-          type: tosDisk
-          disk_replicas: 0
-  transwarpBundleConfig:
-  - variable: Transwarp_Config.security.sssd_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.auth_type
-    default: none
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.cas_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_plugin_enable
-    default: "false"
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_principal_host
-    default: tos
-    description: ""
-    type: string
-  - variable: Transwarp_Config.security.guardian_principal_user
-    default: hive
-    description: ""
-    type: string
-  - variable: Transwarp_Config.Transwarp_Auto_Injected_Volumes
-    default: []
-    description: ""
-    type: list
-  - variable: Transwarp_Config.msl_plugin_config.enable
-    default: false
-    description: ""
-    type: string
-  advanceConfig: []
Index: stellardb/6.0/template-json/config.jsonnet
===================================================================
--- stellardb/6.0/template-json/config.jsonnet	(date 1571652042000)
+++ stellardb/6.0/template-json/config.jsonnet	(date 1571652042000)
@@ -1,111 +0,0 @@
-{
-  // system level params
-  Transwarp_License_Address: '',
-  Transwarp_MSL_License_Address: '',
-  Transwarp_Install_ID: '',
-  Transwarp_Install_Namespace: '',
-  Transwarp_Ingress: {
-    http_port: 80,
-    https_port: 443,
-  },
-  Customized_Instance_Selector: {},
-  Customized_Namespace: '',
-  // Transwarp_Application_Pause,
-
-  App: {
-    master: {
-      update_strategy_configs: {
-        type: 'Recreate',
-      },
-      priority: 0,
-      replicas: 1,
-      image: '172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final',
-      env_list: [],
-      use_host_network: false,
-      resources: {
-        cpu_limit: 2,
-        cpu_request: 2,
-        memory_limit: 2,
-        memory_request: 2,
-        storage: {
-          log: {
-            storageClass: 'silver',
-            size: '20Gi',
-            accessMode: 'ReadWriteOnce',
-            limit: {},
-          },
-        },
-      },
-    },
-    worker: {
-      update_strategy_configs: {
-        type: 'Recreate',
-      },
-      priority: 0,
-      replicas: 3,
-      image: '172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final',
-      env_list: [],
-      use_host_network: false,
-      resources: {
-        cpu_limit: 4,
-        cpu_request: 1,
-        memory_limit: 16,
-        memory_request: 8,
-        storage: {
-          log: {
-            storageClass: 'silver',
-            size: '20Gi',
-            accessMode: 'ReadWriteOnce',
-            limit: {},
-          },
-          data: {
-            storageClass: 'silver',
-            size: '200Gi',
-            accessModes: ['ReadWriteOnce'],
-            limit: {},
-          },
-        },
-      },
-    },
-  },
-
-  // security level params
-  Transwarp_Config: {
-    Transwarp_Auto_Injected_Volumes: [],
-    Ingress: {},
-    msl_plugin_config: {
-      enable: false,
-      config: {
-      },
-    },
-    security: {
-      auth_type: 'none',
-      guardian_client_config: {
-        // guardian_realm: "TDH",
-        guardian_site: {
-          // guardian_serivce_id: ""
-        },
-      },
-      cas_client_config: {
-      },
-      guardian_plugin_enable: 'false',
-      cas_plugin_enable: 'false',
-      sssd_plugin_enable: 'false',
-
-      guardian_principal_host: 'tos',
-      guardian_principal_user: 'hive',
-      // guardian_serivce_id: ""
-    },
-  },
-
-  Advance_Config: {
-    graph_conf: {
-      'graph.zk.base_path': '/graph',
-    },
-
-  },
-
-  // dependency
-  ZOOKEEPER_CLIENT_CONFIG: {},
-  INCEPTOR_CLIENT_CONFIG: {},
-}
Index: stellardb/6.0/template-json/config.jsonnet
===================================================================
--- stellardb/6.0/template-json/config.jsonnet	(date 1571728600000)
+++ stellardb/6.0/template-json/config.jsonnet	(date 1571728600000)
@@ -1,111 +0,0 @@
-{
-  // system level params
-  Transwarp_License_Address: '',
-  Transwarp_MSL_License_Address: '',
-  Transwarp_Install_ID: '',
-  Transwarp_Install_Namespace: '',
-  Transwarp_Ingress: {
-    http_port: 80,
-    https_port: 443,
-  },
-  Customized_Instance_Selector: {},
-  Customized_Namespace: '',
-  // Transwarp_Application_Pause,
-
-  App: {
-    master: {
-      update_strategy_configs: {
-        type: 'Recreate',
-      },
-      priority: 0,
-      replicas: 1,
-      image: '172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final',
-      env_list: [],
-      use_host_network: false,
-      resources: {
-        cpu_limit: 2,
-        cpu_request: 2,
-        memory_limit: 2,
-        memory_request: 2,
-        storage: {
-          log: {
-            storageClass: 'silver',
-            size: '20Gi',
-            accessMode: 'ReadWriteOnce',
-            limit: {},
-          },
-        },
-      },
-    },
-    worker: {
-      update_strategy_configs: {
-        type: 'Recreate',
-      },
-      priority: 0,
-      replicas: 3,
-      image: '172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final',
-      env_list: [],
-      use_host_network: false,
-      resources: {
-        cpu_limit: 4,
-        cpu_request: 1,
-        memory_limit: 16,
-        memory_request: 8,
-        storage: {
-          log: {
-            storageClass: 'silver',
-            size: '20Gi',
-            accessMode: 'ReadWriteOnce',
-            limit: {},
-          },
-          data: {
-            storageClass: 'silver',
-            size: '200Gi',
-            accessModes: ['ReadWriteOnce'],
-            limit: {},
-          },
-        },
-      },
-    },
-  },
-
-  // security level params
-  Transwarp_Config: {
-    Transwarp_Auto_Injected_Volumes: [],
-    Ingress: {},
-    msl_plugin_config: {
-      enable: false,
-      config: {
-      },
-    },
-    security: {
-      auth_type: 'none',
-      guardian_client_config: {
-        // guardian_realm: "TDH",
-        guardian_site: {
-          // guardian_serivce_id: ""
-        },
-      },
-      cas_client_config: {
-      },
-      guardian_plugin_enable: 'false',
-      cas_plugin_enable: 'false',
-      sssd_plugin_enable: 'false',
-
-      guardian_principal_host: 'tos',
-      guardian_principal_user: 'hive',
-      // guardian_serivce_id: ""
-    },
-  },
-
-  Advance_Config: {
-    graph_conf: {
-      'graph.zk.base_path': '/graph',
-    },
-
-  },
-
-  // dependency
-  ZOOKEEPER_CLIENT_CONFIG: {},
-  INCEPTOR_CLIENT_CONFIG: {},
-}
Index: stellardb/6.0/template-json/files/entrypoint.sh
===================================================================
--- stellardb/6.0/template-json/files/entrypoint.sh	(date 1571652042000)
+++ stellardb/6.0/template-json/files/entrypoint.sh	(date 1571652042000)
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-
-mkdir -p /etc/stellardb/conf
-
-confd -onetime -backend file -prefix / -file /etc/confd/stellardb-confd.conf
-
-[ -s /etc/tdh-env.sh ] && {
-  source /etc/tdh-env.sh
-  setup_keytab
-}
-
-while true
-do
-    echo "StellarDB Is Running..."
-    echo "Sleep 60s"
-    sleep 60s
-done
\ No newline at end of file
Index: stellardb/6.0/template-json/files/entrypoint.sh
===================================================================
--- stellardb/6.0/template-json/files/entrypoint.sh	(date 1571728600000)
+++ stellardb/6.0/template-json/files/entrypoint.sh	(date 1571728600000)
@@ -1,18 +0,0 @@
-#!/bin/bash
-
-
-mkdir -p /etc/stellardb/conf
-
-confd -onetime -backend file -prefix / -file /etc/confd/stellardb-confd.conf
-
-[ -s /etc/tdh-env.sh ] && {
-  source /etc/tdh-env.sh
-  setup_keytab
-}
-
-while true
-do
-    echo "StellarDB Is Running..."
-    echo "Sleep 60s"
-    sleep 60s
-done
\ No newline at end of file
Index: stellardb/6.0/template-json/files/graphconf.toml
===================================================================
--- stellardb/6.0/template-json/files/graphconf.toml	(date 1571652042000)
+++ stellardb/6.0/template-json/files/graphconf.toml	(date 1571652042000)
@@ -1,6 +0,0 @@
-[[template]]
-src = "graphconf.xml.tmpl"
-dest = "/etc/stellardb/conf/graphconf.xml"
-check_cmd = "/bin/true"
-reload_cmd = "/bin/true"
-keys = [ "/" ]
\ No newline at end of file
Index: stellardb/6.0/template-json/files/graphconf.toml
===================================================================
--- stellardb/6.0/template-json/files/graphconf.toml	(date 1571728600000)
+++ stellardb/6.0/template-json/files/graphconf.toml	(date 1571728600000)
@@ -1,6 +0,0 @@
-[[template]]
-src = "graphconf.xml.tmpl"
-dest = "/etc/stellardb/conf/graphconf.xml"
-check_cmd = "/bin/true"
-reload_cmd = "/bin/true"
-keys = [ "/" ]
\ No newline at end of file
Index: stellardb/6.0/template-json/files/graphconf.xml.tmpl
===================================================================
--- stellardb/6.0/template-json/files/graphconf.xml.tmpl	(date 1571652042000)
+++ stellardb/6.0/template-json/files/graphconf.xml.tmpl	(date 1571652042000)
@@ -1,63 +0,0 @@
-<?xml version="1.0"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-
-<configuration>
-
-  <property>
-    <name>graph.data.dirs</name>
-    <value>/var/data/stellardb/graph</value>
-  </property>
-
-  <property>
-    <name>graph.raft.dirs</name>
-    <value>/var/data/stellardb/raft</value>
-  </property>
-
-  <property>
-    <name>graph.zk.quorum</name>
-    {{- $ZK_QUORUM := split (getv "/zookeeper_client_config/zookeeper_addresses" "") "," }}
-    <value>{{join $ZK_QUORUM (printf ":%s," (getv "/zookeeper_client_config/zookeeper_port" "2181"))}}:{{(getv "/zookeeper_client_config/zookeeper_port" "2181")}}</value>
-  </property>
-
-  <property>
-    <name>graph.master.port</name>
-    <value>30909</value>
-  </property>
-
-  <property>
-    <name>graph.master.ui.port</name>
-    <value>50088</value>
-  </property>
-
-  <property>
-    <name>graph.worker.port</name>
-    <value>30815</value>
-  </property>
-
-  <property>
-    <name>graph.worker.ui.port</name>
-    <value>50089</value>
-  </property>
-
-  <property>
-    <name>graph.raft.server.port</name>
-    <value>1998</value>
-  </property>
-
-  {{- range gets "/graph_conf/*" }}
-  <property>
-    <name>{{base .Key}}</name>
-    <value>{{.Value}}</value>
-  </property>
-  {{- end }}
-
-</configuration>
-
-
-
-
-
-
-
-
-
Index: stellardb/6.0/template-json/files/graphconf.xml.tmpl
===================================================================
--- stellardb/6.0/template-json/files/graphconf.xml.tmpl	(date 1571728600000)
+++ stellardb/6.0/template-json/files/graphconf.xml.tmpl	(date 1571728600000)
@@ -1,63 +0,0 @@
-<?xml version="1.0"?>
-<?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
-
-<configuration>
-
-  <property>
-    <name>graph.data.dirs</name>
-    <value>/var/data/stellardb/graph</value>
-  </property>
-
-  <property>
-    <name>graph.raft.dirs</name>
-    <value>/var/data/stellardb/raft</value>
-  </property>
-
-  <property>
-    <name>graph.zk.quorum</name>
-    {{- $ZK_QUORUM := split (getv "/zookeeper_client_config/zookeeper_addresses" "") "," }}
-    <value>{{join $ZK_QUORUM (printf ":%s," (getv "/zookeeper_client_config/zookeeper_port" "2181"))}}:{{(getv "/zookeeper_client_config/zookeeper_port" "2181")}}</value>
-  </property>
-
-  <property>
-    <name>graph.master.port</name>
-    <value>30909</value>
-  </property>
-
-  <property>
-    <name>graph.master.ui.port</name>
-    <value>50088</value>
-  </property>
-
-  <property>
-    <name>graph.worker.port</name>
-    <value>30815</value>
-  </property>
-
-  <property>
-    <name>graph.worker.ui.port</name>
-    <value>50089</value>
-  </property>
-
-  <property>
-    <name>graph.raft.server.port</name>
-    <value>1998</value>
-  </property>
-
-  {{- range gets "/graph_conf/*" }}
-  <property>
-    <name>{{base .Key}}</name>
-    <value>{{.Value}}</value>
-  </property>
-  {{- end }}
-
-</configuration>
-
-
-
-
-
-
-
-
-
Index: stellardb/6.0/template-json/stellardb-main.jsonnet
===================================================================
--- stellardb/6.0/template-json/stellardb-main.jsonnet	(date 1571652042000)
+++ stellardb/6.0/template-json/stellardb-main.jsonnet	(date 1571652042000)
@@ -1,68 +0,0 @@
-// Copyright 2016 Transwarp Inc. All rights reserved.
-
-// import application function library
-local app = import '../../../applib/app.libsonnet';
-local kube = import '../../../applib/kube.libsonnet';
-
-local stellardb = import './stellardb.jsonnet';
-
-// user-defined data
-local default_config = import 'config.jsonnet';
-
-local configmapfiles = {
-  'tdh-env.toml': importstr '../../../transwarp-commonlib/5.2/files/tdh-env.toml',
-  'tdh-env.sh.tmpl': importstr '../../../transwarp-commonlib/5.2/files/tdh-env.sh.tmpl',
-  'graphconf.toml': importstr 'files/graphconf.toml',
-  'graphconf.xml.tmpl': importstr 'files/graphconf.xml.tmpl',
-};
-local configmapfiles_md5 = std.md5(std.toString(configmapfiles));
-
-function(config={})
-  local overall_config = std.mergePatch(default_config, config);
-  local confd_config = std.mergePatch(
-    std.mergePatch(stellardb.common.configs.shared_kv(overall_config), overall_config.Transwarp_Config),
-    overall_config.Advance_Config
-  );
-  local configmap = configmapfiles {
-    'stellardb-confd.conf': std.manifestJsonEx(confd_config, '  '),
-  };
-  local configmap_md5 = configmapfiles_md5 + std.md5(std.toString(confd_config));
-  {
-    'stellardb-entrypoint-configmap.json':
-      kube.v1.ConfigMap(name='stellardb-entrypoint-', moduleName='stellardb-entrypoint', config=overall_config) {
-        data: {
-          'entrypoint.sh': importstr 'files/entrypoint.sh',
-        },
-      },
-
-    'stellardb-confd-conf-configmap.json':
-      kube.v1.ConfigMap(name='stellardb-confd-conf-', moduleName='stellardb-confd-conf', config=overall_config) {
-        data: configmap,
-      },
-
-    'stellardb-master-deployment.json':
-      local env = stellardb.common.configs.shared_env(overall_config);
-      stellardb.master.deployment('stellardb-master', overall_config { configmap_md5: configmap_md5 }, env),
-
-    'stellardb-master-hl-svc.json':
-      stellardb.master.headless_svc('stellardb-master', overall_config),
-
-    'stellardb-master-svc.json':
-      stellardb.master.svc('stellardb-master', overall_config),
-
-    'stellardb-worker-statefulset.json':
-      local env = stellardb.common.configs.shared_env(overall_config);
-      stellardb.worker.statefulset('stellardb-worker', overall_config { configmap_md5: configmap_md5 }, env),
-
-    'stellardb-worker-hl-svc.json':
-      stellardb.worker.headless_svc('stellardb-worker', overall_config),
-
-    'stellardb-worker-svc.json':
-      stellardb.worker.svc('stellardb-worker', overall_config),
-
-    'dummy-svc.json': kube.v1.DummyService(providesInfo={
-      stellardb_CLIENT_CONFIG: {
-        immediate_value: {},
-      },
-    }, config=overall_config),
-  }
Index: stellardb/6.0/template-json/stellardb-main.jsonnet
===================================================================
--- stellardb/6.0/template-json/stellardb-main.jsonnet	(date 1571728600000)
+++ stellardb/6.0/template-json/stellardb-main.jsonnet	(date 1571728600000)
@@ -1,68 +0,0 @@
-// Copyright 2016 Transwarp Inc. All rights reserved.
-
-// import application function library
-local app = import '../../../applib/app.libsonnet';
-local kube = import '../../../applib/kube.libsonnet';
-
-local stellardb = import './stellardb.jsonnet';
-
-// user-defined data
-local default_config = import 'config.jsonnet';
-
-local configmapfiles = {
-  'tdh-env.toml': importstr '../../../transwarp-commonlib/5.2/files/tdh-env.toml',
-  'tdh-env.sh.tmpl': importstr '../../../transwarp-commonlib/5.2/files/tdh-env.sh.tmpl',
-  'graphconf.toml': importstr 'files/graphconf.toml',
-  'graphconf.xml.tmpl': importstr 'files/graphconf.xml.tmpl',
-};
-local configmapfiles_md5 = std.md5(std.toString(configmapfiles));
-
-function(config={})
-  local overall_config = std.mergePatch(default_config, config);
-  local confd_config = std.mergePatch(
-    std.mergePatch(stellardb.common.configs.shared_kv(overall_config), overall_config.Transwarp_Config),
-    overall_config.Advance_Config
-  );
-  local configmap = configmapfiles {
-    'stellardb-confd.conf': std.manifestJsonEx(confd_config, '  '),
-  };
-  local configmap_md5 = configmapfiles_md5 + std.md5(std.toString(confd_config));
-  {
-    'stellardb-entrypoint-configmap.json':
-      kube.v1.ConfigMap(name='stellardb-entrypoint-', moduleName='stellardb-entrypoint', config=overall_config) {
-        data: {
-          'entrypoint.sh': importstr 'files/entrypoint.sh',
-        },
-      },
-
-    'stellardb-confd-conf-configmap.json':
-      kube.v1.ConfigMap(name='stellardb-confd-conf-', moduleName='stellardb-confd-conf', config=overall_config) {
-        data: configmap,
-      },
-
-    'stellardb-master-deployment.json':
-      local env = stellardb.common.configs.shared_env(overall_config);
-      stellardb.master.deployment('stellardb-master', overall_config { configmap_md5: configmap_md5 }, env),
-
-    'stellardb-master-hl-svc.json':
-      stellardb.master.headless_svc('stellardb-master', overall_config),
-
-    'stellardb-master-svc.json':
-      stellardb.master.svc('stellardb-master', overall_config),
-
-    'stellardb-worker-statefulset.json':
-      local env = stellardb.common.configs.shared_env(overall_config);
-      stellardb.worker.statefulset('stellardb-worker', overall_config { configmap_md5: configmap_md5 }, env),
-
-    'stellardb-worker-hl-svc.json':
-      stellardb.worker.headless_svc('stellardb-worker', overall_config),
-
-    'stellardb-worker-svc.json':
-      stellardb.worker.svc('stellardb-worker', overall_config),
-
-    'dummy-svc.json': kube.v1.DummyService(providesInfo={
-      stellardb_CLIENT_CONFIG: {
-        immediate_value: {},
-      },
-    }, config=overall_config),
-  }
Index: stellardb/6.0/template-json/stellardb.jsonnet
===================================================================
--- stellardb/6.0/template-json/stellardb.jsonnet	(date 1571652042000)
+++ stellardb/6.0/template-json/stellardb.jsonnet	(date 1571652042000)
@@ -1,249 +0,0 @@
-// Copyrght 2016 Transwarp Inc. All rights reserved.
-
-local app = import '../../../applib/app.libsonnet';
-local kube = import '../../../applib/kube.libsonnet';
-
-{
-  common:: {
-    configs:: {
-      shared_kv(config): {
-        zookeeper_client_config: config.ZOOKEEPER_CLIENT_CONFIG,
-        inceptor_client_config: config.INCEPTOR_CLIENT_CONFIG,
-        graph_conf: config.Advance_Config.graph_conf,
-      },
-      shared_env(config): [
-        { name: 'MSL_TLS_SERVER_URL', value: config.Transwarp_MSL_License_Address },
-      ],
-    },
-    configMap:: {
-      volumeMounts(config):: [
-        { name: 'stellardb-entrypoint', mountPath: '/boot' },
-        { name: 'stellardb-confd-conf', mountPath: '/etc/confd' },
-      ],
-
-      volumes(config):: [
-        {
-          name: 'stellardb-entrypoint',
-          configMap: {
-            name: 'stellardb-entrypoint-' + config.Transwarp_Install_ID,
-            items: [
-              { key: 'entrypoint.sh', path: 'entrypoint.sh', mode: 493 },
-            ],
-          },
-        },
-        {
-          name: 'stellardb-confd-conf',
-          configMap: {
-            name: 'stellardb-confd-conf-' + config.Transwarp_Install_ID,
-            items: [
-              { key: 'stellardb-confd.conf', path: 'stellardb-confd.conf' },
-              { key: 'tdh-env.toml', path: 'conf.d/tdh-env.toml' },
-              { key: 'tdh-env.sh.tmpl', path: 'templates/tdh-env.sh.tmpl' },
-              { key: 'graphconf.xml.tmpl', path: 'templates/graphconf.xml.tmpl' },
-              { key: 'graphconf.toml', path: 'conf.d/graphconf.toml' },
-
-            ],
-          },
-        },
-      ],
-    },
-  },
-
-  master:: {
-    deployment(_name, user_config, env)::
-      local config = user_config {
-        Transwarp_Affinity+: kube.NodeAntiAffinityAnnotations(config, moduleName=_name),
-        Transwarp_Configmap_MD5: config.configmap_md5,
-      };
-      kube.tos.Deployment(
-        kube['extensions/v1beta1'].Deployment(name=_name + '-', moduleName=_name, config=config) {
-          spec+: {
-            replicas: 1,
-            strategy: kube['extensions/v1beta1'].DeploymentStrategy(config.App.master.update_strategy_configs),
-            template+: {
-              spec+: {
-                hostNetwork: config.App.master.use_host_network,
-                priorityClassName: kube.v1.ConvertPriorityClassName(config.App.master.priority),
-                containers: [
-                  kube.v1.PodContainer(_name) {
-                    image: config.App.master.image,
-                    readinessProbe: {
-                      httpGet: {
-                        port: 50088,
-                        path: '/index.html',
-                      },
-                    },
-                    args: ['/boot/entrypoint.sh', 'STELLARDB_MASTER'],
-                    env: env + app.rc_env(config.App.master.env_list, []),
-                    resources: kube.v1.ContainerResourcesV2(config.App.master.resources),
-                    [if config.App.master.use_host_network then 'ports']: [{
-                      hostPort: 50088,
-                      containerPort: 50088,
-                    }],
-                    volumeMounts: [
-                      { mountPath: '/var/log/stellardb', name: 'log' },
-                    ] + $.common.configMap.volumeMounts(config),
-                  },
-                ],
-                volumes: [
-                  kube.v1.TosDisk(name='log', storageConfig=config.App.master.resources.storage.log),
-                ] + $.common.configMap.volumes(config),
-              },
-            },
-          },
-        },
-        config
-      ),
-
-    headless_svc(_name, config)::
-      kube.v1.HeadlessService(name=_name + '-hl-', moduleName=_name + '-hl', selectorModuleName=_name, config=config) {
-        metadata+: {
-          annotations+: {
-            'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true',
-          },
-        },
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-master-ui',
-              port: 50088,
-              protocol: 'TCP',
-              targetPort: 50088,
-            },
-            {
-              name: 'stellardb-master',
-              port: 30909,
-              protocol: 'TCP',
-              targetPort: 30909,
-            },
-            {
-              name: 'stellardb-raft',
-              port: 1998,
-              protocol: 'TCP',
-              targetPort: 1998,
-            },
-          ],
-        },
-      },
-
-    svc(_name, config)::
-      kube.v1.NodePortService(name=_name + '-', moduleName=_name, config=config) {
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-master-ui',
-              port: 50088,
-              protocol: 'TCP',
-              targetPort: 50088,
-            },
-          ],
-        },
-      },
-
-  },
-
-  worker:: {
-    statefulset(_name, user_config, env)::
-      local config = user_config {
-        Transwarp_Affinity+: kube.NodeAntiAffinityAnnotations(config, moduleName=_name),
-        Transwarp_Configmap_MD5: config.configmap_md5,
-      };
-      kube.tos.StatefulSet(
-        kube['apps/v1beta1'].StatefulSet(name=_name + '-', moduleName=_name, config=config) {
-          spec+: {
-            replicas: config.App.worker.replicas,
-            template+: {
-              metadata+: {
-                annotations+: { 'pod.alpha.kubernetes.io/initialized': 'true' },
-              },
-              spec+: {
-                terminationGracePeriodSeconds: 0,
-                hostNetwork: config.App.worker.use_host_network,
-                priorityClassName: kube.v1.ConvertPriorityClassName(app.parseInt(config.App.worker.priority)),
-                containers: [
-                  kube.v1.PodContainer(_name) {
-                    image: config.App.worker.image,
-                    readinessProbe: {
-                      httpGet: {
-                        port: 50089,
-                        path: '/index.html',
-                      },
-                      initialDelaySeconds: 60,
-                    },
-                    args: ['/boot/entrypoint.sh', 'STELLARDB_WORKER'],
-                    env: env + app.rc_env(config.App.worker.env_list, []),
-                    resources: kube.v1.ContainerResourcesV2(config.App.worker.resources),
-                    [if config.App.worker.use_host_network then 'ports']: [{
-                      hostPort: 50089,
-                      containerPort: 50089,
-                    }],
-                    volumeMounts: [
-                      { mountPath: '/var/log/stellardb', name: 'log' },
-                      { mountPath: '/var/data/stellardb', name: 'data' },
-                    ] + $.common.configMap.volumeMounts(config),
-                  },
-                ],
-                volumes: [
-                  kube.v1.TosDisk(name='log', storageConfig=config.App.worker.resources.storage.log),
-                ] + $.common.configMap.volumes(config),
-              },
-            },
-            volumeClaimTemplates: [
-              kube.v1.PersistentVolumeClaim(name='data',
-                                            moduleName=_name,
-                                            storageConfig=config.App.worker.resources.storage.data,
-                                            config=config),
-            ],
-          },
-        },
-        config
-      ),
-
-    headless_svc(_name, config)::
-      kube.v1.HeadlessService(name=_name + '-hl-', moduleName=_name + '-hl', selectorModuleName=_name, config=config) {
-        metadata+: {
-          annotations+: {
-            'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true',
-          },
-        },
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-worker',
-              port: 30815,
-              protocol: 'TCP',
-              targetPort: 30815,
-            },
-            {
-              name: 'stellardb-worker-ui',
-              port: 50089,
-              protocol: 'TCP',
-              targetPort: 50089,
-            },
-            {
-              name: 'stellardb-raft',
-              port: 1998,
-              protocol: 'TCP',
-              targetPort: 1998,
-            },
-          ],
-        },
-      },
-
-    svc(_name, config)::
-      kube.v1.NodePortService(name=_name + '-', moduleName=_name, config=config) {
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-worker-ui',
-              port: 50089,
-              protocol: 'TCP',
-              targetPort: 50089,
-            },
-          ],
-        },
-      },
-
-  },
-
-}
Index: stellardb/6.0/template-json/stellardb.jsonnet
===================================================================
--- stellardb/6.0/template-json/stellardb.jsonnet	(date 1571728600000)
+++ stellardb/6.0/template-json/stellardb.jsonnet	(date 1571728600000)
@@ -1,249 +0,0 @@
-// Copyrght 2016 Transwarp Inc. All rights reserved.
-
-local app = import '../../../applib/app.libsonnet';
-local kube = import '../../../applib/kube.libsonnet';
-
-{
-  common:: {
-    configs:: {
-      shared_kv(config): {
-        zookeeper_client_config: config.ZOOKEEPER_CLIENT_CONFIG,
-        inceptor_client_config: config.INCEPTOR_CLIENT_CONFIG,
-        graph_conf: config.Advance_Config.graph_conf,
-      },
-      shared_env(config): [
-        { name: 'MSL_TLS_SERVER_URL', value: config.Transwarp_MSL_License_Address },
-      ],
-    },
-    configMap:: {
-      volumeMounts(config):: [
-        { name: 'stellardb-entrypoint', mountPath: '/boot' },
-        { name: 'stellardb-confd-conf', mountPath: '/etc/confd' },
-      ],
-
-      volumes(config):: [
-        {
-          name: 'stellardb-entrypoint',
-          configMap: {
-            name: 'stellardb-entrypoint-' + config.Transwarp_Install_ID,
-            items: [
-              { key: 'entrypoint.sh', path: 'entrypoint.sh', mode: 493 },
-            ],
-          },
-        },
-        {
-          name: 'stellardb-confd-conf',
-          configMap: {
-            name: 'stellardb-confd-conf-' + config.Transwarp_Install_ID,
-            items: [
-              { key: 'stellardb-confd.conf', path: 'stellardb-confd.conf' },
-              { key: 'tdh-env.toml', path: 'conf.d/tdh-env.toml' },
-              { key: 'tdh-env.sh.tmpl', path: 'templates/tdh-env.sh.tmpl' },
-              { key: 'graphconf.xml.tmpl', path: 'templates/graphconf.xml.tmpl' },
-              { key: 'graphconf.toml', path: 'conf.d/graphconf.toml' },
-
-            ],
-          },
-        },
-      ],
-    },
-  },
-
-  master:: {
-    deployment(_name, user_config, env)::
-      local config = user_config {
-        Transwarp_Affinity+: kube.NodeAntiAffinityAnnotations(config, moduleName=_name),
-        Transwarp_Configmap_MD5: config.configmap_md5,
-      };
-      kube.tos.Deployment(
-        kube['extensions/v1beta1'].Deployment(name=_name + '-', moduleName=_name, config=config) {
-          spec+: {
-            replicas: 1,
-            strategy: kube['extensions/v1beta1'].DeploymentStrategy(config.App.master.update_strategy_configs),
-            template+: {
-              spec+: {
-                hostNetwork: config.App.master.use_host_network,
-                priorityClassName: kube.v1.ConvertPriorityClassName(config.App.master.priority),
-                containers: [
-                  kube.v1.PodContainer(_name) {
-                    image: config.App.master.image,
-                    readinessProbe: {
-                      httpGet: {
-                        port: 50088,
-                        path: '/index.html',
-                      },
-                    },
-                    args: ['/boot/entrypoint.sh', 'STELLARDB_MASTER'],
-                    env: env + app.rc_env(config.App.master.env_list, []),
-                    resources: kube.v1.ContainerResourcesV2(config.App.master.resources),
-                    [if config.App.master.use_host_network then 'ports']: [{
-                      hostPort: 50088,
-                      containerPort: 50088,
-                    }],
-                    volumeMounts: [
-                      { mountPath: '/var/log/stellardb', name: 'log' },
-                    ] + $.common.configMap.volumeMounts(config),
-                  },
-                ],
-                volumes: [
-                  kube.v1.TosDisk(name='log', storageConfig=config.App.master.resources.storage.log),
-                ] + $.common.configMap.volumes(config),
-              },
-            },
-          },
-        },
-        config
-      ),
-
-    headless_svc(_name, config)::
-      kube.v1.HeadlessService(name=_name + '-hl-', moduleName=_name + '-hl', selectorModuleName=_name, config=config) {
-        metadata+: {
-          annotations+: {
-            'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true',
-          },
-        },
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-master-ui',
-              port: 50088,
-              protocol: 'TCP',
-              targetPort: 50088,
-            },
-            {
-              name: 'stellardb-master',
-              port: 30909,
-              protocol: 'TCP',
-              targetPort: 30909,
-            },
-            {
-              name: 'stellardb-raft',
-              port: 1998,
-              protocol: 'TCP',
-              targetPort: 1998,
-            },
-          ],
-        },
-      },
-
-    svc(_name, config)::
-      kube.v1.NodePortService(name=_name + '-', moduleName=_name, config=config) {
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-master-ui',
-              port: 50088,
-              protocol: 'TCP',
-              targetPort: 50088,
-            },
-          ],
-        },
-      },
-
-  },
-
-  worker:: {
-    statefulset(_name, user_config, env)::
-      local config = user_config {
-        Transwarp_Affinity+: kube.NodeAntiAffinityAnnotations(config, moduleName=_name),
-        Transwarp_Configmap_MD5: config.configmap_md5,
-      };
-      kube.tos.StatefulSet(
-        kube['apps/v1beta1'].StatefulSet(name=_name + '-', moduleName=_name, config=config) {
-          spec+: {
-            replicas: config.App.worker.replicas,
-            template+: {
-              metadata+: {
-                annotations+: { 'pod.alpha.kubernetes.io/initialized': 'true' },
-              },
-              spec+: {
-                terminationGracePeriodSeconds: 0,
-                hostNetwork: config.App.worker.use_host_network,
-                priorityClassName: kube.v1.ConvertPriorityClassName(app.parseInt(config.App.worker.priority)),
-                containers: [
-                  kube.v1.PodContainer(_name) {
-                    image: config.App.worker.image,
-                    readinessProbe: {
-                      httpGet: {
-                        port: 50089,
-                        path: '/index.html',
-                      },
-                      initialDelaySeconds: 60,
-                    },
-                    args: ['/boot/entrypoint.sh', 'STELLARDB_WORKER'],
-                    env: env + app.rc_env(config.App.worker.env_list, []),
-                    resources: kube.v1.ContainerResourcesV2(config.App.worker.resources),
-                    [if config.App.worker.use_host_network then 'ports']: [{
-                      hostPort: 50089,
-                      containerPort: 50089,
-                    }],
-                    volumeMounts: [
-                      { mountPath: '/var/log/stellardb', name: 'log' },
-                      { mountPath: '/var/data/stellardb', name: 'data' },
-                    ] + $.common.configMap.volumeMounts(config),
-                  },
-                ],
-                volumes: [
-                  kube.v1.TosDisk(name='log', storageConfig=config.App.worker.resources.storage.log),
-                ] + $.common.configMap.volumes(config),
-              },
-            },
-            volumeClaimTemplates: [
-              kube.v1.PersistentVolumeClaim(name='data',
-                                            moduleName=_name,
-                                            storageConfig=config.App.worker.resources.storage.data,
-                                            config=config),
-            ],
-          },
-        },
-        config
-      ),
-
-    headless_svc(_name, config)::
-      kube.v1.HeadlessService(name=_name + '-hl-', moduleName=_name + '-hl', selectorModuleName=_name, config=config) {
-        metadata+: {
-          annotations+: {
-            'service.alpha.kubernetes.io/tolerate-unready-endpoints': 'true',
-          },
-        },
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-worker',
-              port: 30815,
-              protocol: 'TCP',
-              targetPort: 30815,
-            },
-            {
-              name: 'stellardb-worker-ui',
-              port: 50089,
-              protocol: 'TCP',
-              targetPort: 50089,
-            },
-            {
-              name: 'stellardb-raft',
-              port: 1998,
-              protocol: 'TCP',
-              targetPort: 1998,
-            },
-          ],
-        },
-      },
-
-    svc(_name, config)::
-      kube.v1.NodePortService(name=_name + '-', moduleName=_name, config=config) {
-        spec+: {
-          ports: [
-            {
-              name: 'stellardb-worker-ui',
-              port: 50089,
-              protocol: 'TCP',
-              targetPort: 50089,
-            },
-          ],
-        },
-      },
-
-  },
-
-}
Index: stellardb/6.0/template-json/test-files/config0.jsonnet
===================================================================
--- stellardb/6.0/template-json/test-files/config0.jsonnet	(date 1571652042000)
+++ stellardb/6.0/template-json/test-files/config0.jsonnet	(date 1571652042000)
@@ -1,20 +0,0 @@
-{
-  // from tos-market
-  TosVersion: '1.9',
-  LICENSE_ADDRESS: '172.16.1.41:2181',
-  Transwarp_App_Name: 'inceptor',
-  Transwarp_DEBUG: true,
-  Transwarp_Alias: 'inceptor_ews1100',
-  Transwarp_Registry_Server: '172.16.1.41:5000',
-  Transwarp_Install_ID: '1100',
-  Transwarp_App_Scope: 'namespace',
-  Transwarp_Realm: 'TOS',
-  Transwarp_App_Labels: {
-    scope: 'tdh',
-    version: 'v2',
-    'transwarp.app': 'inceptor',
-  },
-  Transwarp_Install_Namespace: 'u5003',
-  Transwarp_Principal_Suffix: 'transwarp.local',
-  Transwarp_Namespace_Owner: 'flannel',
-}
Index: stellardb/6.0/template-json/test-files/config0.jsonnet
===================================================================
--- stellardb/6.0/template-json/test-files/config0.jsonnet	(date 1571728600000)
+++ stellardb/6.0/template-json/test-files/config0.jsonnet	(date 1571728600000)
@@ -1,20 +0,0 @@
-{
-  // from tos-market
-  TosVersion: '1.9',
-  LICENSE_ADDRESS: '172.16.1.41:2181',
-  Transwarp_App_Name: 'inceptor',
-  Transwarp_DEBUG: true,
-  Transwarp_Alias: 'inceptor_ews1100',
-  Transwarp_Registry_Server: '172.16.1.41:5000',
-  Transwarp_Install_ID: '1100',
-  Transwarp_App_Scope: 'namespace',
-  Transwarp_Realm: 'TOS',
-  Transwarp_App_Labels: {
-    scope: 'tdh',
-    version: 'v2',
-    'transwarp.app': 'inceptor',
-  },
-  Transwarp_Install_Namespace: 'u5003',
-  Transwarp_Principal_Suffix: 'transwarp.local',
-  Transwarp_Namespace_Owner: 'flannel',
-}
Index: stellardb/6.0/template-json/test-files/config0.jsonnet.golden
===================================================================
--- stellardb/6.0/template-json/test-files/config0.jsonnet.golden	(date 1571652042000)
+++ stellardb/6.0/template-json/test-files/config0.jsonnet.golden	(date 1571652042000)
@@ -1,573 +0,0 @@
-{
-   "dummy-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "transwarp.meta": "{\"provides\": {\"stellardb_CLIENT_CONFIG\": {\"immediate_value\": { }}}}"
-         },
-         "labels": {
-            "scope": "tdh",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.app": "inceptor",
-            "transwarp.install": "1100",
-            "transwarp.meta": "true",
-            "transwarp.name": "app-dummy",
-            "transwarp.scope": "namespace",
-            "transwarp.svc.scope": "app",
-            "version": "v2"
-         },
-         "name": "app-dummy-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "port": 5000,
-               "targetPort": 5000
-            }
-         ],
-         "selector": { }
-      }
-   },
-   "stellardb-confd-conf-configmap.json": {
-      "apiVersion": "v1",
-      "data": {
-         "graphconf.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
-         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>graph.data.dirs</name>\n    <value>/var/data/stellardb/graph</value>\n  </property>\n\n  <property>\n    <name>graph.raft.dirs</name>\n    <value>/var/data/stellardb/raft</value>\n  </property>\n\n  <property>\n    <name>graph.zk.quorum</name>\n    {{- $ZK_QUORUM := split (getv \"/zookeeper_client_config/zookeeper_addresses\" \"\") \",\" }}\n    <value>{{join $ZK_QUORUM (printf \":%s,\" (getv \"/zookeeper_client_config/zookeeper_port\" \"2181\"))}}:{{(getv \"/zookeeper_client_config/zookeeper_port\" \"2181\")}}</value>\n  </property>\n\n  <property>\n    <name>graph.master.port</name>\n    <value>30909</value>\n  </property>\n\n  <property>\n    <name>graph.master.ui.port</name>\n    <value>50088</value>\n  </property>\n\n  <property>\n    <name>graph.worker.port</name>\n    <value>30815</value>\n  </property>\n\n  <property>\n    <name>graph.worker.ui.port</name>\n    <value>50089</value>\n  </property>\n\n  <property>\n    <name>graph.raft.server.port</name>\n    <value>1998</value>\n  </property>\n\n  {{- range gets \"/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n</configuration>\n\n\n\n\n\n\n\n\n\n",
-         "stellardb-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"graph_conf\": {\n    \"graph.zk.base_path\": \"/graph\"\n  },\n  \"inceptor_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
-         "tdh-env.sh.tmpl": "#!/bin/bash\nset -x\n\nsetup_keytab() {\n  echo \"setup_keytab\"\n{{ if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  # link_keytab\n  export KRB_MOUNTED_CONF_PATH=${KRB_MOUNTED_CONF_PATH:-/var/run/secrets/transwarp.io/tosvolume/keytab/krb5.conf}\n  export KRB_MOUNTED_KEYTAB=${KRB_MOUNTED_KEYTAB:-/var/run/secrets/transwarp.io/tosvolume/keytab/keytab}\n  if [ ! -f $KRB_MOUNTED_CONF_PATH ]; then\n    echo \"Expect krb5.conf at $KRB_MOUNTED_CONF_PATH but not found!\"\n    exit 1\n  fi\n  if [ ! -f $KRB_MOUNTED_KEYTAB ]; then\n    echo \"Expect keytab file at $KRB_MOUNTED_KEYTAB but not found!\"\n    exit 1\n  fi\n  ln -svf $KRB_MOUNTED_CONF_PATH /etc/krb5.conf\n  [ -d /etc/keytabs ] || mkdir -p /etc/keytabs\n  ln -svf $KRB_MOUNTED_KEYTAB /etc/keytabs/keytab\n{{ end }}\n}\n",
-         "tdh-env.toml": "[[template]]\nsrc = \"tdh-env.sh.tmpl\"\ndest = \"/etc/tdh-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]"
-      },
-      "kind": "ConfigMap",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-confd-conf"
-         },
-         "name": "stellardb-confd-conf-1100"
-      }
-   },
-   "stellardb-entrypoint-configmap.json": {
-      "apiVersion": "v1",
-      "data": {
-         "entrypoint.sh": "#!/bin/bash\n\n\nmkdir -p /etc/stellardb/conf\n\nconfd -onetime -backend file -prefix / -file /etc/confd/stellardb-confd.conf\n\n[ -s /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n\nwhile true\ndo\n    echo \"StellarDB Is Running...\"\n    echo \"Sleep 60s\"\n    sleep 60s\ndone"
-      },
-      "kind": "ConfigMap",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-entrypoint"
-         },
-         "name": "stellardb-entrypoint-1100"
-      }
-   },
-   "stellardb-master-deployment.json": {
-      "apiVersion": "extensions/v1beta1",
-      "kind": "Deployment",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "name": "stellardb-master-1100"
-      },
-      "spec": {
-         "replicas": 1,
-         "selector": {
-            "matchLabels": {
-               "transwarp.install": "1100",
-               "transwarp.name": "stellardb-master"
-            }
-         },
-         "strategy": {
-            "type": "Recreate"
-         },
-         "template": {
-            "metadata": {
-               "annotations": {
-                  "cni.networks": "overlay",
-                  "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "aff4a3be1c6ead5c85e621e7b2a429f570bd535b959b0be4152c05a1952c9dcc"
-               },
-               "labels": {
-                  "transwarp.alias": "inceptor_ews1100",
-                  "transwarp.install": "1100",
-                  "transwarp.name": "stellardb-master"
-               }
-            },
-            "spec": {
-               "affinity": {
-                  "podAntiAffinity": {
-                     "requiredDuringSchedulingIgnoredDuringExecution": [
-                        {
-                           "labelSelector": {
-                              "matchLabels": {
-                                 "transwarp.alias": "inceptor_ews1100",
-                                 "transwarp.install": "1100",
-                                 "transwarp.name": "stellardb-master"
-                              }
-                           },
-                           "namespaces": [
-                              "u5003"
-                           ],
-                           "topologyKey": "kubernetes.io/hostname"
-                        }
-                     ]
-                  }
-               },
-               "containers": [
-                  {
-                     "args": [
-                        "/boot/entrypoint.sh",
-                        "STELLARDB_MASTER"
-                     ],
-                     "env": [
-                        {
-                           "name": "MSL_TLS_SERVER_URL",
-                           "value": ""
-                        }
-                     ],
-                     "image": "172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final",
-                     "imagePullPolicy": "Always",
-                     "name": "stellardb-master",
-                     "readinessProbe": {
-                        "httpGet": {
-                           "path": "/index.html",
-                           "port": 50088
-                        }
-                     },
-                     "resources": {
-                        "limits": {
-                           "cpu": "2",
-                           "memory": "2Gi"
-                        },
-                        "requests": {
-                           "cpu": "2",
-                           "memory": "2Gi"
-                        }
-                     },
-                     "volumeMounts": [
-                        {
-                           "mountPath": "/var/log/stellardb",
-                           "name": "log"
-                        },
-                        {
-                           "mountPath": "/boot",
-                           "name": "stellardb-entrypoint"
-                        },
-                        {
-                           "mountPath": "/etc/confd",
-                           "name": "stellardb-confd-conf"
-                        }
-                     ]
-                  }
-               ],
-               "hostNetwork": false,
-               "priorityClassName": "low-priority",
-               "volumes": [
-                  {
-                     "name": "log",
-                     "tosDisk": {
-                        "accessMode": "ReadWriteOnce",
-                        "capability": "20Gi",
-                        "name": "log",
-                        "storageType": "silver"
-                     }
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "entrypoint.sh",
-                              "mode": 493,
-                              "path": "entrypoint.sh"
-                           }
-                        ],
-                        "name": "stellardb-entrypoint-1100"
-                     },
-                     "name": "stellardb-entrypoint"
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "stellardb-confd.conf",
-                              "path": "stellardb-confd.conf"
-                           },
-                           {
-                              "key": "tdh-env.toml",
-                              "path": "conf.d/tdh-env.toml"
-                           },
-                           {
-                              "key": "tdh-env.sh.tmpl",
-                              "path": "templates/tdh-env.sh.tmpl"
-                           },
-                           {
-                              "key": "graphconf.xml.tmpl",
-                              "path": "templates/graphconf.xml.tmpl"
-                           },
-                           {
-                              "key": "graphconf.toml",
-                              "path": "conf.d/graphconf.toml"
-                           }
-                        ],
-                        "name": "stellardb-confd-conf-1100"
-                     },
-                     "name": "stellardb-confd-conf"
-                  }
-               ]
-            }
-         }
-      }
-   },
-   "stellardb-master-hl-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
-         },
-         "labels": {
-            "k8s-app": "stellardb-master-hl",
-            "kubernetes.io/headless-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master-hl"
-         },
-         "name": "stellardb-master-hl-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "name": "stellardb-master-ui",
-               "port": 50088,
-               "protocol": "TCP",
-               "targetPort": 50088
-            },
-            {
-               "name": "stellardb-master",
-               "port": 30909,
-               "protocol": "TCP",
-               "targetPort": 30909
-            },
-            {
-               "name": "stellardb-raft",
-               "port": 1998,
-               "protocol": "TCP",
-               "targetPort": 1998
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         }
-      }
-   },
-   "stellardb-master-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "k8s-app": "stellardb-master",
-            "kubernetes.io/cluster-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "name": "stellardb-master-1100"
-      },
-      "spec": {
-         "ports": [
-            {
-               "name": "stellardb-master-ui",
-               "port": 50088,
-               "protocol": "TCP",
-               "targetPort": 50088
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "type": "NodePort"
-      }
-   },
-   "stellardb-worker-hl-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
-         },
-         "labels": {
-            "k8s-app": "stellardb-worker-hl",
-            "kubernetes.io/headless-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker-hl"
-         },
-         "name": "stellardb-worker-hl-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "name": "stellardb-worker",
-               "port": 30815,
-               "protocol": "TCP",
-               "targetPort": 30815
-            },
-            {
-               "name": "stellardb-worker-ui",
-               "port": 50089,
-               "protocol": "TCP",
-               "targetPort": 50089
-            },
-            {
-               "name": "stellardb-raft",
-               "port": 1998,
-               "protocol": "TCP",
-               "targetPort": 1998
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         }
-      }
-   },
-   "stellardb-worker-statefulset.json": {
-      "apiVersion": "apps/v1beta1",
-      "kind": "StatefulSet",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "name": "stellardb-worker-1100"
-      },
-      "spec": {
-         "podManagementPolicy": "Parallel",
-         "replicas": 3,
-         "selector": {
-            "matchLabels": {
-               "transwarp.install": "1100",
-               "transwarp.name": "stellardb-worker"
-            }
-         },
-         "serviceName": "stellardb-worker-1100",
-         "template": {
-            "metadata": {
-               "annotations": {
-                  "cni.networks": "overlay",
-                  "pod.alpha.kubernetes.io/initialized": "true",
-                  "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "aff4a3be1c6ead5c85e621e7b2a429f570bd535b959b0be4152c05a1952c9dcc"
-               },
-               "labels": {
-                  "transwarp.alias": "inceptor_ews1100",
-                  "transwarp.install": "1100",
-                  "transwarp.name": "stellardb-worker"
-               }
-            },
-            "spec": {
-               "affinity": {
-                  "podAntiAffinity": {
-                     "requiredDuringSchedulingIgnoredDuringExecution": [
-                        {
-                           "labelSelector": {
-                              "matchLabels": {
-                                 "transwarp.alias": "inceptor_ews1100",
-                                 "transwarp.install": "1100",
-                                 "transwarp.name": "stellardb-worker"
-                              }
-                           },
-                           "namespaces": [
-                              "u5003"
-                           ],
-                           "topologyKey": "kubernetes.io/hostname"
-                        }
-                     ]
-                  }
-               },
-               "containers": [
-                  {
-                     "args": [
-                        "/boot/entrypoint.sh",
-                        "STELLARDB_WORKER"
-                     ],
-                     "env": [
-                        {
-                           "name": "MSL_TLS_SERVER_URL",
-                           "value": ""
-                        }
-                     ],
-                     "image": "172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final",
-                     "imagePullPolicy": "Always",
-                     "name": "stellardb-worker",
-                     "readinessProbe": {
-                        "httpGet": {
-                           "path": "/index.html",
-                           "port": 50089
-                        },
-                        "initialDelaySeconds": 60
-                     },
-                     "resources": {
-                        "limits": {
-                           "cpu": "4",
-                           "memory": "16Gi"
-                        },
-                        "requests": {
-                           "cpu": "1",
-                           "memory": "8Gi"
-                        }
-                     },
-                     "volumeMounts": [
-                        {
-                           "mountPath": "/var/log/stellardb",
-                           "name": "log"
-                        },
-                        {
-                           "mountPath": "/var/data/stellardb",
-                           "name": "data"
-                        },
-                        {
-                           "mountPath": "/boot",
-                           "name": "stellardb-entrypoint"
-                        },
-                        {
-                           "mountPath": "/etc/confd",
-                           "name": "stellardb-confd-conf"
-                        }
-                     ]
-                  }
-               ],
-               "hostNetwork": false,
-               "priorityClassName": "low-priority",
-               "terminationGracePeriodSeconds": 0,
-               "volumes": [
-                  {
-                     "name": "log",
-                     "tosDisk": {
-                        "accessMode": "ReadWriteOnce",
-                        "capability": "20Gi",
-                        "name": "log",
-                        "storageType": "silver"
-                     }
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "entrypoint.sh",
-                              "mode": 493,
-                              "path": "entrypoint.sh"
-                           }
-                        ],
-                        "name": "stellardb-entrypoint-1100"
-                     },
-                     "name": "stellardb-entrypoint"
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "stellardb-confd.conf",
-                              "path": "stellardb-confd.conf"
-                           },
-                           {
-                              "key": "tdh-env.toml",
-                              "path": "conf.d/tdh-env.toml"
-                           },
-                           {
-                              "key": "tdh-env.sh.tmpl",
-                              "path": "templates/tdh-env.sh.tmpl"
-                           },
-                           {
-                              "key": "graphconf.xml.tmpl",
-                              "path": "templates/graphconf.xml.tmpl"
-                           },
-                           {
-                              "key": "graphconf.toml",
-                              "path": "conf.d/graphconf.toml"
-                           }
-                        ],
-                        "name": "stellardb-confd-conf-1100"
-                     },
-                     "name": "stellardb-confd-conf"
-                  }
-               ]
-            }
-         },
-         "updateStrategy": {
-            "type": "RollingUpdate"
-         },
-         "volumeClaimTemplates": [
-            {
-               "metadata": {
-                  "annotations": {
-                     "volume.beta.kubernetes.io/storage-class": "silver"
-                  },
-                  "labels": {
-                     "transwarp.alias": "inceptor_ews1100",
-                     "transwarp.install": "1100",
-                     "transwarp.name": "stellardb-worker"
-                  },
-                  "name": "data"
-               },
-               "spec": {
-                  "accessModes": [
-                     "ReadWriteOnce"
-                  ],
-                  "resources": {
-                     "requests": {
-                        "storage": "200Gi"
-                     }
-                  }
-               }
-            }
-         ]
-      }
-   },
-   "stellardb-worker-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "k8s-app": "stellardb-worker",
-            "kubernetes.io/cluster-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "name": "stellardb-worker-1100"
-      },
-      "spec": {
-         "ports": [
-            {
-               "name": "stellardb-worker-ui",
-               "port": 50089,
-               "protocol": "TCP",
-               "targetPort": 50089
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "type": "NodePort"
-      }
-   }
-}
Index: stellardb/6.0/template-json/test-files/config0.jsonnet.golden
===================================================================
--- stellardb/6.0/template-json/test-files/config0.jsonnet.golden	(date 1571728600000)
+++ stellardb/6.0/template-json/test-files/config0.jsonnet.golden	(date 1571728600000)
@@ -1,573 +0,0 @@
-{
-   "dummy-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "transwarp.meta": "{\"provides\": {\"stellardb_CLIENT_CONFIG\": {\"immediate_value\": { }}}}"
-         },
-         "labels": {
-            "scope": "tdh",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.app": "inceptor",
-            "transwarp.install": "1100",
-            "transwarp.meta": "true",
-            "transwarp.name": "app-dummy",
-            "transwarp.scope": "namespace",
-            "transwarp.svc.scope": "app",
-            "version": "v2"
-         },
-         "name": "app-dummy-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "port": 5000,
-               "targetPort": 5000
-            }
-         ],
-         "selector": { }
-      }
-   },
-   "stellardb-confd-conf-configmap.json": {
-      "apiVersion": "v1",
-      "data": {
-         "graphconf.toml": "[[template]]\nsrc = \"graphconf.xml.tmpl\"\ndest = \"/etc/stellardb/conf/graphconf.xml\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]",
-         "graphconf.xml.tmpl": "<?xml version=\"1.0\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n\n<configuration>\n\n  <property>\n    <name>graph.data.dirs</name>\n    <value>/var/data/stellardb/graph</value>\n  </property>\n\n  <property>\n    <name>graph.raft.dirs</name>\n    <value>/var/data/stellardb/raft</value>\n  </property>\n\n  <property>\n    <name>graph.zk.quorum</name>\n    {{- $ZK_QUORUM := split (getv \"/zookeeper_client_config/zookeeper_addresses\" \"\") \",\" }}\n    <value>{{join $ZK_QUORUM (printf \":%s,\" (getv \"/zookeeper_client_config/zookeeper_port\" \"2181\"))}}:{{(getv \"/zookeeper_client_config/zookeeper_port\" \"2181\")}}</value>\n  </property>\n\n  <property>\n    <name>graph.master.port</name>\n    <value>30909</value>\n  </property>\n\n  <property>\n    <name>graph.master.ui.port</name>\n    <value>50088</value>\n  </property>\n\n  <property>\n    <name>graph.worker.port</name>\n    <value>30815</value>\n  </property>\n\n  <property>\n    <name>graph.worker.ui.port</name>\n    <value>50089</value>\n  </property>\n\n  <property>\n    <name>graph.raft.server.port</name>\n    <value>1998</value>\n  </property>\n\n  {{- range gets \"/graph_conf/*\" }}\n  <property>\n    <name>{{base .Key}}</name>\n    <value>{{.Value}}</value>\n  </property>\n  {{- end }}\n\n</configuration>\n\n\n\n\n\n\n\n\n\n",
-         "stellardb-confd.conf": "{\n  \"Ingress\": {\n\n  },\n  \"Transwarp_Auto_Injected_Volumes\": [\n\n  ],\n  \"graph_conf\": {\n    \"graph.zk.base_path\": \"/graph\"\n  },\n  \"inceptor_client_config\": {\n\n  },\n  \"msl_plugin_config\": {\n    \"config\": {\n\n    },\n    \"enable\": false\n  },\n  \"security\": {\n    \"auth_type\": \"none\",\n    \"cas_client_config\": {\n\n    },\n    \"cas_plugin_enable\": \"false\",\n    \"guardian_client_config\": {\n      \"guardian_site\": {\n\n      }\n    },\n    \"guardian_plugin_enable\": \"false\",\n    \"guardian_principal_host\": \"tos\",\n    \"guardian_principal_user\": \"hive\",\n    \"sssd_plugin_enable\": \"false\"\n  },\n  \"zookeeper_client_config\": {\n\n  }\n}",
-         "tdh-env.sh.tmpl": "#!/bin/bash\nset -x\n\nsetup_keytab() {\n  echo \"setup_keytab\"\n{{ if eq (getv \"/security/auth_type\") \"kerberos\" }}\n  # link_keytab\n  export KRB_MOUNTED_CONF_PATH=${KRB_MOUNTED_CONF_PATH:-/var/run/secrets/transwarp.io/tosvolume/keytab/krb5.conf}\n  export KRB_MOUNTED_KEYTAB=${KRB_MOUNTED_KEYTAB:-/var/run/secrets/transwarp.io/tosvolume/keytab/keytab}\n  if [ ! -f $KRB_MOUNTED_CONF_PATH ]; then\n    echo \"Expect krb5.conf at $KRB_MOUNTED_CONF_PATH but not found!\"\n    exit 1\n  fi\n  if [ ! -f $KRB_MOUNTED_KEYTAB ]; then\n    echo \"Expect keytab file at $KRB_MOUNTED_KEYTAB but not found!\"\n    exit 1\n  fi\n  ln -svf $KRB_MOUNTED_CONF_PATH /etc/krb5.conf\n  [ -d /etc/keytabs ] || mkdir -p /etc/keytabs\n  ln -svf $KRB_MOUNTED_KEYTAB /etc/keytabs/keytab\n{{ end }}\n}\n",
-         "tdh-env.toml": "[[template]]\nsrc = \"tdh-env.sh.tmpl\"\ndest = \"/etc/tdh-env.sh\"\ncheck_cmd = \"/bin/true\"\nreload_cmd = \"/bin/true\"\nkeys = [ \"/\" ]"
-      },
-      "kind": "ConfigMap",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-confd-conf"
-         },
-         "name": "stellardb-confd-conf-1100"
-      }
-   },
-   "stellardb-entrypoint-configmap.json": {
-      "apiVersion": "v1",
-      "data": {
-         "entrypoint.sh": "#!/bin/bash\n\n\nmkdir -p /etc/stellardb/conf\n\nconfd -onetime -backend file -prefix / -file /etc/confd/stellardb-confd.conf\n\n[ -s /etc/tdh-env.sh ] && {\n  source /etc/tdh-env.sh\n  setup_keytab\n}\n\nwhile true\ndo\n    echo \"StellarDB Is Running...\"\n    echo \"Sleep 60s\"\n    sleep 60s\ndone"
-      },
-      "kind": "ConfigMap",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-entrypoint"
-         },
-         "name": "stellardb-entrypoint-1100"
-      }
-   },
-   "stellardb-master-deployment.json": {
-      "apiVersion": "extensions/v1beta1",
-      "kind": "Deployment",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "name": "stellardb-master-1100"
-      },
-      "spec": {
-         "replicas": 1,
-         "selector": {
-            "matchLabels": {
-               "transwarp.install": "1100",
-               "transwarp.name": "stellardb-master"
-            }
-         },
-         "strategy": {
-            "type": "Recreate"
-         },
-         "template": {
-            "metadata": {
-               "annotations": {
-                  "cni.networks": "overlay",
-                  "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "aff4a3be1c6ead5c85e621e7b2a429f570bd535b959b0be4152c05a1952c9dcc"
-               },
-               "labels": {
-                  "transwarp.alias": "inceptor_ews1100",
-                  "transwarp.install": "1100",
-                  "transwarp.name": "stellardb-master"
-               }
-            },
-            "spec": {
-               "affinity": {
-                  "podAntiAffinity": {
-                     "requiredDuringSchedulingIgnoredDuringExecution": [
-                        {
-                           "labelSelector": {
-                              "matchLabels": {
-                                 "transwarp.alias": "inceptor_ews1100",
-                                 "transwarp.install": "1100",
-                                 "transwarp.name": "stellardb-master"
-                              }
-                           },
-                           "namespaces": [
-                              "u5003"
-                           ],
-                           "topologyKey": "kubernetes.io/hostname"
-                        }
-                     ]
-                  }
-               },
-               "containers": [
-                  {
-                     "args": [
-                        "/boot/entrypoint.sh",
-                        "STELLARDB_MASTER"
-                     ],
-                     "env": [
-                        {
-                           "name": "MSL_TLS_SERVER_URL",
-                           "value": ""
-                        }
-                     ],
-                     "image": "172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final",
-                     "imagePullPolicy": "Always",
-                     "name": "stellardb-master",
-                     "readinessProbe": {
-                        "httpGet": {
-                           "path": "/index.html",
-                           "port": 50088
-                        }
-                     },
-                     "resources": {
-                        "limits": {
-                           "cpu": "2",
-                           "memory": "2Gi"
-                        },
-                        "requests": {
-                           "cpu": "2",
-                           "memory": "2Gi"
-                        }
-                     },
-                     "volumeMounts": [
-                        {
-                           "mountPath": "/var/log/stellardb",
-                           "name": "log"
-                        },
-                        {
-                           "mountPath": "/boot",
-                           "name": "stellardb-entrypoint"
-                        },
-                        {
-                           "mountPath": "/etc/confd",
-                           "name": "stellardb-confd-conf"
-                        }
-                     ]
-                  }
-               ],
-               "hostNetwork": false,
-               "priorityClassName": "low-priority",
-               "volumes": [
-                  {
-                     "name": "log",
-                     "tosDisk": {
-                        "accessMode": "ReadWriteOnce",
-                        "capability": "20Gi",
-                        "name": "log",
-                        "storageType": "silver"
-                     }
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "entrypoint.sh",
-                              "mode": 493,
-                              "path": "entrypoint.sh"
-                           }
-                        ],
-                        "name": "stellardb-entrypoint-1100"
-                     },
-                     "name": "stellardb-entrypoint"
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "stellardb-confd.conf",
-                              "path": "stellardb-confd.conf"
-                           },
-                           {
-                              "key": "tdh-env.toml",
-                              "path": "conf.d/tdh-env.toml"
-                           },
-                           {
-                              "key": "tdh-env.sh.tmpl",
-                              "path": "templates/tdh-env.sh.tmpl"
-                           },
-                           {
-                              "key": "graphconf.xml.tmpl",
-                              "path": "templates/graphconf.xml.tmpl"
-                           },
-                           {
-                              "key": "graphconf.toml",
-                              "path": "conf.d/graphconf.toml"
-                           }
-                        ],
-                        "name": "stellardb-confd-conf-1100"
-                     },
-                     "name": "stellardb-confd-conf"
-                  }
-               ]
-            }
-         }
-      }
-   },
-   "stellardb-master-hl-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
-         },
-         "labels": {
-            "k8s-app": "stellardb-master-hl",
-            "kubernetes.io/headless-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master-hl"
-         },
-         "name": "stellardb-master-hl-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "name": "stellardb-master-ui",
-               "port": 50088,
-               "protocol": "TCP",
-               "targetPort": 50088
-            },
-            {
-               "name": "stellardb-master",
-               "port": 30909,
-               "protocol": "TCP",
-               "targetPort": 30909
-            },
-            {
-               "name": "stellardb-raft",
-               "port": 1998,
-               "protocol": "TCP",
-               "targetPort": 1998
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         }
-      }
-   },
-   "stellardb-master-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "k8s-app": "stellardb-master",
-            "kubernetes.io/cluster-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "name": "stellardb-master-1100"
-      },
-      "spec": {
-         "ports": [
-            {
-               "name": "stellardb-master-ui",
-               "port": 50088,
-               "protocol": "TCP",
-               "targetPort": 50088
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-master"
-         },
-         "type": "NodePort"
-      }
-   },
-   "stellardb-worker-hl-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": {
-            "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
-         },
-         "labels": {
-            "k8s-app": "stellardb-worker-hl",
-            "kubernetes.io/headless-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker-hl"
-         },
-         "name": "stellardb-worker-hl-1100"
-      },
-      "spec": {
-         "clusterIP": "None",
-         "ports": [
-            {
-               "name": "stellardb-worker",
-               "port": 30815,
-               "protocol": "TCP",
-               "targetPort": 30815
-            },
-            {
-               "name": "stellardb-worker-ui",
-               "port": 50089,
-               "protocol": "TCP",
-               "targetPort": 50089
-            },
-            {
-               "name": "stellardb-raft",
-               "port": 1998,
-               "protocol": "TCP",
-               "targetPort": 1998
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         }
-      }
-   },
-   "stellardb-worker-statefulset.json": {
-      "apiVersion": "apps/v1beta1",
-      "kind": "StatefulSet",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "name": "stellardb-worker-1100"
-      },
-      "spec": {
-         "podManagementPolicy": "Parallel",
-         "replicas": 3,
-         "selector": {
-            "matchLabels": {
-               "transwarp.install": "1100",
-               "transwarp.name": "stellardb-worker"
-            }
-         },
-         "serviceName": "stellardb-worker-1100",
-         "template": {
-            "metadata": {
-               "annotations": {
-                  "cni.networks": "overlay",
-                  "pod.alpha.kubernetes.io/initialized": "true",
-                  "transwarp.app": "inceptor",
-                  "transwarp/configmap.md5": "aff4a3be1c6ead5c85e621e7b2a429f570bd535b959b0be4152c05a1952c9dcc"
-               },
-               "labels": {
-                  "transwarp.alias": "inceptor_ews1100",
-                  "transwarp.install": "1100",
-                  "transwarp.name": "stellardb-worker"
-               }
-            },
-            "spec": {
-               "affinity": {
-                  "podAntiAffinity": {
-                     "requiredDuringSchedulingIgnoredDuringExecution": [
-                        {
-                           "labelSelector": {
-                              "matchLabels": {
-                                 "transwarp.alias": "inceptor_ews1100",
-                                 "transwarp.install": "1100",
-                                 "transwarp.name": "stellardb-worker"
-                              }
-                           },
-                           "namespaces": [
-                              "u5003"
-                           ],
-                           "topologyKey": "kubernetes.io/hostname"
-                        }
-                     ]
-                  }
-               },
-               "containers": [
-                  {
-                     "args": [
-                        "/boot/entrypoint.sh",
-                        "STELLARDB_WORKER"
-                     ],
-                     "env": [
-                        {
-                           "name": "MSL_TLS_SERVER_URL",
-                           "value": ""
-                        }
-                     ],
-                     "image": "172.16.1.99/transwarp/stellardb:transwarp-6.0.1-final",
-                     "imagePullPolicy": "Always",
-                     "name": "stellardb-worker",
-                     "readinessProbe": {
-                        "httpGet": {
-                           "path": "/index.html",
-                           "port": 50089
-                        },
-                        "initialDelaySeconds": 60
-                     },
-                     "resources": {
-                        "limits": {
-                           "cpu": "4",
-                           "memory": "16Gi"
-                        },
-                        "requests": {
-                           "cpu": "1",
-                           "memory": "8Gi"
-                        }
-                     },
-                     "volumeMounts": [
-                        {
-                           "mountPath": "/var/log/stellardb",
-                           "name": "log"
-                        },
-                        {
-                           "mountPath": "/var/data/stellardb",
-                           "name": "data"
-                        },
-                        {
-                           "mountPath": "/boot",
-                           "name": "stellardb-entrypoint"
-                        },
-                        {
-                           "mountPath": "/etc/confd",
-                           "name": "stellardb-confd-conf"
-                        }
-                     ]
-                  }
-               ],
-               "hostNetwork": false,
-               "priorityClassName": "low-priority",
-               "terminationGracePeriodSeconds": 0,
-               "volumes": [
-                  {
-                     "name": "log",
-                     "tosDisk": {
-                        "accessMode": "ReadWriteOnce",
-                        "capability": "20Gi",
-                        "name": "log",
-                        "storageType": "silver"
-                     }
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "entrypoint.sh",
-                              "mode": 493,
-                              "path": "entrypoint.sh"
-                           }
-                        ],
-                        "name": "stellardb-entrypoint-1100"
-                     },
-                     "name": "stellardb-entrypoint"
-                  },
-                  {
-                     "configMap": {
-                        "items": [
-                           {
-                              "key": "stellardb-confd.conf",
-                              "path": "stellardb-confd.conf"
-                           },
-                           {
-                              "key": "tdh-env.toml",
-                              "path": "conf.d/tdh-env.toml"
-                           },
-                           {
-                              "key": "tdh-env.sh.tmpl",
-                              "path": "templates/tdh-env.sh.tmpl"
-                           },
-                           {
-                              "key": "graphconf.xml.tmpl",
-                              "path": "templates/graphconf.xml.tmpl"
-                           },
-                           {
-                              "key": "graphconf.toml",
-                              "path": "conf.d/graphconf.toml"
-                           }
-                        ],
-                        "name": "stellardb-confd-conf-1100"
-                     },
-                     "name": "stellardb-confd-conf"
-                  }
-               ]
-            }
-         },
-         "updateStrategy": {
-            "type": "RollingUpdate"
-         },
-         "volumeClaimTemplates": [
-            {
-               "metadata": {
-                  "annotations": {
-                     "volume.beta.kubernetes.io/storage-class": "silver"
-                  },
-                  "labels": {
-                     "transwarp.alias": "inceptor_ews1100",
-                     "transwarp.install": "1100",
-                     "transwarp.name": "stellardb-worker"
-                  },
-                  "name": "data"
-               },
-               "spec": {
-                  "accessModes": [
-                     "ReadWriteOnce"
-                  ],
-                  "resources": {
-                     "requests": {
-                        "storage": "200Gi"
-                     }
-                  }
-               }
-            }
-         ]
-      }
-   },
-   "stellardb-worker-svc.json": {
-      "apiVersion": "v1",
-      "kind": "Service",
-      "metadata": {
-         "annotations": { },
-         "labels": {
-            "k8s-app": "stellardb-worker",
-            "kubernetes.io/cluster-service": "true",
-            "transwarp.alias": "inceptor_ews1100",
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "name": "stellardb-worker-1100"
-      },
-      "spec": {
-         "ports": [
-            {
-               "name": "stellardb-worker-ui",
-               "port": 50089,
-               "protocol": "TCP",
-               "targetPort": 50089
-            }
-         ],
-         "selector": {
-            "transwarp.install": "1100",
-            "transwarp.name": "stellardb-worker"
-         },
-         "type": "NodePort"
-      }
-   }
-}
Index: stellardb/6.0/values.yaml
===================================================================
--- stellardb/6.0/values.yaml	(date 1571652042000)
+++ stellardb/6.0/values.yaml	(date 1571652042000)
@@ -1,5 +0,0 @@
-Transwarp_License_Address: ""
-Transwarp_Install_ID: ""
-Transwarp_Install_Namespace: ""
-Customized_Instance_Selector: {}
-Customized_Namespace: ""
\ No newline at end of file
Index: stellardb/6.0/values.yaml
===================================================================
--- stellardb/6.0/values.yaml	(date 1571728600000)
+++ stellardb/6.0/values.yaml	(date 1571728600000)
@@ -1,5 +0,0 @@
-Transwarp_License_Address: ""
-Transwarp_Install_ID: ""
-Transwarp_Install_Namespace: ""
-Customized_Instance_Selector: {}
-Customized_Namespace: ""
\ No newline at end of file
diff --git transwarp-commonlib/6.2/files/graphconf.xml.tmpl transwarp-commonlib/6.2/files/graphconf.xml.tmpl
new file mode 100644
index 0000000000000000000000000000000000000000..912c8c5fb3d2644ee9a58549ed57d4b7955dfba4
GIT binary patch
literal 444
zc$|GuL2iRE5WMq>m5-HTw|7GxkbAC?6E=WiZ0cPQ1o8LUaA~WMn`cHdJ7awuTMGjQ
zYP`$Em;4mRBGZXI5Kk7VMr7cr!(1?qtVXf|>VWrL+`PLtRUZsTvrIztX8I2u34nP%
zKrpUCsE`SSB1UUXD6f~BZP4*$^QbDAu3mxq5U?!KtGnPk3_KMPMCeS5#XMgPA;=R>
z%c9lFZSr7jpLBUnk0fqPN>ab0QYUm}I<j|VZ6lu#`Q7`_w=eIcMZ=p#PwyXyF?yFb
TWf_nNNq|V3cN%9}{rlJ-OOTia

